["^ ","~:output",["^ ","~:js","goog.provide('day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util');\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.IFn}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor = (function (red,green,blue,hue,saturation,lightness,alpha,__meta,__extmap,__hash){\nthis.red = red;\nthis.green = green;\nthis.blue = blue;\nthis.hue = hue;\nthis.saturation = saturation;\nthis.lightness = lightness;\nthis.alpha = alpha;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716171;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4385__auto__,k__4386__auto__){\nvar self__ = this;\nvar this__4385__auto____$1 = this;\nreturn this__4385__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4386__auto__,null);\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4387__auto__,k38792,else__4388__auto__){\nvar self__ = this;\nvar this__4387__auto____$1 = this;\nvar G__38809 = k38792;\nvar G__38809__$1 = (((G__38809 instanceof cljs.core.Keyword))?G__38809.fqn:null);\nswitch (G__38809__$1) {\ncase \"red\":\nreturn self__.red;\n\nbreak;\ncase \"green\":\nreturn self__.green;\n\nbreak;\ncase \"blue\":\nreturn self__.blue;\n\nbreak;\ncase \"hue\":\nreturn self__.hue;\n\nbreak;\ncase \"saturation\":\nreturn self__.saturation;\n\nbreak;\ncase \"lightness\":\nreturn self__.lightness;\n\nbreak;\ncase \"alpha\":\nreturn self__.alpha;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k38792,else__4388__auto__);\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4404__auto__,f__4405__auto__,init__4406__auto__){\nvar self__ = this;\nvar this__4404__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (this__4404__auto____$1){\nreturn (function (ret__4407__auto__,p__38815){\nvar vec__38816 = p__38815;\nvar k__4408__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38816,(0),null);\nvar v__4409__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38816,(1),null);\nreturn (f__4405__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4405__auto__.cljs$core$IFn$_invoke$arity$3(ret__4407__auto__,k__4408__auto__,v__4409__auto__) : f__4405__auto__.call(null,ret__4407__auto__,k__4408__auto__,v__4409__auto__));\n});})(this__4404__auto____$1))\n,init__4406__auto__,this__4404__auto____$1);\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4399__auto__,writer__4400__auto__,opts__4401__auto__){\nvar self__ = this;\nvar this__4399__auto____$1 = this;\nvar pr_pair__4402__auto__ = ((function (this__4399__auto____$1){\nreturn (function (keyval__4403__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4401__auto__,keyval__4403__auto__);\n});})(this__4399__auto____$1))\n;\nreturn cljs.core.pr_sequential_writer(writer__4400__auto__,pr_pair__4402__auto__,\"#day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color.CSSColor{\",\", \",\"}\",opts__4401__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"red\",\"red\",-969428204),self__.red],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"green\",\"green\",-945526839),self__.green],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),self__.blue],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),self__.hue],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),self__.saturation],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),self__.lightness],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),self__.alpha],null))], null),self__.__extmap));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__38791){\nvar self__ = this;\nvar G__38791__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__38791__$1,7,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4383__auto__){\nvar self__ = this;\nvar this__4383__auto____$1 = this;\nreturn self__.__meta;\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4380__auto__){\nvar self__ = this;\nvar this__4380__auto____$1 = this;\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,self__.__hash));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4389__auto__){\nvar self__ = this;\nvar this__4389__auto____$1 = this;\nreturn (7 + cljs.core.count(self__.__extmap));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4381__auto__){\nvar self__ = this;\nvar this__4381__auto____$1 = this;\nvar h__4243__auto__ = self__.__hash;\nif((!((h__4243__auto__ == null)))){\nreturn h__4243__auto__;\n} else {\nvar h__4243__auto____$1 = (function (){var fexpr__38859 = ((function (h__4243__auto__,this__4381__auto____$1){\nreturn (function (coll__4382__auto__){\nreturn (782025744 ^ cljs.core.hash_unordered_coll(coll__4382__auto__));\n});})(h__4243__auto__,this__4381__auto____$1))\n;\nreturn fexpr__38859(this__4381__auto____$1);\n})();\nself__.__hash = h__4243__auto____$1;\n\nreturn h__4243__auto____$1;\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this38793,other38794){\nvar self__ = this;\nvar this38793__$1 = this;\nreturn (((!((other38794 == null)))) && ((this38793__$1.constructor === other38794.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this38793__$1.red,other38794.red)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this38793__$1.green,other38794.green)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this38793__$1.blue,other38794.blue)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this38793__$1.hue,other38794.hue)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this38793__$1.saturation,other38794.saturation)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this38793__$1.lightness,other38794.lightness)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this38793__$1.alpha,other38794.alpha)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this38793__$1.__extmap,other38794.__extmap)));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4394__auto__,k__4395__auto__){\nvar self__ = this;\nvar this__4394__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),null,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),null,new cljs.core.Keyword(null,\"green\",\"green\",-945526839),null,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),null,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),null,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),null,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),null], null), null),k__4395__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4394__auto____$1),self__.__meta),k__4395__auto__);\n} else {\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4395__auto__)),null));\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4392__auto__,k__4393__auto__,G__38791){\nvar self__ = this;\nvar this__4392__auto____$1 = this;\nvar pred__38864 = cljs.core.keyword_identical_QMARK_;\nvar expr__38865 = k__4393__auto__;\nif(cljs.core.truth_((function (){var G__38867 = new cljs.core.Keyword(null,\"red\",\"red\",-969428204);\nvar G__38868 = expr__38865;\nreturn (pred__38864.cljs$core$IFn$_invoke$arity$2 ? pred__38864.cljs$core$IFn$_invoke$arity$2(G__38867,G__38868) : pred__38864.call(null,G__38867,G__38868));\n})())){\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(G__38791,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((function (){var G__38869 = new cljs.core.Keyword(null,\"green\",\"green\",-945526839);\nvar G__38870 = expr__38865;\nreturn (pred__38864.cljs$core$IFn$_invoke$arity$2 ? pred__38864.cljs$core$IFn$_invoke$arity$2(G__38869,G__38870) : pred__38864.call(null,G__38869,G__38870));\n})())){\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,G__38791,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((function (){var G__38871 = new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620);\nvar G__38872 = expr__38865;\nreturn (pred__38864.cljs$core$IFn$_invoke$arity$2 ? pred__38864.cljs$core$IFn$_invoke$arity$2(G__38871,G__38872) : pred__38864.call(null,G__38871,G__38872));\n})())){\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,G__38791,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((function (){var G__38873 = new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848);\nvar G__38874 = expr__38865;\nreturn (pred__38864.cljs$core$IFn$_invoke$arity$2 ? pred__38864.cljs$core$IFn$_invoke$arity$2(G__38873,G__38874) : pred__38864.call(null,G__38873,G__38874));\n})())){\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,G__38791,self__.saturation,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((function (){var G__38875 = new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929);\nvar G__38876 = expr__38865;\nreturn (pred__38864.cljs$core$IFn$_invoke$arity$2 ? pred__38864.cljs$core$IFn$_invoke$arity$2(G__38875,G__38876) : pred__38864.call(null,G__38875,G__38876));\n})())){\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,G__38791,self__.lightness,self__.alpha,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((function (){var G__38877 = new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930);\nvar G__38878 = expr__38865;\nreturn (pred__38864.cljs$core$IFn$_invoke$arity$2 ? pred__38864.cljs$core$IFn$_invoke$arity$2(G__38877,G__38878) : pred__38864.call(null,G__38877,G__38878));\n})())){\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,G__38791,self__.alpha,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((function (){var G__38879 = new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441);\nvar G__38880 = expr__38865;\nreturn (pred__38864.cljs$core$IFn$_invoke$arity$2 ? pred__38864.cljs$core$IFn$_invoke$arity$2(G__38879,G__38880) : pred__38864.call(null,G__38879,G__38880));\n})())){\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,G__38791,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4393__auto__,G__38791),null));\n}\n}\n}\n}\n}\n}\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4397__auto__){\nvar self__ = this;\nvar this__4397__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"red\",\"red\",-969428204),self__.red,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"green\",\"green\",-945526839),self__.green,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),self__.blue,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),self__.hue,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),self__.saturation,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),self__.lightness,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),self__.alpha,null))], null),self__.__extmap));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4384__auto__,G__38791){\nvar self__ = this;\nvar this__4384__auto____$1 = this;\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(self__.red,self__.green,self__.blue,self__.hue,self__.saturation,self__.lightness,self__.alpha,G__38791,self__.__extmap,self__.__hash));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4390__auto__,entry__4391__auto__){\nvar self__ = this;\nvar this__4390__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4391__auto__)){\nreturn this__4390__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4391__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4390__auto____$1,entry__4391__auto__);\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.call = (function() {\nvar G__39171 = null;\nvar G__39171__1 = (function (self__){\nvar self__ = this;\nvar self____$1 = this;\nvar this$ = self____$1;\nreturn this$;\n});\nvar G__39171__2 = (function (self__,k){\nvar self__ = this;\nvar self____$1 = this;\nvar this$ = self____$1;\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(this$,k);\n});\nvar G__39171__3 = (function (self__,k,missing){\nvar self__ = this;\nvar self____$1 = this;\nvar this$ = self____$1;\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(this$,k,missing);\n});\nG__39171 = function(self__,k,missing){\nswitch(arguments.length){\ncase 1:\nreturn G__39171__1.call(this,self__);\ncase 2:\nreturn G__39171__2.call(this,self__,k);\ncase 3:\nreturn G__39171__3.call(this,self__,k,missing);\n}\nthrow(new Error('Invalid arity: ' + (arguments.length - 1)));\n};\nG__39171.cljs$core$IFn$_invoke$arity$1 = G__39171__1;\nG__39171.cljs$core$IFn$_invoke$arity$2 = G__39171__2;\nG__39171.cljs$core$IFn$_invoke$arity$3 = G__39171__3;\nreturn G__39171;\n})()\n;\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.apply = (function (self__,args38801){\nvar self__ = this;\nvar self____$1 = this;\nreturn self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args38801)));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$0 = (function (){\nvar self__ = this;\nvar this$ = this;\nreturn this$;\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){\nvar self__ = this;\nvar this$ = this;\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(this$,k);\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,missing){\nvar self__ = this;\nvar this$ = this;\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(this$,k,missing);\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"red\",\"red\",671103323,null),new cljs.core.Symbol(null,\"green\",\"green\",695004688,null),new cljs.core.Symbol(null,\"blue\",\"blue\",1018430907,null),new cljs.core.Symbol(null,\"hue\",\"hue\",1132452679,null),new cljs.core.Symbol(null,\"saturation\",\"saturation\",1626283598,null),new cljs.core.Symbol(null,\"lightness\",\"lightness\",-400370403,null),new cljs.core.Symbol(null,\"alpha\",\"alpha\",65549086,null)], null);\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.cljs$lang$type = true;\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.cljs$lang$ctorPrSeq = (function (this__4428__auto__){\nreturn (new cljs.core.List(null,\"day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor\",null,(1),null));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__){\nreturn cljs.core._write(writer__4429__auto__,\"day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor\");\n});\n\n/**\n * Positional factory function for day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.__GT_CSSColor = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$__GT_CSSColor(red,green,blue,hue,saturation,lightness,alpha){\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(red,green,blue,hue,saturation,lightness,alpha,null,null,null));\n});\n\n/**\n * Factory function for day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor, taking a map of keywords to field values.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.map__GT_CSSColor = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$map__GT_CSSColor(G__38797){\nvar extmap__4424__auto__ = (function (){var G__38930 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__38797,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441)], 0));\nif(cljs.core.record_QMARK_(G__38797)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__38930);\n} else {\nreturn G__38930;\n}\n})();\nreturn (new day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.CSSColor(new cljs.core.Keyword(null,\"red\",\"red\",-969428204).cljs$core$IFn$_invoke$arity$1(G__38797),new cljs.core.Keyword(null,\"green\",\"green\",-945526839).cljs$core$IFn$_invoke$arity$1(G__38797),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620).cljs$core$IFn$_invoke$arity$1(G__38797),new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848).cljs$core$IFn$_invoke$arity$1(G__38797),new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929).cljs$core$IFn$_invoke$arity$1(G__38797),new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930).cljs$core$IFn$_invoke$arity$1(G__38797),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441).cljs$core$IFn$_invoke$arity$1(G__38797),null,cljs.core.not_empty(extmap__4424__auto__),null));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.map__GT_CSSColor;\n/**\n * Create an RGB color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rgb(var_args){\nvar G__38944 = arguments.length;\nswitch (G__38944) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1 = (function (p__38945){\nvar vec__38946 = p__38945;\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38946,(0),null);\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38946,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38946,(2),null);\nvar vs = vec__38946;\nif(cljs.core.every_QMARK_(((function (vec__38946,r,g,b,vs){\nreturn (function (p1__38942_SHARP_){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.between_QMARK_(p1__38942_SHARP_,(0),(255));\n});})(vec__38946,r,g,b,vs))\n,vs)){\nvar G__38949 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"red\",\"red\",-969428204),r,new cljs.core.Keyword(null,\"green\",\"green\",-945526839),g,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),b], null);\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__38949) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__38949));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"RGB values must be between 0 and 255\",cljs.core.PersistentArrayMap.EMPTY);\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$3 = (function (r,g,b){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b], null));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$lang$maxFixedArity = 3;\n\n/**\n * Create an RGBA color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rgba(var_args){\nvar G__38952 = arguments.length;\nswitch (G__38952) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 4:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba.cljs$core$IFn$_invoke$arity$1 = (function (p__38955){\nvar vec__38956 = p__38955;\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38956,(0),null);\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38956,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38956,(2),null);\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38956,(3),null);\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.between_QMARK_(a,(0),(1))){\nvar G__38959 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b], null)),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),a);\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__38959) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__38959));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Alpha value must be between 0 and 1\",cljs.core.PersistentArrayMap.EMPTY);\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba.cljs$core$IFn$_invoke$arity$4 = (function (r,g,b,a){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b,a], null));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba.cljs$lang$maxFixedArity = 4;\n\n/**\n * Create an HSL color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hsl(var_args){\nvar G__38980 = arguments.length;\nswitch (G__38980) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 3:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$1 = (function (p__38981){\nvar vec__38982 = p__38981;\nvar h = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38982,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38982,(1),null);\nvar l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38982,(2),null);\nvar vec__38985 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (vec__38982,h,s,l){\nreturn (function (p1__38967_SHARP_){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(p1__38967_SHARP_,new cljs.core.Keyword(null,\"magnitude\",\"magnitude\",1924274222),p1__38967_SHARP_);\n});})(vec__38982,h,s,l))\n,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h,s,l], null));\nvar h__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38985,(0),null);\nvar s__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38985,(1),null);\nvar l__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__38985,(2),null);\nif(((day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.between_QMARK_(s__$1,(0),(100))) && (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.between_QMARK_(l__$1,(0),(100))))){\nvar G__38997 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),cljs.core.mod(h__$1,(360)),new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),s__$1,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),l__$1], null);\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__38997) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__38997));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Saturation and lightness must be between 0(%) and 100(%)\",cljs.core.PersistentArrayMap.EMPTY);\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$3 = (function (h,s,l){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h,s,l], null));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$lang$maxFixedArity = 3;\n\n/**\n * Create an HSLA color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hsla(var_args){\nvar G__38999 = arguments.length;\nswitch (G__38999) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 4:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla.cljs$core$IFn$_invoke$arity$1 = (function (p__39005){\nvar vec__39008 = p__39005;\nvar h = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39008,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39008,(1),null);\nvar l = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39008,(2),null);\nvar a = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39008,(3),null);\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.between_QMARK_(a,(0),(1))){\nvar G__39014 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h,s,l], null)),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),a);\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__39014) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__39014));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Alpha value must be between 0 and 1\",cljs.core.PersistentArrayMap.EMPTY);\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla.cljs$core$IFn$_invoke$arity$4 = (function (h,s,l,a){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [h,s,l,a], null));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla.cljs$lang$maxFixedArity = 4;\n\n/**\n * Return true if color is an RGB color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_QMARK_ = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rgb_QMARK_(color){\nreturn ((cljs.core.map_QMARK_(color)) && (cljs.core.every_QMARK_(color,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"green\",\"green\",-945526839),null,new cljs.core.Keyword(null,\"red\",\"red\",-969428204),null,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),null], null), null))));\n});\n/**\n * Return true if color is an HSL color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl_QMARK_ = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hsl_QMARK_(color){\nreturn ((cljs.core.map_QMARK_(color)) && (cljs.core.every_QMARK_(color,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),null,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),null,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),null], null), null))));\n});\n/**\n * Return true if color is an HSLA color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla_QMARK_ = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hsla_QMARK_(color){\nreturn ((cljs.core.map_QMARK_(color)) && (cljs.core.every_QMARK_(color,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),null,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),null,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),null,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),null], null), null))));\n});\n/**\n * Return true if x is a color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_QMARK_ = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$color_QMARK_(x){\nreturn ((day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_QMARK_(x)) || (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl_QMARK_(x)));\n});\n/**\n * Regular expression for matching a hexadecimal color.\n *           Matches hexadecimal colors of length three or six possibly\n *           lead by a \"#\". The color portion is captured.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_re = /#?([\\da-fA-F]{6}|[\\da-fA-F]{3})/;\n/**\n * Returns true if x is a hexadecimal color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_QMARK_ = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hex_QMARK_(x){\nreturn cljs.core.boolean$((function (){var and__4120__auto__ = typeof x === 'string';\nif(and__4120__auto__){\nreturn cljs.core.re_matches(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_re,x);\n} else {\nreturn and__4120__auto__;\n}\n})());\n});\n/**\n * Convert a hexadecimal color to an RGB color map.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_rgb = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hex__GT_rgb(s){\nvar temp__5735__auto__ = cljs.core.re_matches(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_re,s);\nif(cljs.core.truth_(temp__5735__auto__)){\nvar vec__39051 = temp__5735__auto__;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39051,(0),null);\nvar hex = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39051,(1),null);\nvar hex__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((3),cljs.core.count(hex)))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(((function (vec__39051,_,hex,temp__5735__auto__){\nreturn (function (p1__39049_SHARP_){\nreturn (new cljs.core.List(null,p1__39049_SHARP_,(new cljs.core.List(null,p1__39049_SHARP_,null,(1),null)),(2),null));\n});})(vec__39051,_,hex,temp__5735__auto__))\n,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([hex], 0))):hex);\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (hex__$1,vec__39051,_,hex,temp__5735__auto__){\nreturn (function (p1__39050_SHARP_){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic(p1__39050_SHARP_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(16)], 0));\n});})(hex__$1,vec__39051,_,hex,temp__5735__auto__))\n,cljs.core.re_seq(/[\\da-fA-F]{2}/,hex__$1)));\n} else {\nreturn null;\n}\n});\n/**\n * Convert an RGB color map to a hexadecimal color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb__GT_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rgb__GT_hex(p__39059){\nvar map__39061 = p__39059;\nvar map__39061__$1 = (((((!((map__39061 == null))))?(((((map__39061.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__39061.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__39061):map__39061);\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39061__$1,new cljs.core.Keyword(null,\"red\",\"red\",-969428204));\nvar g = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39061__$1,new cljs.core.Keyword(null,\"green\",\"green\",-945526839));\nvar b = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39061__$1,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620));\nvar hex_part = ((function (map__39061,map__39061__$1,r,g,b){\nreturn (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rgb__GT_hex_$_hex_part(v){\nreturn clojure.string.replace(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.format.cljs$core$IFn$_invoke$arity$variadic(\"%2s\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(16)], 0))], 0)),\" \",\"0\");\n});})(map__39061,map__39061__$1,r,g,b))\n;\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.str,\"#\",cljs.core.map.cljs$core$IFn$_invoke$arity$2(hex_part,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b], null)));\n});\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.trim_one = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$trim_one(x){\nif(((1) < x)){\nreturn (1);\n} else {\nreturn x;\n}\n});\n/**\n * Convert an RGB color map to an HSL color map.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb__GT_hsl = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rgb__GT_hsl(p__39069){\nvar map__39070 = p__39069;\nvar map__39070__$1 = (((((!((map__39070 == null))))?(((((map__39070.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__39070.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__39070):map__39070);\nvar color = map__39070__$1;\nvar red = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39070__$1,new cljs.core.Keyword(null,\"red\",\"red\",-969428204));\nvar green = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39070__$1,new cljs.core.Keyword(null,\"green\",\"green\",-945526839));\nvar blue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39070__$1,new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620));\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl_QMARK_(color)){\nreturn color;\n} else {\nvar vec__39080 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (map__39070,map__39070__$1,color,red,green,blue){\nreturn (function (p1__39066_SHARP_){\nreturn (p1__39066_SHARP_ / (255));\n});})(map__39070,map__39070__$1,color,red,green,blue))\n,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [red,green,blue], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39080,(0),null);\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39080,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39080,(2),null);\nvar mx = (function (){var x__4219__auto__ = (function (){var x__4219__auto__ = r;\nvar y__4220__auto__ = g;\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})();\nvar y__4220__auto__ = b;\nreturn ((x__4219__auto__ > y__4220__auto__) ? x__4219__auto__ : y__4220__auto__);\n})();\nvar mn = (function (){var x__4222__auto__ = (function (){var x__4222__auto__ = r;\nvar y__4223__auto__ = g;\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})();\nvar y__4223__auto__ = b;\nreturn ((x__4222__auto__ < y__4223__auto__) ? x__4222__auto__ : y__4223__auto__);\n})();\nvar d = (mx - mn);\nvar h = (function (){var pred__39094 = cljs.core._EQ_;\nvar expr__39095 = mx;\nif(cljs.core.truth_((pred__39094.cljs$core$IFn$_invoke$arity$2 ? pred__39094.cljs$core$IFn$_invoke$arity$2(mn,expr__39095) : pred__39094.call(null,mn,expr__39095)))){\nreturn (0);\n} else {\nif(cljs.core.truth_((pred__39094.cljs$core$IFn$_invoke$arity$2 ? pred__39094.cljs$core$IFn$_invoke$arity$2(r,expr__39095) : pred__39094.call(null,r,expr__39095)))){\nreturn ((60) * ((g - b) / d));\n} else {\nif(cljs.core.truth_((pred__39094.cljs$core$IFn$_invoke$arity$2 ? pred__39094.cljs$core$IFn$_invoke$arity$2(g,expr__39095) : pred__39094.call(null,g,expr__39095)))){\nreturn (((60) * ((b - r) / d)) + (120));\n} else {\nif(cljs.core.truth_((pred__39094.cljs$core$IFn$_invoke$arity$2 ? pred__39094.cljs$core$IFn$_invoke$arity$2(b,expr__39095) : pred__39094.call(null,b,expr__39095)))){\nreturn (((60) * ((r - g) / d)) + (240));\n} else {\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr__39095)].join('')));\n}\n}\n}\n}\n})();\nvar l = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.trim_one(((mx + mn) / (2)));\nvar s = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.trim_one(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(mx,mn))?(0):(((l < 0.5))?(d / ((2) * l)):(d / ((2) - ((2) * l)))\n)));\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$3(cljs.core.mod(h,(360)),((100) * s),((100) * l));\n}\n});\n/**\n * Convert an HSL color map to an RGB color map.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl__GT_rgb = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hsl__GT_rgb(p__39098){\nvar map__39099 = p__39098;\nvar map__39099__$1 = (((((!((map__39099 == null))))?(((((map__39099.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__39099.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__39099):map__39099);\nvar color = map__39099__$1;\nvar hue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39099__$1,new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848));\nvar saturation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39099__$1,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929));\nvar lightness = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39099__$1,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930));\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_QMARK_(color)){\nreturn color;\n} else {\nvar h = (hue / 360.0);\nvar s = (saturation / 100.0);\nvar l = (lightness / 100.0);\nvar m2 = (((l <= 0.5))?(l * (s + (1))):((l + s) - (l * s)));\nvar m1 = (((2) * l) - m2);\nvar vec__39101 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (h,s,l,m2,m1,map__39099,map__39099__$1,color,hue,saturation,lightness){\nreturn (function (p1__39097_SHARP_){\nvar G__39108 = (p1__39097_SHARP_ * (255));\nreturn Math.round(G__39108);\n});})(h,s,l,m2,m1,map__39099,map__39099__$1,color,hue,saturation,lightness))\n,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__39109 = m1;\nvar G__39110 = m2;\nvar G__39111 = (h + (1.0 / (3)));\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3(G__39109,G__39110,G__39111) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.call(null,G__39109,G__39110,G__39111));\n})(),(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3(m1,m2,h) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.call(null,m1,m2,h)),(function (){var G__39112 = m1;\nvar G__39113 = m2;\nvar G__39114 = (h - (1.0 / (3)));\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.cljs$core$IFn$_invoke$arity$3(G__39112,G__39113,G__39114) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb.call(null,G__39112,G__39113,G__39114));\n})()], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39101,(0),null);\nvar g = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39101,(1),null);\nvar b = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39101,(2),null);\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,g,b], null));\n}\n});\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue__GT_rgb = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hue__GT_rgb(m1,m2,h){\nvar h__$1 = (((h < (0)))?(h + (1)):(((h > (1)))?(h - (1)):h\n));\nif((((6) * h__$1) < (1))){\nreturn (m1 + (((m2 - m1) * h__$1) * (6)));\n} else {\nif((((2) * h__$1) < (1))){\nreturn m2;\n} else {\nif((((3) * h__$1) < (2))){\nreturn (m1 + (((m2 - m1) * ((2.0 / (3)) - h__$1)) * (6)));\n} else {\nreturn m1;\n\n}\n}\n}\n});\n/**\n * Convert an HSL color map to a hexadecimal string.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl__GT_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hsl__GT_hex(color){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb__GT_hex(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl__GT_rgb(color));\n});\n/**\n * Convert a hexadecimal color to an HSL color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_hsl = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hex__GT_hsl(color){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb__GT_hsl(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_rgb(color));\n});\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip = cljs.core.partial.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.clip,(0),(100));\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.zero_to_one_clip = cljs.core.partial.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.clip,0.0,1.0);\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_clip = cljs.core.partial.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.clip,(0),(255));\n/**\n * Convert a color to a hexadecimal string.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$as_hex(x){\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_QMARK_(x)){\nreturn x;\n} else {\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_QMARK_(x)){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb__GT_hex(x);\n} else {\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl_QMARK_(x)){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl__GT_hex(x);\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Can't convert \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),\" to a color.\"].join(''),cljs.core.PersistentArrayMap.EMPTY);\n\n}\n}\n}\n});\n/**\n * Convert a color to a RGB.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_rgb = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$as_rgb(x){\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_QMARK_(x)){\nreturn x;\n} else {\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl_QMARK_(x)){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl__GT_rgb(x);\n} else {\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_QMARK_(x)){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_rgb(x);\n} else {\nif(typeof x === 'number'){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_clip,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,x,x], null)));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Can't convert \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),\" to a color.\"].join(''),cljs.core.PersistentArrayMap.EMPTY);\n\n}\n}\n}\n}\n});\n/**\n * Convert a color to a HSL.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hsl = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$as_hsl(x){\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl_QMARK_(x)){\nreturn x;\n} else {\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_QMARK_(x)){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb__GT_hsl(x);\n} else {\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex_QMARK_(x)){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_hsl(x);\n} else {\nif(typeof x === 'number'){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip.cljs$core$IFn$_invoke$arity$1(x) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip.call(null,x)),(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip.cljs$core$IFn$_invoke$arity$1(x) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip.call(null,x))], null));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Can't convert \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),\" to a color.\"].join(''),cljs.core.PersistentArrayMap.EMPTY);\n\n}\n}\n}\n}\n});\n/**\n * Converts a color to HSLA. Assumes an alpha value of 1.00 unless one is\n *   currently set on color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hsla = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$as_hsla(color){\nvar current_alpha = cljs.core.get.cljs$core$IFn$_invoke$arity$3(color,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),1.0);\nif(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla_QMARK_(color)){\nreturn color;\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hsl(color),new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),current_alpha);\n}\n});\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.restrict_rgb = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$restrict_rgb(m){\nreturn cljs.core.select_keys(m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620)], null));\n});\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.make_color_operation = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation(op){\nreturn (function() {\nvar day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op = null;\nvar day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__1 = (function (a){\nreturn a;\n});\nvar day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__2 = (function (a,b){\nvar o = cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb_clip,op);\nvar a__$1 = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.restrict_rgb(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_rgb(a));\nvar b__$1 = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.restrict_rgb(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_rgb(b));\nvar G__39120 = cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(o,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a__$1,b__$1], 0));\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__39120) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__39120));\n});\nvar day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__3 = (function() { \nvar G__39179__delegate = function (a,b,more){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op,day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$2(a,b),more);\n};\nvar G__39179 = function (a,b,var_args){\nvar more = null;\nif (arguments.length > 2) {\nvar G__39180__i = 0, G__39180__a = new Array(arguments.length -  2);\nwhile (G__39180__i < G__39180__a.length) {G__39180__a[G__39180__i] = arguments[G__39180__i + 2]; ++G__39180__i;}\n  more = new cljs.core.IndexedSeq(G__39180__a,0,null);\n} \nreturn G__39179__delegate.call(this,a,b,more);};\nG__39179.cljs$lang$maxFixedArity = 2;\nG__39179.cljs$lang$applyTo = (function (arglist__39181){\nvar a = cljs.core.first(arglist__39181);\narglist__39181 = cljs.core.next(arglist__39181);\nvar b = cljs.core.first(arglist__39181);\nvar more = cljs.core.rest(arglist__39181);\nreturn G__39179__delegate(a,b,more);\n});\nG__39179.cljs$core$IFn$_invoke$arity$variadic = G__39179__delegate;\nreturn G__39179;\n})()\n;\nday8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op = function(a,b,var_args){\nvar more = var_args;\nswitch(arguments.length){\ncase 1:\nreturn day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__1.call(this,a);\ncase 2:\nreturn day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__2.call(this,a,b);\ndefault:\nvar G__39182 = null;\nif (arguments.length > 2) {\nvar G__39183__i = 0, G__39183__a = new Array(arguments.length -  2);\nwhile (G__39183__i < G__39183__a.length) {G__39183__a[G__39183__i] = arguments[G__39183__i + 2]; ++G__39183__i;}\nG__39182 = new cljs.core.IndexedSeq(G__39183__a,0,null);\n}\nreturn day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__3.cljs$core$IFn$_invoke$arity$variadic(a,b, G__39182);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nday8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op.cljs$lang$maxFixedArity = 2;\nday8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op.cljs$lang$applyTo = day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__3.cljs$lang$applyTo;\nday8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$1 = day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__1;\nday8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$2 = day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__2;\nday8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$variadic = day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op__3.cljs$core$IFn$_invoke$arity$variadic;\nreturn day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op;\n})()\n});\n/**\n * Add the RGB components of two or more colors.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_PLUS_ = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.make_color_operation(cljs.core._PLUS_);\n/**\n * Subtract the RGB components of two or more colors.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_ = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.make_color_operation(cljs.core._);\n/**\n * Multiply the RGB components of two or more colors.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_STAR_ = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.make_color_operation(cljs.core._STAR_);\n/**\n * Multiply the RGB components of two or more colors.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_div = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.make_color_operation(cljs.core._SLASH_);\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$update_hsla_field(color,field,f,v){\nvar v__$1 = new cljs.core.Keyword(null,\"magnitude\",\"magnitude\",1924274222).cljs$core$IFn$_invoke$arity$2(v,v);\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hsla(color),field,f,v__$1);\n});\n/**\n * Rotates the hue value of a given color by amount.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rotate_hue = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$rotate_hue(color,amount){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"hue\",\"hue\",-508078848),cljs.core.comp.cljs$core$IFn$_invoke$arity$2((function (p1__39123_SHARP_){\nreturn cljs.core.mod(p1__39123_SHARP_,(360));\n}),cljs.core._PLUS_),amount);\n});\n/**\n * Increase the saturation value of a given color by amount.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.saturate = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$saturate(color,amount){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip,cljs.core._PLUS_),amount);\n});\n/**\n * Decrease the saturation value of a given color by amount.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.desaturate = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$desaturate(color,amount){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip,cljs.core._),amount);\n});\n/**\n * Increase the lightness value a given color by amount.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.lighten = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$lighten(color,amount){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip,cljs.core._PLUS_),amount);\n});\n/**\n * Decrease the lightness value a given color by amount.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.darken = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$darken(color,amount){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.percent_clip,cljs.core._),amount);\n});\n/**\n * Decreases the alpha value of a given color by amount.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.transparentize = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$transparentize(color,amount){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.zero_to_one_clip,cljs.core._),amount);\n});\n/**\n * Increases the alpha value of a given color by amount.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.opacify = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$opacify(color,amount){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.zero_to_one_clip,cljs.core._PLUS_),amount);\n});\n/**\n * Return the inversion of a color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.invert = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$invert(color){\nvar G__39129 = cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(cljs.core._,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"red\",\"red\",-969428204),(255),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),(255),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),(255)], null),day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_rgb(color)], 0));\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__39129) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__39129));\n});\n/**\n * Mix two or more colors by averaging their RGB channels.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$mix(var_args){\nvar G__39134 = arguments.length;\nswitch (G__39134) {\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4751__auto__ = [];\nvar len__4730__auto___39185 = arguments.length;\nvar i__4731__auto___39186 = (0);\nwhile(true){\nif((i__4731__auto___39186 < len__4730__auto___39185)){\nargs_arr__4751__auto__.push((arguments[i__4731__auto___39186]));\n\nvar G__39187 = (i__4731__auto___39186 + (1));\ni__4731__auto___39186 = G__39187;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4752__auto__ = (new cljs.core.IndexedSeq(args_arr__4751__auto__.slice((2)),(0),null));\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4752__auto__);\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$core$IFn$_invoke$arity$2 = (function (color_1,color_2){\nvar c1 = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.restrict_rgb(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_rgb(color_1));\nvar c2 = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.restrict_rgb(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_rgb(color_2));\nvar G__39135 = cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.average,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([c1,c2], 0));\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.cljs$core$IFn$_invoke$arity$1(G__39135) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_color.call(null,G__39135));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$core$IFn$_invoke$arity$variadic = (function (color_1,color_2,more){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix,day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$core$IFn$_invoke$arity$2(color_1,color_2),more);\n});\n\n/** @this {Function} */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$lang$applyTo = (function (seq39131){\nvar G__39132 = cljs.core.first(seq39131);\nvar seq39131__$1 = cljs.core.next(seq39131);\nvar G__39133 = cljs.core.first(seq39131__$1);\nvar seq39131__$2 = cljs.core.next(seq39131__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__39132,G__39133,seq39131__$2);\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$lang$maxFixedArity = (2);\n\n/**\n * Return the complement of a color.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.complement = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$complement(color){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rotate_hue(color,(180));\n});\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hue_rotations(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___39188 = arguments.length;\nvar i__4731__auto___39189 = (0);\nwhile(true){\nif((i__4731__auto___39189 < len__4730__auto___39188)){\nargs__4736__auto__.push((arguments[i__4731__auto___39189]));\n\nvar G__39190 = (i__4731__auto___39189 + (1));\ni__4731__auto___39189 = G__39190;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic = (function (color,amounts){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rotate_hue,color),amounts);\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$lang$applyTo = (function (seq39141){\nvar G__39142 = cljs.core.first(seq39141);\nvar seq39141__$1 = cljs.core.next(seq39141);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__39142,seq39141__$1);\n});\n\n/**\n * Given a color return a triple of colors which are 0, 30, and 60\n *   degrees clockwise from it. If a second falsy argument is passed the\n *   returned values will be in a counter-clockwise direction.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$analogous(var_args){\nvar G__39144 = arguments.length;\nswitch (G__39144) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous.cljs$core$IFn$_invoke$arity$1 = (function (color){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous.cljs$core$IFn$_invoke$arity$2(color,true);\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous.cljs$core$IFn$_invoke$arity$2 = (function (color,clockwise_QMARK_){\nvar sign = (cljs.core.truth_(clockwise_QMARK_)?cljs.core._PLUS_:cljs.core._);\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic(color,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(0),(sign.cljs$core$IFn$_invoke$arity$1 ? sign.cljs$core$IFn$_invoke$arity$1((30)) : sign.call(null,(30))),(sign.cljs$core$IFn$_invoke$arity$1 ? sign.cljs$core$IFn$_invoke$arity$1((60)) : sign.call(null,(60)))], 0));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a color return a triple of colors which are equidistance apart\n *   on the color wheel.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.triad = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$triad(color){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic(color,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(0),(120),(240)], 0));\n});\n/**\n * Given a color return a triple of the color and the two colors on\n *   either side of it's complement.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$split_complement(var_args){\nvar G__39146 = arguments.length;\nswitch (G__39146) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement.cljs$core$IFn$_invoke$arity$1 = (function (color){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement.cljs$core$IFn$_invoke$arity$2(color,(130));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement.cljs$core$IFn$_invoke$arity$2 = (function (color,distance_from_complement){\nvar d = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.clip((1),(179),distance_from_complement);\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic(color,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(0),d,(- d)], 0));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a color return a quadruple of four colors which are\n *   equidistance on the color wheel (ie. a pair of complements). An\n *   optional angle may be given for color of the second complement in the\n *   pair (this defaults to 90 when only color is passed).\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$tetrad(var_args){\nvar G__39148 = arguments.length;\nswitch (G__39148) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad.cljs$core$IFn$_invoke$arity$1 = (function (color){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad.cljs$core$IFn$_invoke$arity$2(color,(90));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad.cljs$core$IFn$_invoke$arity$2 = (function (color,angle){\nvar a = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.clip((1),(90),(function (){var G__39149 = new cljs.core.Keyword(null,\"magnitude\",\"magnitude\",1924274222).cljs$core$IFn$_invoke$arity$2(angle,angle);\nreturn Math.abs(G__39149);\n})());\nvar color_2 = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rotate_hue(color,a);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rotate_hue(color,(0)),day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.complement(color),color_2,day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.complement(color_2)], null);\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a color return a list of shades from lightest to darkest by\n *   a step. By default the step is 10. White and black are excluded from\n *   the returned list.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$shades(var_args){\nvar G__39151 = arguments.length;\nswitch (G__39151) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades.cljs$core$IFn$_invoke$arity$1 = (function (color){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades.cljs$core$IFn$_invoke$arity$2(color,(10));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades.cljs$core$IFn$_invoke$arity$2 = (function (color,step){\nvar c = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hsl(color);\nvar iter__4523__auto__ = ((function (c){\nreturn (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$iter__39152(s__39153){\nreturn (new cljs.core.LazySeq(null,((function (c){\nreturn (function (){\nvar s__39153__$1 = s__39153;\nwhile(true){\nvar temp__5735__auto__ = cljs.core.seq(s__39153__$1);\nif(temp__5735__auto__){\nvar s__39153__$2 = temp__5735__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__39153__$2)){\nvar c__4521__auto__ = cljs.core.chunk_first(s__39153__$2);\nvar size__4522__auto__ = cljs.core.count(c__4521__auto__);\nvar b__39155 = cljs.core.chunk_buffer(size__4522__auto__);\nif((function (){var i__39154 = (0);\nwhile(true){\nif((i__39154 < size__4522__auto__)){\nvar i = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4521__auto__,i__39154);\ncljs.core.chunk_append(b__39155,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(c,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),(i * step)));\n\nvar G__39202 = (i__39154 + (1));\ni__39154 = G__39202;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__39155),day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$iter__39152(cljs.core.chunk_rest(s__39153__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__39155),null);\n}\n} else {\nvar i = cljs.core.first(s__39153__$2);\nreturn cljs.core.cons(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(c,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),(i * step)),day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$iter__39152(cljs.core.rest(s__39153__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(c))\n,null,null));\n});})(c))\n;\nreturn iter__4523__auto__(cljs.core.range.cljs$core$IFn$_invoke$arity$2((1),(function (){var G__39156 = (100.0 / step);\nreturn Math.floor(G__39156);\n})()));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades.cljs$lang$maxFixedArity = 2;\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_hex = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"aquamarine\",\"aquamarine\",263648544),new cljs.core.Keyword(null,\"lime\",\"lime\",-1796425088),new cljs.core.Keyword(null,\"deepskyblue\",\"deepskyblue\",-1691758944),new cljs.core.Keyword(null,\"darksalmon\",\"darksalmon\",-896495551),new cljs.core.Keyword(null,\"antiquewhite\",\"antiquewhite\",-1702201183),new cljs.core.Keyword(null,\"mediumturquoise\",\"mediumturquoise\",2112212449),new cljs.core.Keyword(null,\"slategrey\",\"slategrey\",-1531406687),new cljs.core.Keyword(null,\"slategray\",\"slategray\",-178672671),new cljs.core.Keyword(null,\"sienna\",\"sienna\",-1559699358),new cljs.core.Keyword(null,\"orange\",\"orange\",73816386),new cljs.core.Keyword(null,\"navajowhite\",\"navajowhite\",1463125346),new cljs.core.Keyword(null,\"lavenderblush\",\"lavenderblush\",667482818),new cljs.core.Keyword(null,\"firebrick\",\"firebrick\",-214380606),new cljs.core.Keyword(null,\"orangered\",\"orangered\",-1851964317),new cljs.core.Keyword(null,\"palevioletred\",\"palevioletred\",-1198100061),new cljs.core.Keyword(null,\"lawngreen\",\"lawngreen\",672111043),new cljs.core.Keyword(null,\"seashell\",\"seashell\",1208259012),new cljs.core.Keyword(null,\"lightpink\",\"lightpink\",808485476),new cljs.core.Keyword(null,\"darkolivegreen\",\"darkolivegreen\",-2098617596),new cljs.core.Keyword(null,\"aliceblue\",\"aliceblue\",-1185534108),new cljs.core.Keyword(null,\"gray\",\"gray\",1013268388),new cljs.core.Keyword(null,\"lightsteelblue\",\"lightsteelblue\",-209586236),new cljs.core.Keyword(null,\"whitesmoke\",\"whitesmoke\",1847137252),new cljs.core.Keyword(null,\"darkgoldenrod\",\"darkgoldenrod\",-1115778811),new cljs.core.Keyword(null,\"tan\",\"tan\",1273609893),new cljs.core.Keyword(null,\"bisque\",\"bisque\",-862836634),new cljs.core.Keyword(null,\"white\",\"white\",-483998618),new cljs.core.Keyword(null,\"lightgreen\",\"lightgreen\",-1542529498),new cljs.core.Keyword(null,\"darkseagreen\",\"darkseagreen\",410063911),new cljs.core.Keyword(null,\"crimson\",\"crimson\",-1192060857),new cljs.core.Keyword(null,\"darkslategray\",\"darkslategray\",348576839),new cljs.core.Keyword(null,\"mistyrose\",\"mistyrose\",-619815737),new cljs.core.Keyword(null,\"chocolate\",\"chocolate\",772404615),new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),new cljs.core.Keyword(null,\"cadetblue\",\"cadetblue\",1126335112),new cljs.core.Keyword(null,\"navy\",\"navy\",1626342120),new cljs.core.Keyword(null,\"ghostwhite\",\"ghostwhite\",-1030428888),new cljs.core.Keyword(null,\"dimgrey\",\"dimgrey\",265814984),new cljs.core.Keyword(null,\"seagreen\",\"seagreen\",1345424905),new cljs.core.Keyword(null,\"green\",\"green\",-945526839),new cljs.core.Keyword(null,\"mediumseagreen\",\"mediumseagreen\",2130779146),new cljs.core.Keyword(null,\"indigo\",\"indigo\",-280252374),new cljs.core.Keyword(null,\"olivedrab\",\"olivedrab\",477000042),new cljs.core.Keyword(null,\"cyan\",\"cyan\",1118839274),new cljs.core.Keyword(null,\"peachpuff\",\"peachpuff\",-1932127734),new cljs.core.Keyword(null,\"limegreen\",\"limegreen\",-121735638),new cljs.core.Keyword(null,\"mediumslateblue\",\"mediumslateblue\",-900241526),new cljs.core.Keyword(null,\"violet\",\"violet\",-1351470549),new cljs.core.Keyword(null,\"sandybrown\",\"sandybrown\",-417646484),new cljs.core.Keyword(null,\"yellowgreen\",\"yellowgreen\",844595052),new cljs.core.Keyword(null,\"mediumspringgreen\",\"mediumspringgreen\",-257604339),new cljs.core.Keyword(null,\"steelblue\",\"steelblue\",1620562381),new cljs.core.Keyword(null,\"rosybrown\",\"rosybrown\",1634897517),new cljs.core.Keyword(null,\"cornflowerblue\",\"cornflowerblue\",-1713148307),new cljs.core.Keyword(null,\"ivory\",\"ivory\",-1259182451),new cljs.core.Keyword(null,\"lightgoldenrodyellow\",\"lightgoldenrodyellow\",1849392877),new cljs.core.Keyword(null,\"salmon\",\"salmon\",-1093653298),new cljs.core.Keyword(null,\"darkcyan\",\"darkcyan\",-1999655442),new cljs.core.Keyword(null,\"peru\",\"peru\",1147074382),new cljs.core.Keyword(null,\"cornsilk\",\"cornsilk\",-1628976146),new cljs.core.Keyword(null,\"lightslategray\",\"lightslategray\",-1109503825),new cljs.core.Keyword(null,\"blueviolet\",\"blueviolet\",887936463),new cljs.core.Keyword(null,\"forestgreen\",\"forestgreen\",1609185807),new cljs.core.Keyword(null,\"lightseagreen\",\"lightseagreen\",-1503692817),new cljs.core.Keyword(null,\"gold\",\"gold\",-806826416),new cljs.core.Keyword(null,\"gainsboro\",\"gainsboro\",-218568880),new cljs.core.Keyword(null,\"darkorchid\",\"darkorchid\",-1255783536),new cljs.core.Keyword(null,\"burlywood\",\"burlywood\",1747294160),new cljs.core.Keyword(null,\"lightskyblue\",\"lightskyblue\",397352944),new cljs.core.Keyword(null,\"chartreuse\",\"chartreuse\",-1626529775),new cljs.core.Keyword(null,\"snow\",\"snow\",1266930033),new cljs.core.Keyword(null,\"moccasin\",\"moccasin\",885646097),new cljs.core.Keyword(null,\"honeydew\",\"honeydew\",297211825),new cljs.core.Keyword(null,\"aqua\",\"aqua\",745022417),new cljs.core.Keyword(null,\"darkred\",\"darkred\",1564487633),new cljs.core.Keyword(null,\"mediumorchid\",\"mediumorchid\",114416082),new cljs.core.Keyword(null,\"lightsalmon\",\"lightsalmon\",278000114),new cljs.core.Keyword(null,\"saddlebrown\",\"saddlebrown\",-1556765006),new cljs.core.Keyword(null,\"wheat\",\"wheat\",783520466),new cljs.core.Keyword(null,\"springgreen\",\"springgreen\",-1241565454),new cljs.core.Keyword(null,\"lightslategrey\",\"lightslategrey\",1806136178),new cljs.core.Keyword(null,\"darkblue\",\"darkblue\",511597490),new cljs.core.Keyword(null,\"powderblue\",\"powderblue\",65928114),new cljs.core.Keyword(null,\"turquoise\",\"turquoise\",876845491),new cljs.core.Keyword(null,\"blanchedalmond\",\"blanchedalmond\",-1397674477),new cljs.core.Keyword(null,\"papayawhip\",\"papayawhip\",-330388621),new cljs.core.Keyword(null,\"slateblue\",\"slateblue\",79472627),new cljs.core.Keyword(null,\"lightblue\",\"lightblue\",-1333083084),new cljs.core.Keyword(null,\"skyblue\",\"skyblue\",-2076132812),new cljs.core.Keyword(null,\"red\",\"red\",-969428204),new cljs.core.Keyword(null,\"lightyellow\",\"lightyellow\",1576303380),new cljs.core.Keyword(null,\"blue\",\"blue\",-622100620),new cljs.core.Keyword(null,\"palegreen\",\"palegreen\",1360601109),new cljs.core.Keyword(null,\"greenyellow\",\"greenyellow\",1380924629),new cljs.core.Keyword(null,\"khaki\",\"khaki\",-1417823979),new cljs.core.Keyword(null,\"maroon\",\"maroon\",-952210123),new cljs.core.Keyword(null,\"darkgrey\",\"darkgrey\",-860992715),new cljs.core.Keyword(null,\"midnightblue\",\"midnightblue\",688164725),new cljs.core.Keyword(null,\"floralwhite\",\"floralwhite\",1656937461),new cljs.core.Keyword(null,\"deeppink\",\"deeppink\",1577828374),new cljs.core.Keyword(null,\"paleturquoise\",\"paleturquoise\",1255621750),new cljs.core.Keyword(null,\"darkkhaki\",\"darkkhaki\",1599585526),new cljs.core.Keyword(null,\"azure\",\"azure\",1864287702),new cljs.core.Keyword(null,\"indianred\",\"indianred\",-1829312906),new cljs.core.Keyword(null,\"darkviolet\",\"darkviolet\",552615766),new cljs.core.Keyword(null,\"mediumpurple\",\"mediumpurple\",-1891751018),new cljs.core.Keyword(null,\"fuchsia\",\"fuchsia\",990719926),new cljs.core.Keyword(null,\"coral\",\"coral\",1082484055),new cljs.core.Keyword(null,\"mediumvioletred\",\"mediumvioletred\",-1767902505),new cljs.core.Keyword(null,\"lemonchiffon\",\"lemonchiffon\",1115945815),new cljs.core.Keyword(null,\"mediumblue\",\"mediumblue\",-1579936616),new cljs.core.Keyword(null,\"darkmagenta\",\"darkmagenta\",-1534491240),new cljs.core.Keyword(null,\"goldenrod\",\"goldenrod\",2000666104),new cljs.core.Keyword(null,\"darkorange\",\"darkorange\",1453996632),new cljs.core.Keyword(null,\"orchid\",\"orchid\",-1953715528),new cljs.core.Keyword(null,\"plum\",\"plum\",2022177528),new cljs.core.Keyword(null,\"pink\",\"pink\",393815864),new cljs.core.Keyword(null,\"teal\",\"teal\",1231496088),new cljs.core.Keyword(null,\"magenta\",\"magenta\",1687937081),new cljs.core.Keyword(null,\"lightgrey\",\"lightgrey\",-729897351),new cljs.core.Keyword(null,\"purple\",\"purple\",-876021126),new cljs.core.Keyword(null,\"dodgerblue\",\"dodgerblue\",-1678389350),new cljs.core.Keyword(null,\"darkturquoise\",\"darkturquoise\",-80977765),new cljs.core.Keyword(null,\"mintcream\",\"mintcream\",1437895067),new cljs.core.Keyword(null,\"hotpink\",\"hotpink\",1103829723),new cljs.core.Keyword(null,\"thistle\",\"thistle\",1477120028),new cljs.core.Keyword(null,\"royalblue\",\"royalblue\",978912636),new cljs.core.Keyword(null,\"darkgreen\",\"darkgreen\",2002841276),new cljs.core.Keyword(null,\"darkslateblue\",\"darkslateblue\",807219996),new cljs.core.Keyword(null,\"silver\",\"silver\",1044501468),new cljs.core.Keyword(null,\"darkgray\",\"darkgray\",-1229776547),new cljs.core.Keyword(null,\"oldlace\",\"oldlace\",-966038915),new cljs.core.Keyword(null,\"mediumaquamarine\",\"mediumaquamarine\",1476241181),new cljs.core.Keyword(null,\"brown\",\"brown\",1414854429),new cljs.core.Keyword(null,\"lightgray\",\"lightgray\",-845833379),new cljs.core.Keyword(null,\"olive\",\"olive\",-2080542466),new cljs.core.Keyword(null,\"lightcoral\",\"lightcoral\",-988903010),new cljs.core.Keyword(null,\"tomato\",\"tomato\",1086708254),new cljs.core.Keyword(null,\"lightcyan\",\"lightcyan\",-481418530),new cljs.core.Keyword(null,\"linen\",\"linen\",-1305214018),new cljs.core.Keyword(null,\"darkslategrey\",\"darkslategrey\",-114797409),new cljs.core.Keyword(null,\"lavender\",\"lavender\",-1469567809),new cljs.core.Keyword(null,\"dimgray\",\"dimgray\",-412750241),new cljs.core.Keyword(null,\"palegoldenrod\",\"palegoldenrod\",-2067529985),new cljs.core.Keyword(null,\"beige\",\"beige\",836725695),new cljs.core.Keyword(null,\"black\",\"black\",1294279647)],[\"#7fffd4\",\"#00ff00\",\"#00bfff\",\"#e9967a\",\"#faebd7\",\"#48d1cc\",\"#708090\",\"#708090\",\"#a0522d\",\"#ffa500\",\"#ffdead\",\"#fff0f5\",\"#b22222\",\"#ff4500\",\"#db7093\",\"#7cfc00\",\"#fff5ee\",\"#ffb6c1\",\"#556b2f\",\"#f0f8ff\",\"#808080\",\"#b0c4de\",\"#f5f5f5\",\"#b8860b\",\"#d2b48c\",\"#ffe4c4\",\"#ffffff\",\"#90ee90\",\"#8fbc8f\",\"#dc143c\",\"#2f4f4f\",\"#ffe4e1\",\"#d2691e\",\"#ffff00\",\"#5f9ea0\",\"#000080\",\"#f8f8ff\",\"#696969\",\"#2e8b57\",\"#008000\",\"#3cb371\",\"#4b0082\",\"#6b8e23\",\"#00ffff\",\"#ffdab9\",\"#32cd32\",\"#7b68ee\",\"#ee82ee\",\"#f4a460\",\"#9acd32\",\"#00fa9a\",\"#4682b4\",\"#bc8f8f\",\"#6495ed\",\"#fffff0\",\"#fafad2\",\"#fa8072\",\"#008b8b\",\"#cd853f\",\"#fff8dc\",\"#778899\",\"#8a2be2\",\"#228b22\",\"#20b2aa\",\"#ffd700\",\"#dcdcdc\",\"#9932cc\",\"#deb887\",\"#87cefa\",\"#7fff00\",\"#fffafa\",\"#ffe4b5\",\"#f0fff0\",\"#00ffff\",\"#8b0000\",\"#ba55d3\",\"#ffa07a\",\"#8b4513\",\"#f5deb3\",\"#00ff7f\",\"#778899\",\"#00008b\",\"#b0e0e6\",\"#40e0d0\",\"#ffebcd\",\"#ffefd5\",\"#6a5acd\",\"#add8e6\",\"#87ceeb\",\"#ff0000\",\"#ffffe0\",\"#0000ff\",\"#98fb98\",\"#adff2f\",\"#f0e68c\",\"#800000\",\"#a9a9a9\",\"#191970\",\"#fffaf0\",\"#ff1493\",\"#afeeee\",\"#bdb76b\",\"#f0ffff\",\"#cd5c5c\",\"#9400d3\",\"#9370db\",\"#ff00ff\",\"#ff7f50\",\"#c71585\",\"#fffacd\",\"#0000cd\",\"#8b008b\",\"#daa520\",\"#ff8c00\",\"#da70d6\",\"#dda0dd\",\"#ffc0cb\",\"#008080\",\"#ff00ff\",\"#d3d3d3\",\"#800080\",\"#1e90ff\",\"#00ced1\",\"#f5fffa\",\"#ff69b4\",\"#d8bfd8\",\"#4169e1\",\"#006400\",\"#483d8b\",\"#c0c0c0\",\"#a9a9a9\",\"#fdf5e6\",\"#66cdaa\",\"#a52a2a\",\"#d3d3d3\",\"#808000\",\"#f08080\",\"#ff6347\",\"#e0ffff\",\"#faf0e6\",\"#2f4f4f\",\"#e6e6fa\",\"#696969\",\"#eee8aa\",\"#f5f5dc\",\"#000000\"]);\n/**\n * Helper function for from-name. Returns an instance of ExceptionInfo\n *   for unknown colors.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.ex_info_color_name = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$ex_info_color_name(n){\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Unknown color \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([n], 0)),\" see (:expected (ex-data e)) for a list of color names\"].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"given\",\"given\",716253602),n,new cljs.core.Keyword(null,\"expected\",\"expected\",1583670997),cljs.core.set(cljs.core.keys(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_hex))], null));\n});\n/**\n * Helper function for from-name.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_color = cljs.core.memoize((function (k){\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_hex.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_hex.cljs$core$IFn$_invoke$arity$1(k) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_hex.call(null,k));\n}));\n/**\n * Given a CSS color name n return an instance of CSSColor.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.from_name = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$from_name(n){\nvar temp__5733__auto__ = (function (){var G__39157 = cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(n);\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_color.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_color.cljs$core$IFn$_invoke$arity$1(G__39157) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.color_name__GT_color.call(null,G__39157));\n})();\nif(cljs.core.truth_(temp__5733__auto__)){\nvar h = temp__5733__auto__;\nreturn h;\n} else {\nthrow day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.ex_info_color_name(n);\n}\n});\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$scale_color_value(var_args){\nvar G__39159 = arguments.length;\nswitch (G__39159) {\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 4:\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value.cljs$core$IFn$_invoke$arity$2 = (function (value,amount){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value.cljs$core$IFn$_invoke$arity$4(value,amount,(0),(100));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value.cljs$core$IFn$_invoke$arity$4 = (function (value,amount,min_val,max_val){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.clip(min_val,max_val,(value * ((1) + (amount / (100)))));\n});\n\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value.cljs$lang$maxFixedArity = 4;\n\n/**\n * Scales the lightness of a color by amount, which is treated as a percentage.\n *   Supply positive values to scale upwards and negative values to scale downwards.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_lightness = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$scale_lightness(color,amount){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"lightness\",\"lightness\",-2040901930),day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value,amount);\n});\n/**\n * Scales the saturation of a color by amount, which is treated as a percentage.\n *   Supply positive values to scale upwards and negative values to scale downwards.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_saturation = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$scale_saturation(color,amount){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"saturation\",\"saturation\",-14247929),day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value,amount);\n});\n/**\n * Scales the alpha of a color by amount, which is treated as a percentage.\n *   Supply positive values to scale upwards and negative values to scale downwards.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_alpha = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$scale_alpha(color,amount){\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.update_hsla_field(color,new cljs.core.Keyword(null,\"alpha\",\"alpha\",-1574982441),(function (p1__39160_SHARP_,p2__39161_SHARP_){\nvar G__39162 = (p1__39160_SHARP_ * ((1) + (p2__39161_SHARP_ / (100))));\nreturn (day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.zero_to_one_clip.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.zero_to_one_clip.cljs$core$IFn$_invoke$arity$1(G__39162) : day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.zero_to_one_clip.call(null,G__39162));\n}),amount);\n});\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.decrown_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$decrown_hex(hex){\nreturn clojure.string.replace(hex,/^#/,\"\");\n});\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.crown_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$crown_hex(hex){\nif(cljs.core.truth_(cljs.core.re_find(/^#/,hex))){\nreturn hex;\n} else {\nreturn [\"#\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex)].join('');\n}\n});\n/**\n * (expand-hex \"#abc\") -> \"aabbcc\"\n * (expand-hex \"333333\") -> \"333333\"\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.expand_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$expand_hex(hex){\nvar _ = day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.decrown_hex(hex);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((3),cljs.core.count(_))){\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.vector,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([_,_], 0)));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.count(_))){\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$1(cljs.core.repeat.cljs$core$IFn$_invoke$arity$2((6),_));\n} else {\nreturn _;\n\n}\n}\n});\n/**\n * (hex->long \"#abc\") -> 11189196\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_long = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$hex__GT_long(hex){\nreturn parseInt(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.expand_hex(clojure.string.replace(hex,/^#/,\"\")),(16));\n});\n/**\n * (long->hex 11189196) -> \"aabbcc\"\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.long__GT_hex = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$long__GT_hex(long$){\nreturn long$.toString((16));\n});\n/**\n * `weight` is number 0 to 100 (%).\n * At 0, it weighs color-1 at 100%.\n * At 100, it weighs color-2 at 100%.\n * Returns hex string.\n */\nday8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.weighted_mix = (function day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$weighted_mix(color_1,color_2,weight){\nvar vec__39164 = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__39163_SHARP_){\nreturn (p1__39163_SHARP_ / (100));\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [((100) - weight),weight], null));\nvar weight_1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39164,(0),null);\nvar weight_2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39164,(1),null);\nvar vec__39167 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hex__GT_long,day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.as_hex),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [color_1,color_2], null));\nvar long_1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39167,(0),null);\nvar long_2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__39167,(1),null);\nreturn day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.crown_hex(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.expand_hex(day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.long__GT_hex(((long_1 * weight_1) + (long_2 * weight_2)))));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Utilities for color creation, conversion, and manipulation.","~:file","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","~:line",1,"~:column",33,"~:end-line",1,"~:end-column",90,"~:mranderson/inlined",true],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",["^ ","~$defcolor-operation","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color"],"~:excludes",["~#set",["~$complement"]],"~:macros",["^ "],"~:name","^J","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^T","~$string","^T","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util","^V","~$util","^V","~$cljs.core","^X","~$goog","^Y"],"~:seen",["^L",["~:require","~:require-macros"]],"~:uses",null,"^10",["^ ","^J","^J","^X","^X"],"~:form",["~#list",["~$ns","^J","Utilities for color creation, conversion, and manipulation.",["^13",["~:refer-clojure","~:exclude",["^M"]]],["^13",["^10",["^J","~:refer",["^I"]]]],["^13",["^[",["^T","~:as","^U"],["^V","^18","^W"]]]]],"~:flags",["^ ","^10",["^L",[]],"^[",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^Y","^X","^T","^V"]],"^Q","^J","~:resource-id",["~:shadow.build.classpath/resource","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc"],"~:compiled-at",1573425038005,"~:resource-name","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","~:warnings",[],"~:source","(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color\n  \"Utilities for color creation, conversion, and manipulation.\"\n  (:refer-clojure :exclude [complement])\n  #?(:cljs\n     (:require-macros\n      [day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color :refer [defcolor-operation]]))\n  (:require\n   [clojure.string :as string]\n   [day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util :as util])\n  #?(:clj\n     (:import clojure.lang.IFn)))\n\n;; Many of the functions in this namespace were ported or inspired by\n;; the implementations included with Sass\n;; (http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html).\n;; Some additional functions have been added such as `triad` and\n;; `tetrad` for generating sets of colors.\n\n;; Converts a color to a hexadecimal string (implementation below).\n(declare as-hex)\n\n(defrecord CSSColor [red green blue hue saturation lightness alpha]\n  IFn\n  #?(:clj\n      (invoke [this] this))\n  #?(:clj\n      (invoke [this k]\n              (get this k)))\n  #?(:clj\n      (invoke [this k missing]\n              (get this k missing)))\n  #?(:cljs\n      (-invoke [this] this))\n  #?(:cljs\n      (-invoke [this k]\n               (get this k)))\n  #?(:cljs\n      (-invoke [this k missing]\n               (get this k missing)))\n  #?(:clj\n      (applyTo [this args]\n               (clojure.lang.AFn/applyToHelper this args))))\n\n(def as-color map->CSSColor)\n\n(defn rgb\n  \"Create an RGB color.\"\n  ([[r g b :as vs]]\n     (if (every? #(util/between? % 0 255) vs)\n       (as-color {:red r :green g :blue b})\n       (throw\n        (ex-info \"RGB values must be between 0 and 255\" {}))))\n  ([r g b]\n     (rgb [r g b])))\n\n(defn rgba\n  \"Create an RGBA color.\"\n  ([[r g b a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (rgb [r g b]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([r g b a]\n     (rgba [r g b a])))\n\n(defn hsl\n  \"Create an HSL color.\"\n  ([[h s l]]\n     ;; Handle CSSUnits.\n     (let [[h s l] (map #(get % :magnitude %) [h s l])]\n       (if (and (util/between? s 0 100)\n                (util/between? l 0 100))\n         (as-color {:hue (mod h 360) :saturation s :lightness l})\n         (throw\n          (ex-info \"Saturation and lightness must be between 0(%) and 100(%)\" {})))))\n  ([h s l]\n     (hsl [h s l])))\n\n(defn hsla\n  \"Create an HSLA color.\"\n  ([[h s l a]]\n     (if (util/between? a 0 1)\n       (as-color (assoc (hsl [h s l]) :alpha a))\n       (throw\n        (ex-info \"Alpha value must be between 0 and 1\" {}))))\n  ([h s l a]\n     (hsla [h s l a])))\n\n(defn rgb?\n  \"Return true if color is an RGB color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:red :green :blue})))\n\n(defn hsl?\n  \"Return true if color is an HSL color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:hue :saturation :lightness})))\n\n(defn hsla?\n  \"Return true if color is an HSLA color.\"\n  [color]\n  (and (map? color)\n       (every? color #{:hue :saturation :lightness :alpha})))\n\n(defn color?\n  \"Return true if x is a color.\"\n  [x]\n  (or (rgb? x) (hsl? x)))\n\n(def ^{:doc \"Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \\\"#\\\". The color portion is captured.\"}\n  ;; Quantifier must be in this order or JavaScript engines will match\n  ;; 3 chars even when 6 are provided (failing re-matches).\n  hex-re #\"#?([\\da-fA-F]{6}|[\\da-fA-F]{3})\")\n\n(defn hex?\n  \"Returns true if x is a hexadecimal color.\"\n  [x]\n  (boolean (and (string? x) (re-matches hex-re x))))\n\n(defn hex->rgb\n  \"Convert a hexadecimal color to an RGB color map.\"\n  [s]\n  (when-let [[_ hex] (re-matches hex-re s)]\n    (let [hex (if (= 3 (count hex))\n                (apply str (mapcat #(list % %) hex))\n                hex)]\n      (->> (re-seq #\"[\\da-fA-F]{2}\" hex)\n           (map #(util/string->int % 16))\n           (rgb)))))\n\n(defn rgb->hex\n  \"Convert an RGB color map to a hexadecimal color.\"\n  [{r :red g :green b :blue}]\n  (letfn [(hex-part [v]\n            (-> (util/format \"%2s\" (util/int->string v 16))\n                (string/replace \" \" \"0\")))]\n    (apply str \"#\" (map hex-part [r g b]))))\n\n(defn trim-one [x]\n  (if (< 1 x) 1 x))\n\n(defn rgb->hsl\n  \"Convert an RGB color map to an HSL color map.\"\n  [{:keys [red green blue] :as color}]\n  (if (hsl? color)\n    color\n    (let [[r g b] (map #(/ % 255) [red green blue])\n          mx (max r g b)\n          mn (min r g b)\n          d (- mx mn)\n          h (condp = mx\n              mn 0\n              r (* 60 (/ (- g b) d))\n              g (+ (* 60 (/ (- b r) d)) 120)\n              b (+ (* 60 (/ (- r g) d)) 240))\n          l (trim-one (/ (+ mx mn) 2))\n          s (trim-one\n              (cond\n                (= mx mn) 0\n                (< l 0.5) (/ d (* 2 l))\n                :else (/ d (- 2 (* 2 l)))))]\n      (hsl (mod h 360) (* 100 s) (* 100 l)))))\n\n(declare hue->rgb)\n\n;; SEE: http://www.w3.org/TR/css3-color/#hsl-color.\n(defn hsl->rgb\n  \"Convert an HSL color map to an RGB color map.\"\n  [{:keys  [hue saturation lightness] :as color}]\n  (if (rgb? color)\n    color\n    (let [h (/ hue 360.0)\n          s (/ saturation 100.0)\n          l (/ lightness 100.0)\n          m2 (if (<= l 0.5)\n               (* l (inc s))\n               (- (+ l s) (* l s)))\n          m1 (- (* 2 l) m2)\n          [r g b] (map #(Math/round (* % 0xff))\n                       [(hue->rgb m1 m2 (+ h (/ 1.0 3)))\n                        (hue->rgb m1 m2 h)\n                        (hue->rgb m1 m2 (- h (/ 1.0 3)))])]\n      (rgb [r g b]))))\n\n(defn- hue->rgb\n  [m1 m2 h]\n  (let [h (cond\n           (< h 0) (inc h)\n           (> h 1) (dec h)\n           :else h)]\n    (cond\n     (< (* 6 h) 1) (+ m1 (* (- m2 m1) h 6))\n     (< (* 2 h) 1) m2\n     (< (* 3 h) 2) (+ m1 (* (- m2 m1) (- (/ 2.0 3) h) 6))\n     :else m1)))\n\n(defn hsl->hex\n  \"Convert an HSL color map to a hexadecimal string.\"\n  [color]\n  (-> color hsl->rgb rgb->hex))\n\n(defn hex->hsl\n  \"Convert a hexadecimal color to an HSL color.\"\n  [color]\n  (-> color hex->rgb rgb->hsl))\n\n(def percent-clip\n  (partial util/clip 0 100))\n\n(def ^{:arglists '([n])\n       :private true}\n  zero-to-one-clip\n  (partial util/clip 0.0 1.0))\n\n(def rgb-clip\n  (partial util/clip 0 255))\n\n(defn as-hex\n  \"Convert a color to a hexadecimal string.\"\n  [x]\n  (cond\n   (hex? x) x\n   (rgb? x) (rgb->hex x)\n   (hsl? x) (hsl->hex x)\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-rgb\n  \"Convert a color to a RGB.\"\n  [x]\n  (cond\n   (rgb? x) x\n   (hsl? x) (hsl->rgb x)\n   (hex? x) (hex->rgb x)\n   (number? x) (rgb (map rgb-clip [x x x]))\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-hsl\n  \"Convert a color to a HSL.\"\n  [x]\n  (cond\n   (hsl? x) x\n   (rgb? x) (rgb->hsl x)\n   (hex? x) (hex->hsl x)\n   (number? x) (hsl [x (percent-clip x) (percent-clip x)])\n   :else (throw (ex-info (str \"Can't convert \" x \" to a color.\") {}))))\n\n(defn as-hsla\n  \"Converts a color to HSLA. Assumes an alpha value of 1.00 unless one is\n  currently set on color.\"\n  [color]\n  (let [current-alpha (get color :alpha 1.00)]\n    (if (hsla? color)\n      color\n      (-> color as-hsl (assoc :alpha current-alpha)))))\n\n(defn- restrict-rgb\n  [m]\n  (select-keys m [:red :green :blue]))\n\n(defn- make-color-operation\n  [op]\n  (fn color-op\n    ([a] a)\n    ([a b]\n       (let [o (comp rgb-clip op)\n             a (restrict-rgb (as-rgb a))\n             b (restrict-rgb (as-rgb b))]\n         (as-color (merge-with o a b))))\n    ([a b & more]\n       (reduce color-op (color-op a b) more))))\n\n#?(:clj\n   (defmacro ^:private defcolor-operation [name operator]\n     `(def ~name (make-color-operation ~operator))))\n\n(defcolor-operation\n  ^{:doc \"Add the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color+ +)\n\n(defcolor-operation\n  ^{:doc \"Subtract the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color- -)\n\n(defcolor-operation\n  ^{:doc \"Multiply the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color* *)\n\n(defcolor-operation\n  ^{:doc \"Multiply the RGB components of two or more colors.\"\n    :arglists '([a] [a b] [a b & more])}\n  color-div /)\n\n(defn- update-hsla-field\n  [color field f v]\n  (let [v (:magnitude v v)]\n    (-> color as-hsla (update field f v))))\n\n(defn rotate-hue\n  \"Rotates the hue value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :hue (comp #(mod % 360) +) amount))\n\n(defn saturate\n  \"Increase the saturation value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :saturation (comp percent-clip +) amount))\n\n(defn desaturate\n  \"Decrease the saturation value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :saturation (comp percent-clip -) amount))\n\n(defn lighten\n  \"Increase the lightness value a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :lightness (comp percent-clip +) amount))\n\n(defn darken\n  \"Decrease the lightness value a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :lightness (comp percent-clip -) amount))\n\n(defn transparentize\n  \"Decreases the alpha value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :alpha (comp zero-to-one-clip -) amount))\n\n(defn opacify\n  \"Increases the alpha value of a given color by amount.\"\n  [color amount]\n  (update-hsla-field color :alpha (comp zero-to-one-clip +) amount))\n\n(defn invert\n  \"Return the inversion of a color.\"\n  [color]\n  (as-color (merge-with - {:red 255 :green 255 :blue 255} (as-rgb color))))\n\n(defn mix\n  \"Mix two or more colors by averaging their RGB channels.\"\n  ([color-1 color-2]\n     (let [c1 (restrict-rgb (as-rgb color-1))\n           c2 (restrict-rgb (as-rgb color-2))]\n       (as-color (merge-with util/average c1 c2))))\n  ([color-1 color-2 & more]\n     (reduce mix (mix color-1 color-2) more)))\n\n;;;; Color wheel functions.\n\n(defn complement\n  \"Return the complement of a color.\"\n  [color]\n  (rotate-hue color 180))\n\n(defn- hue-rotations\n  ([color & amounts]\n     (map (partial rotate-hue color) amounts)))\n\n(defn analogous\n  \"Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction.\"\n  ([color]\n     (analogous color true))\n  ([color clockwise?]\n     (let [sign (if clockwise? + -)]\n       (hue-rotations color 0 (sign 30) (sign 60)))))\n\n(defn triad\n  \"Given a color return a triple of colors which are equidistance apart\n  on the color wheel.\"\n  [color]\n  (hue-rotations color 0 120 240))\n\n(defn split-complement\n  \"Given a color return a triple of the color and the two colors on\n  either side of it's complement.\"\n  ([color]\n     (split-complement color 130))\n  ([color distance-from-complement]\n     (let [d (util/clip 1 179 distance-from-complement)]\n         (hue-rotations color 0 d (- d)))))\n\n(defn tetrad\n  \"Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed).\"\n  ([color]\n     (tetrad color 90))\n  ([color angle]\n     (let [a (util/clip 1 90 (Math/abs (:magnitude angle angle)))\n           color-2 (rotate-hue color a)]\n       [(rotate-hue color 0)\n        (complement color)\n        color-2\n        (complement color-2)])))\n\n(defn shades\n  \"Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list.\"\n  ([color]\n     (shades color 10))\n  ([color step]\n     (let [c (as-hsl color)]\n       (for [i (range 1 (Math/floor (/ 100.0 step)))]\n         (assoc c :lightness (* i step))))))\n\n;; ---------------------------------------------------------------------\n;; CSS color name conversion\n\n(def color-name->hex\n  {:aquamarine \"#7fffd4\"\n   :aliceblue \"#f0f8ff\"\n   :antiquewhite \"#faebd7\"\n   :aqua \"#00ffff\"\n   :azure \"#f0ffff\"\n   :beige \"#f5f5dc\"\n   :bisque \"#ffe4c4\"\n   :black \"#000000\"\n   :blanchedalmond \"#ffebcd\"\n   :blue \"#0000ff\"\n   :blueviolet \"#8a2be2\"\n   :brown \"#a52a2a\"\n   :burlywood \"#deb887\"\n   :cadetblue \"#5f9ea0\"\n   :chartreuse \"#7fff00\"\n   :chocolate \"#d2691e\"\n   :coral \"#ff7f50\"\n   :cornflowerblue \"#6495ed\"\n   :cornsilk \"#fff8dc\"\n   :crimson \"#dc143c\"\n   :cyan \"#00ffff\"\n   :darkblue \"#00008b\"\n   :darkcyan \"#008b8b\"\n   :darkgoldenrod \"#b8860b\"\n   :darkgray \"#a9a9a9\"\n   :darkgreen \"#006400\"\n   :darkgrey \"#a9a9a9\"\n   :darkkhaki \"#bdb76b\"\n   :darkmagenta \"#8b008b\"\n   :darkolivegreen \"#556b2f\"\n   :darkorange \"#ff8c00\"\n   :darkorchid \"#9932cc\"\n   :darkred \"#8b0000\"\n   :darksalmon \"#e9967a\"\n   :darkseagreen \"#8fbc8f\"\n   :darkslateblue \"#483d8b\"\n   :darkslategray \"#2f4f4f\"\n   :darkslategrey \"#2f4f4f\"\n   :darkturquoise \"#00ced1\"\n   :darkviolet \"#9400d3\"\n   :deeppink \"#ff1493\"\n   :deepskyblue \"#00bfff\"\n   :dimgray \"#696969\"\n   :dimgrey \"#696969\"\n   :dodgerblue \"#1e90ff\"\n   :firebrick \"#b22222\"\n   :floralwhite \"#fffaf0\"\n   :forestgreen \"#228b22\"\n   :fuchsia \"#ff00ff\"\n   :gainsboro \"#dcdcdc\"\n   :ghostwhite \"#f8f8ff\"\n   :gold \"#ffd700\"\n   :goldenrod \"#daa520\"\n   :gray \"#808080\"\n   :green \"#008000\"\n   :greenyellow \"#adff2f\"\n   :honeydew \"#f0fff0\"\n   :hotpink \"#ff69b4\"\n   :indianred \"#cd5c5c\"\n   :indigo \"#4b0082\"\n   :ivory \"#fffff0\"\n   :khaki \"#f0e68c\"\n   :lavender \"#e6e6fa\"\n   :lavenderblush \"#fff0f5\"\n   :lawngreen \"#7cfc00\"\n   :lemonchiffon \"#fffacd\"\n   :lightblue \"#add8e6\"\n   :lightcoral \"#f08080\"\n   :lightcyan \"#e0ffff\"\n   :lightgoldenrodyellow \"#fafad2\"\n   :lightgray \"#d3d3d3\"\n   :lightgreen \"#90ee90\"\n   :lightgrey \"#d3d3d3\"\n   :lightpink \"#ffb6c1\"\n   :lightsalmon \"#ffa07a\"\n   :lightseagreen \"#20b2aa\"\n   :lightskyblue \"#87cefa\"\n   :lightslategray \"#778899\"\n   :lightslategrey \"#778899\"\n   :lightsteelblue \"#b0c4de\"\n   :lightyellow \"#ffffe0\"\n   :lime \"#00ff00\"\n   :limegreen \"#32cd32\"\n   :linen \"#faf0e6\"\n   :magenta \"#ff00ff\"\n   :maroon \"#800000\"\n   :mediumaquamarine \"#66cdaa\"\n   :mediumblue \"#0000cd\"\n   :mediumorchid \"#ba55d3\"\n   :mediumpurple \"#9370db\"\n   :mediumseagreen \"#3cb371\"\n   :mediumslateblue \"#7b68ee\"\n   :mediumspringgreen \"#00fa9a\"\n   :mediumturquoise \"#48d1cc\"\n   :mediumvioletred \"#c71585\"\n   :midnightblue \"#191970\"\n   :mintcream \"#f5fffa\"\n   :mistyrose \"#ffe4e1\"\n   :moccasin \"#ffe4b5\"\n   :navajowhite \"#ffdead\"\n   :navy \"#000080\"\n   :oldlace \"#fdf5e6\"\n   :olive \"#808000\"\n   :olivedrab \"#6b8e23\"\n   :orange \"#ffa500\"\n   :orangered \"#ff4500\"\n   :orchid \"#da70d6\"\n   :palegoldenrod \"#eee8aa\"\n   :palegreen \"#98fb98\"\n   :paleturquoise \"#afeeee\"\n   :palevioletred \"#db7093\"\n   :papayawhip \"#ffefd5\"\n   :peachpuff \"#ffdab9\"\n   :peru \"#cd853f\"\n   :pink \"#ffc0cb\"\n   :plum \"#dda0dd\"\n   :powderblue \"#b0e0e6\"\n   :purple \"#800080\"\n   :red \"#ff0000\"\n   :rosybrown \"#bc8f8f\"\n   :royalblue \"#4169e1\"\n   :saddlebrown \"#8b4513\"\n   :salmon \"#fa8072\"\n   :sandybrown \"#f4a460\"\n   :seagreen \"#2e8b57\"\n   :seashell \"#fff5ee\"\n   :sienna \"#a0522d\"\n   :silver \"#c0c0c0\"\n   :skyblue \"#87ceeb\"\n   :slateblue \"#6a5acd\"\n   :slategray \"#708090\"\n   :slategrey \"#708090\"\n   :snow \"#fffafa\"\n   :springgreen \"#00ff7f\"\n   :steelblue \"#4682b4\"\n   :tan \"#d2b48c\"\n   :teal \"#008080\"\n   :thistle \"#d8bfd8\"\n   :tomato \"#ff6347\"\n   :turquoise \"#40e0d0\"\n   :violet \"#ee82ee\"\n   :wheat \"#f5deb3\"\n   :white \"#ffffff\"\n   :whitesmoke \"#f5f5f5\"\n   :yellow \"#ffff00\"\n   :yellowgreen \"#9acd32\"})\n\n(defn- ex-info-color-name\n  \"Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors.\"\n  [n]\n  (ex-info\n   (str \"Unknown color \" (pr-str n) \" see (:expected (ex-data e)) for a list of color names\")\n   {:given n\n    :expected (set (keys color-name->hex))}))\n\n(def\n  ^{:private true\n    :doc \"Helper function for from-name.\"}\n  color-name->color\n  (memoize (fn [k] (color-name->hex k))))\n\n(defn from-name\n  \"Given a CSS color name n return an instance of CSSColor.\"\n  [n]\n  (if-let [h (color-name->color (keyword n))]\n    h\n    (throw (ex-info-color-name n))))\n\n(defn- scale-color-value\n  ([value amount]\n    (scale-color-value value amount 0 100))\n  ([value amount min-val max-val]\n    (util/clip min-val max-val (* value (+ 1 (/ amount 100))))))\n\n\n(defn scale-lightness\n  \"Scales the lightness of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards.\"\n  [color amount]\n  (update-hsla-field color :lightness scale-color-value amount))\n\n(defn scale-saturation\n  \"Scales the saturation of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards.\"\n  [color amount]\n  (update-hsla-field color :saturation scale-color-value amount))\n\n(defn scale-alpha\n  \"Scales the alpha of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards.\"\n  [color amount]\n  (update-hsla-field color :alpha #(zero-to-one-clip (* %1 (+ 1 (/ %2 100)))) amount))\n\n(defn- decrown-hex [hex]\n  (string/replace hex #\"^#\" \"\"))\n\n(defn- crown-hex [hex]\n  (if (re-find #\"^#\" hex)\n    hex\n    (str \"#\" hex)))\n\n(defn- expand-hex\n  \"(expand-hex \\\"#abc\\\") -> \\\"aabbcc\\\"\n   (expand-hex \\\"333333\\\") -> \\\"333333\\\"\"\n  [hex]\n  (as-> (decrown-hex hex) _\n        (cond\n         (= 3 (count _)) (string/join (mapcat vector _ _))\n         (= 1 (count _)) (string/join (repeat 6 _))\n         :else _)))\n\n(defn- hex->long\n  \"(hex->long \\\"#abc\\\") -> 11189196\"\n  [hex]\n  (-> hex\n      (string/replace #\"^#\" \"\")\n      (expand-hex)\n      #?(:clj (Long/parseLong 16)\n         :cljs (js/parseInt 16))))\n\n(defn- long->hex\n  \"(long->hex 11189196) -> \\\"aabbcc\\\"\"\n  [long]\n  #?(:clj (Integer/toHexString long)\n     :cljs (.toString long 16)))\n\n(defn weighted-mix\n  \"`weight` is number 0 to 100 (%).\n   At 0, it weighs color-1 at 100%.\n   At 100, it weighs color-2 at 100%.\n   Returns hex string.\"\n  [color-1 color-2 weight]\n  (let [[weight-1 weight-2] (map #(/ % 100) [(- 100 weight) weight])\n        [long-1 long-2] (map (comp hex->long as-hex)\n                             [color-1 color-2])]\n    (-> (+ (* long-1 weight-1) (* long-2 weight-2))\n        (long->hex)\n        (expand-hex)\n        (crown-hex))))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["this__4385__auto__","k__4386__auto__","this__4387__auto__","k38792","else__4388__auto__","G__38809","cljs.core/Keyword","red","green","blue","hue","saturation","lightness","alpha","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__38815","vec__38816","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__38791","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__38859","coll__4382__auto__","cljs.core/hash-unordered-coll","this38793","other38794","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__38864","cljs.core/keyword-identical?","expr__38865","G__38867","G__38868","G__38869","G__38870","G__38871","G__38872","G__38873","G__38874","G__38875","G__38876","G__38877","G__38878","G__38879","G__38880","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","self__","args38801","cljs.core/aclone","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__38797","extmap__4424__auto__","G__38930","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/->CSSColor","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/map->CSSColor","this","k","cljs.core.get.cljs$core$IFn$_invoke$arity$2","missing","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-color","var_args","G__38944","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb","js/Error","p__38945","vec__38946","r","g","b","vs","p1__38942#","cljs.core/every?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/between?","G__38949","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgb.cljs$core$IFn$_invoke$arity$1","G__38952","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgba","p__38955","vec__38956","a","G__38959","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.rgba.cljs$core$IFn$_invoke$arity$1","G__38980","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl","p__38981","vec__38982","h","s","l","vec__38985","p1__38967#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","G__38997","cljs.core/mod","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$1","G__38999","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsla","p__39005","vec__39008","G__39014","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsla.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb?","color","cljs.core/map?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsla?","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color?","x","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex-re","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex?","cljs.core/boolean","and__4120__auto__","cljs.core/re-matches","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex->rgb","temp__5735__auto__","vec__39051","_","hex","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","p1__39049#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/re-seq","p1__39050#","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.string__GT_int.cljs$core$IFn$_invoke$arity$variadic","p__39059","map__39061","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb->hex","v","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.format.cljs$core$IFn$_invoke$arity$variadic","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.util.int__GT_string.cljs$core$IFn$_invoke$arity$variadic","clojure.string/replace","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","hex-part","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/trim-one","p__39069","map__39070","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb->hsl","vec__39080","p1__39066#","mx","x__4219__auto__","y__4220__auto__","mn","x__4222__auto__","y__4223__auto__","d","pred__39094","expr__39095","cljs.core/=","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hsl.cljs$core$IFn$_invoke$arity$3","p__39098","map__39099","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl->rgb","vec__39101","m2","m1","p1__39097#","G__39108","Math/round","G__39109","G__39110","G__39111","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hue->rgb","G__39112","G__39113","G__39114","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl->hex","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex->hsl","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/percent-clip","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/clip","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/zero-to-one-clip","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb-clip","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-hex","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-rgb","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-hsl","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-hsla","current-alpha","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/restrict-rgb","m","cljs.core/select-keys","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/make-color-operation","op","o","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","G__39120","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","more","color-op","day8$re_frame_10x$inlined_deps$garden$v1v3v9$garden$color$make_color_operation_$_color_op.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color+","cljs.core/+","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-","cljs.core/-","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color*","cljs.core/*","cljs.core//","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-div","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/update-hsla-field","field","f","cljs.core.update.cljs$core$IFn$_invoke$arity$4","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rotate-hue","amount","p1__39123#","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/saturate","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/desaturate","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/lighten","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/darken","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/transparentize","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/opacify","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/invert","G__39129","G__39134","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/mix","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq39131","G__39132","cljs.core/first","cljs.core/next","G__39133","self__4717__auto__","color-1","color-2","c1","c2","G__39135","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.util/average","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.mix.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/complement","args__4736__auto__","argseq__4737__auto__","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hue-rotations","seq39141","G__39142","amounts","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","G__39144","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/analogous","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.analogous.cljs$core$IFn$_invoke$arity$2","clockwise?","sign","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.hue_rotations.cljs$core$IFn$_invoke$arity$variadic","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/triad","G__39146","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/split-complement","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.split_complement.cljs$core$IFn$_invoke$arity$2","distance-from-complement","G__39148","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/tetrad","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.tetrad.cljs$core$IFn$_invoke$arity$2","angle","G__39149","Math/abs","G__39151","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/shades","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.shades.cljs$core$IFn$_invoke$arity$2","step","c","iter__4523__auto__","s__39153","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__39155","cljs.core/chunk-buffer","i__39154","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__39152","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","i","cljs.core.range.cljs$core$IFn$_invoke$arity$2","G__39156","Math/floor","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-name->hex","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/ex-info-color-name","n","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/set","cljs.core/keys","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-name->color","cljs.core/memoize","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/from-name","temp__5733__auto__","G__39157","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","G__39159","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-color-value","value","day8.re_frame_10x.inlined_deps.garden.v1v3v9.garden.color.scale_color_value.cljs$core$IFn$_invoke$arity$4","min-val","max-val","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-lightness","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-saturation","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-alpha","p1__39160#","p2__39161#","G__39162","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/decrown-hex","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/crown-hex","cljs.core/re-find","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/expand-hex","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core/vector","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex->long","js/parseInt","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/long->hex","long","day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/weighted-mix","weight","vec__39164","vec__39167","weight-1","weight-2","p1__39163#","long-1","long-2","cljs.core/chunk-first"]]],"~:cache-keys",["~#cmap",[["^1=","goog/math/math.js"],[1559507890775,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^Y","~$goog.array","~$goog.asserts"]]],["^1=","goog/string/stringformat.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","~$goog.string"]]],["^1=","goog/array/array.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","^1O"]]],["^1=","goog/debug/error.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y"]]],["^1=","goog/dom/nodetype.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y"]]],["^1=","goog/object/object.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y"]]],"~:SHADOW-TIMESTAMP",[1570928878000,1556316222000],["^1=","goog/math/long.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","^1O","~$goog.reflect"]]],["^1=","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc"],[1573417072187,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","^X","^T","^V"]]],["^1=","goog/string/internal.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y"]]],["^1=","goog/functions/functions.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y"]]],["^1=","goog/structs/map.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1=","goog/asserts/asserts.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1=","goog/uri/uri.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","^1N","^1O","^1P","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","goog/base.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",[]]],["^1=","goog/structs/structs.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","^1N","~$goog.object"]]],["^1=","clojure/string.cljs"],[1556316222100,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","^X","^1P","~$goog.string.StringBuffer"]]],["^1=","goog/string/string.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","~$goog.string.internal"]]],["^1=","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/types.cljc"],[1573417072187,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","^X"]]],["^1=","goog/reflect/reflect.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y"]]],["^1=","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/util.cljc"],[1573417072187,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","^X","^T","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.types","^1P","~$goog.string.format"]]],["^1=","goog/string/stringbuffer.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y"]]],["^1=","goog/iter/iter.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","^1N","^1O","~$goog.functions","~$goog.math"]]],["^1=","cljs/core.cljs"],[1556316222100,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["~$goog.math.Long","~$goog.math.Integer","^1P","^20","^1N","~$goog.Uri","^21"]]],["^1=","goog/math/integer.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y"]]],["^1=","goog/uri/utils.js"],[1559507890775,"^1J",["^ ","^1K",null,"^1L",["^L",[]],"^1M",["^Y","^1N","^1O","^1P"]]]]],"~:clj-info",["^ ","jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/day8/re-frame/re-frame-10x/0.4.5/re-frame-10x-0.4.5.jar!/day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/util.cljc",1573417072000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/day8/re-frame/re-frame-10x/0.4.5/re-frame-10x-0.4.5.jar!/day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/types.cljc",1573417072000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/day8/re-frame/re-frame-10x/0.4.5/re-frame-10x-0.4.5.jar!/day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc",1573417072000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1556312825000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1556316222000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Utilities for color creation, conversion, and manipulation.","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",1,"^9",33,"^:",1,"^;",90,"^<",true],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",["^ ","^I","^J"],"^K",["^L",["^M"]],"^N",["^ "],"^O","^J","^R",null,"^S",["^ ","^T","^T","^U","^T","^V","^V","^W","^V","^X","^X","^Y","^Y"],"^Z",["^L",["^[","^10"]],"~:shadow/js-access-global",["^L",["Error","parseInt"]],"^11",null,"~:defs",["^ ","~$color+",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",283,"^9",3,"^:",283,"^;",9,"^6","Add the RGB components of two or more colors.","~:arglists",["^13",["~$quote",["^13",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","~$more"]]]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color+","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",9,"^9",1,"^8",280,"^:",283,"~:tag","~$function","^2Z",["^13",["^2[",["^13",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^30"]]]]],"^6","Add the RGB components of two or more colors."],"~$as-hsla",["^ ","~:protocol-inline",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",251,"^9",7,"^:",251,"^;",14,"^2Z",["^13",["^2[",["^13",[["~$color"]]]]],"^6","Converts a color to HSLA. Assumes an alpha value of 1.00 unless one is\n  currently set on color."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-hsla","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",14,"~:method-params",["^13",[["^36"]]],"~:protocol-impl",null,"~:arglists-meta",["^13",[null,null]],"^9",1,"~:variadic?",false,"^8",251,"~:ret-tag",["^L",[null,"~$clj","~$any"]],"^:",251,"~:max-fixed-arity",1,"~:fn-var",true,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Converts a color to HSLA. Assumes an alpha value of 1.00 unless one is\n  currently set on color."],"~$opacify",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",335,"^9",7,"^:",335,"^;",14,"^2Z",["^13",["^2[",["^13",[["^36","~$amount"]]]]],"^6","Increases the alpha value of a given color by amount."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/opacify","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",14,"^38",["^13",[["^36","^3B"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",335,"^3<",["^L",["^3=","^3>"]],"^:",335,"^3?",2,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Increases the alpha value of a given color by amount."],"~$mix",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",345,"^9",7,"^:",345,"^;",10,"^2Z",["^13",["^2[",["^13",[["~$color-1","~$color-2"],["^3E","^3F","~$&","^30"]]]]],"^6","Mix two or more colors by averaging their RGB channels.","~:top-fn",["^ ","^3;",true,"~:fixed-arity",2,"^3?",2,"^38",["^13",[["^3E","^3F"]]],"^2Z",["^13",[["^3E","^3F"],["^3E","^3F","~$&","^30"]]],"^3:",["^13",[null,null]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/mix","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",10,"^3G",["^ ","^3;",true,"^3H",2,"^3?",2,"^38",["^13",[["^3E","^3F"]]],"^2Z",["^13",[["^3E","^3F"],["^3E","^3F","~$&","^30"]]],"^3:",["^13",[null,null]]],"^38",["^13",[["^3E","^3F"]]],"^39",null,"^3H",2,"^3:",["^13",[null,null]],"^9",1,"^3;",true,"~:methods",[["^ ","^3H",2,"^3;",false,"^32","^3>"],["^ ","^3H",2,"^3;",true,"^32",["^L",[null,"^3>"]]]],"^8",345,"^:",345,"^3?",2,"^3@",true,"^2Z",["^13",[["^3E","^3F"],["^3E","^3F","~$&","^30"]]],"^6","Mix two or more colors by averaging their RGB channels."],"~$hsla?",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",101,"^9",7,"^:",101,"^;",12,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Return true if color is an HSLA color."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsla?","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",12,"^38",["^13",[["^36"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",101,"^3<","~$boolean","^:",101,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Return true if color is an HSLA color."],"~$color-name->color",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",579,"^9",3,"^:",579,"^;",20,"~:private",true,"^6","Helper function for from-name."],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-name->color","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"^9",1,"^8",576,"^:",579,"^32","^33","^6","Helper function for from-name."],"~$expand-hex",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",622,"^9",8,"^:",622,"^;",18,"^3O",true,"^2Z",["^13",["^2[",["^13",[["~$hex"]]]]],"^6","(expand-hex \"#abc\") -> \"aabbcc\"\n   (expand-hex \"333333\") -> \"333333\""],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/expand-hex","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",18,"^38",["^13",[["^3R"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",622,"^3<","^3>","^:",622,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^3R"]]]]],"^6","(expand-hex \"#abc\") -> \"aabbcc\"\n   (expand-hex \"333333\") -> \"333333\""],"~$invert",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",340,"^9",7,"^:",340,"^;",13,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Return the inversion of a color."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/invert","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^38",["^13",[["^36"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",340,"^3<","^3>","^:",340,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Return the inversion of a color."],"~$rotate-hue",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",305,"^9",7,"^:",305,"^;",17,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Rotates the hue value of a given color by amount."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rotate-hue","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",17,"^38",["^13",[["^36","^3B"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",305,"^3<",["^L",["^3=","^3>"]],"^:",305,"^3?",2,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Rotates the hue value of a given color by amount."],"~$color*",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",293,"^9",3,"^:",293,"^;",9,"^6","Multiply the RGB components of two or more colors.","^2Z",["^13",["^2[",["^13",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^30"]]]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color*","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",9,"^9",1,"^8",290,"^:",293,"^32","^33","^2Z",["^13",["^2[",["^13",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^30"]]]]],"^6","Multiply the RGB components of two or more colors."],"~$hsl->hex",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",201,"^9",7,"^:",201,"^;",15,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Convert an HSL color map to a hexadecimal string."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl->hex","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^38",["^13",[["^36"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",201,"^3<","^3>","^:",201,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Convert an HSL color map to a hexadecimal string."],"~$rgb->hex",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",135,"^9",7,"^:",135,"^;",15,"^2Z",["^13",["^2[",["^13",[[["^ ","~$r","~:red","~$g","~:green","~$b","~:blue"]]]]]],"^6","Convert an RGB color map to a hexadecimal color."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb->hex","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^38",["^13",[["~$p__39059"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",135,"^:",135,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[[["^ ","~$r","^41","~$g","^42","~$b","^43"]]]]]],"^6","Convert an RGB color map to a hexadecimal color."],"~$as-hex",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",222,"^9",7,"^:",222,"^;",13,"^2Z",["^13",["^2[",["^13",[["~$x"]]]]],"^6","Convert a color to a hexadecimal string."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-hex","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^38",["^13",[["~$x"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",222,"^3<",["^L",[null,"^3>"]],"^:",222,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["~$x"]]]]],"^6","Convert a color to a hexadecimal string."],"~$analogous",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",365,"^9",7,"^:",365,"^;",16,"^2Z",["^13",["^2[",["^13",[["^36"],["^36","~$clockwise?"]]]]],"^6","Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction.","^3G",["^ ","^3;",false,"^3H",2,"^3?",2,"^38",["^13",[["^36"],["^36","^49"]]],"^2Z",["^13",[["^36"],["^36","^49"]]],"^3:",["^13",[null,null]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/analogous","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",16,"^3G",["^ ","^3;",false,"^3H",2,"^3?",2,"^38",["^13",[["^36"],["^36","^49"]]],"^2Z",["^13",[["^36"],["^36","^49"]]],"^3:",["^13",[null,null]]],"^38",["^13",[["^36"],["^36","^49"]]],"^39",null,"^3H",2,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^3J",[["^ ","^3H",1,"^3;",false,"^32","^3>"],["^ ","^3H",2,"^3;",false,"^32","~$cljs.core/LazySeq"]],"^8",365,"^:",365,"^3?",2,"^3@",true,"^2Z",["^13",[["^36"],["^36","^49"]]],"^6","Given a color return a triple of colors which are 0, 30, and 60\n  degrees clockwise from it. If a second falsy argument is passed the\n  returned values will be in a counter-clockwise direction."],"~$long->hex",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",641,"^9",8,"^:",641,"^;",17,"^3O",true,"^2Z",["^13",["^2[",["^13",[["~$long"]]]]],"^6","(long->hex 11189196) -> \"aabbcc\""],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/long->hex","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",17,"^38",["^13",[["^4="]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",641,"^3<","^3>","^:",641,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^4="]]]]],"^6","(long->hex 11189196) -> \"aabbcc\""],"~$rgba",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",56,"^9",7,"^:",56,"^;",11,"^2Z",["^13",["^2[",["^13",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]]]],"^6","Create an RGBA color.","^3G",["^ ","^3;",false,"^3H",4,"^3?",4,"^38",["^13",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^2Z",["^13",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^3:",["^13",[null,null]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgba","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",11,"^3G",["^ ","^3;",false,"^3H",4,"^3?",4,"^38",["^13",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^2Z",["^13",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^3:",["^13",[null,null]]],"^38",["^13",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^39",null,"^3H",4,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^3J",[["^ ","^3H",1,"^3;",false,"^32","^3>"],["^ ","^3H",4,"^3;",false,"^32","^3>"]],"^8",56,"^:",56,"^3?",4,"^3@",true,"^2Z",["^13",[[["~$r","~$g","~$b","~$a"]],["~$r","~$g","~$b","~$a"]]],"^6","Create an RGBA color."],"~$color-name->hex",["^ ","^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-name->hex","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",419,"^9",1,"^:",419,"^;",21,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",419,"^9",6,"^:",419,"^;",21],"^32","~$cljs.core/IMap"],"~$hex->long",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",632,"^9",8,"^:",632,"^;",17,"^3O",true,"^2Z",["^13",["^2[",["^13",[["^3R"]]]]],"^6","(hex->long \"#abc\") -> 11189196"],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex->long","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",17,"^38",["^13",[["^3R"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",632,"^3<","~$js","^:",632,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^3R"]]]]],"^6","(hex->long \"#abc\") -> 11189196"],"~$scale-lightness",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",596,"^9",7,"^:",596,"^;",22,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Scales the lightness of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-lightness","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",22,"^38",["^13",[["^36","^3B"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",596,"^3<",["^L",["^3=","^3>"]],"^:",596,"^3?",2,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Scales the lightness of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards."],"~$darken",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",325,"^9",7,"^:",325,"^;",13,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Decrease the lightness value a given color by amount."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/darken","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^38",["^13",[["^36","^3B"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",325,"^3<",["^L",["^3=","^3>"]],"^:",325,"^3?",2,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Decrease the lightness value a given color by amount."],"~$hue->rgb",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",189,"^9",8,"^:",189,"^;",16,"^3O",true,"^2Z",["^13",["^2[",["^13",[["~$m1","~$m2","~$h"]]]]]],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hue->rgb","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",16,"^38",["^13",[["^4L","^4M","~$h"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",189,"^3<",["^L",[null,"~$number"]],"^:",189,"^3?",3,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^4L","^4M","~$h"]]]]]],"~$hsl?",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",95,"^9",7,"^:",95,"^;",11,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Return true if color is an HSL color."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl?","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",11,"^38",["^13",[["^36"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",95,"^3<","^3M","^:",95,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Return true if color is an HSL color."],"~$hex->hsl",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",206,"^9",7,"^:",206,"^;",15,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Convert a hexadecimal color to an HSL color."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex->hsl","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^38",["^13",[["^36"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",206,"^3<",["^L",[null,"^3>"]],"^:",206,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Convert a hexadecimal color to an HSL color."],"~$as-rgb",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",231,"^9",7,"^:",231,"^;",13,"^2Z",["^13",["^2[",["^13",[["~$x"]]]]],"^6","Convert a color to a RGB."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-rgb","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^38",["^13",[["~$x"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",231,"^3<",["^L",[null,"^3>","~$clj-nil"]],"^:",231,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["~$x"]]]]],"^6","Convert a color to a RGB."],"~$from-name",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",582,"^9",7,"^:",582,"^;",16,"^2Z",["^13",["^2[",["^13",[["~$n"]]]]],"^6","Given a CSS color name n return an instance of CSSColor."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/from-name","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",16,"^38",["^13",[["~$n"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",582,"^3<","^3>","^:",582,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["~$n"]]]]],"^6","Given a CSS color name n return an instance of CSSColor."],"~$as-color",["^ ","^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-color","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",44,"^9",1,"^:",44,"^;",14,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",44,"^9",6,"^:",44,"^;",14]],"~$restrict-rgb",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",260,"^9",8,"^:",260,"^;",20,"^3O",true,"^2Z",["^13",["^2[",["^13",[["~$m"]]]]]],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/restrict-rgb","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"^38",["^13",[["~$m"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",260,"^3<","^3=","^:",260,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["~$m"]]]]]],"~$rgb->hsl",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",146,"^9",7,"^:",146,"^;",15,"^2Z",["^13",["^2[",["^13",[[["^ ","~:keys",["~$red","~$green","~$blue"],"^18","^36"]]]]]],"^6","Convert an RGB color map to an HSL color map."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb->hsl","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^38",["^13",[["~$p__39069"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",146,"^3<",["^L",[null,"^3>"]],"^:",146,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[[["^ ","^52",["^53","^54","^55"],"^18","^36"]]]]]],"^6","Convert an RGB color map to an HSL color map."],"~$ex-info-color-name",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",567,"^9",8,"^:",567,"^;",26,"^3O",true,"^2Z",["^13",["^2[",["^13",[["~$n"]]]]],"^6","Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors."],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/ex-info-color-name","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",26,"^38",["^13",[["~$n"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",567,"^3<","^3>","^:",567,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["~$n"]]]]],"^6","Helper function for from-name. Returns an instance of ExceptionInfo\n  for unknown colors."],"~$rgb",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",46,"^9",7,"^:",46,"^;",10,"^2Z",["^13",["^2[",["^13",[[["~$r","~$g","~$b","^18","~$vs"]],["~$r","~$g","~$b"]]]]],"^6","Create an RGB color.","^3G",["^ ","^3;",false,"^3H",3,"^3?",3,"^38",["^13",[[["~$r","~$g","~$b","^18","^5;"]],["~$r","~$g","~$b"]]],"^2Z",["^13",[[["~$r","~$g","~$b","^18","^5;"]],["~$r","~$g","~$b"]]],"^3:",["^13",[null,null]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",10,"^3G",["^ ","^3;",false,"^3H",3,"^3?",3,"^38",["^13",[[["~$r","~$g","~$b","^18","^5;"]],["~$r","~$g","~$b"]]],"^2Z",["^13",[[["~$r","~$g","~$b","^18","^5;"]],["~$r","~$g","~$b"]]],"^3:",["^13",[null,null]]],"^38",["^13",[[["~$r","~$g","~$b","^18","^5;"]],["~$r","~$g","~$b"]]],"^39",null,"^3H",3,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^3J",[["^ ","^3H",1,"^3;",false,"^32","^3>"],["^ ","^3H",3,"^3;",false,"^32","^3>"]],"^8",46,"^:",46,"^3?",3,"^3@",true,"^2Z",["^13",[[["~$r","~$g","~$b","^18","^5;"]],["~$r","~$g","~$b"]]],"^6","Create an RGB color."],"~$tetrad",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",390,"^9",7,"^:",390,"^;",13,"^2Z",["^13",["^2[",["^13",[["^36"],["^36","~$angle"]]]]],"^6","Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed).","^3G",["^ ","^3;",false,"^3H",2,"^3?",2,"^38",["^13",[["^36"],["^36","^5>"]]],"^2Z",["^13",[["^36"],["^36","^5>"]]],"^3:",["^13",[null,null]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/tetrad","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^3G",["^ ","^3;",false,"^3H",2,"^3?",2,"^38",["^13",[["^36"],["^36","^5>"]]],"^2Z",["^13",[["^36"],["^36","^5>"]]],"^3:",["^13",[null,null]]],"^38",["^13",[["^36"],["^36","^5>"]]],"^39",null,"^3H",2,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^3J",[["^ ","^3H",1,"^3;",false,"^32","^3>"],["^ ","^3H",2,"^3;",false,"^32","~$cljs.core/IVector"]],"^8",390,"^:",390,"^3?",2,"^3@",true,"^2Z",["^13",[["^36"],["^36","^5>"]]],"^6","Given a color return a quadruple of four colors which are\n  equidistance on the color wheel (ie. a pair of complements). An\n  optional angle may be given for color of the second complement in the\n  pair (this defaults to 90 when only color is passed)."],"~$hsl",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",66,"^9",7,"^:",66,"^;",10,"^2Z",["^13",["^2[",["^13",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]]]],"^6","Create an HSL color.","^3G",["^ ","^3;",false,"^3H",3,"^3?",3,"^38",["^13",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^2Z",["^13",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^3:",["^13",[null,null]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",10,"^3G",["^ ","^3;",false,"^3H",3,"^3?",3,"^38",["^13",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^2Z",["^13",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^3:",["^13",[null,null]]],"^38",["^13",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^39",null,"^3H",3,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^3J",[["^ ","^3H",1,"^3;",false,"^32","^3>"],["^ ","^3H",3,"^3;",false,"^32","^3>"]],"^8",66,"^:",66,"^3?",3,"^3@",true,"^2Z",["^13",[[["~$h","~$s","~$l"]],["~$h","~$s","~$l"]]],"^6","Create an HSL color."],"~$hex-re",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",117,"^9",3,"^:",117,"^;",9,"^6","Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \"#\". The color portion is captured."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex-re","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",9,"^9",1,"^8",112,"^:",117,"^32","^3>","^6","Regular expression for matching a hexadecimal color.\n             Matches hexadecimal colors of length three or six possibly\n             lead by a \"#\". The color portion is captured."],"~$rgb?",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",89,"^9",7,"^:",89,"^;",11,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Return true if color is an RGB color."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb?","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",11,"^38",["^13",[["^36"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",89,"^3<","^3M","^:",89,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Return true if color is an RGB color."],"~$color?",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",107,"^9",7,"^:",107,"^;",13,"^2Z",["^13",["^2[",["^13",[["~$x"]]]]],"^6","Return true if x is a color."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color?","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^38",["^13",[["~$x"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",107,"^3<","^3M","^:",107,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["~$x"]]]]],"^6","Return true if x is a color."],"~$hue-rotations",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",361,"^9",8,"^:",361,"^;",21,"^3O",true,"^2Z",["^13",["^2[",["^13",[["^36","~$&","~$amounts"]]]]],"^3G",["^ ","^3;",true,"^3H",1,"^3?",1,"^38",[["^13",["^36","^5J"]]],"^2Z",["^13",[["^36","~$&","^5J"]]],"^3:",["^13",[null]]]],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hue-rotations","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",21,"^3G",["^ ","^3;",true,"^3H",1,"^3?",1,"^38",[["^13",["^36","^5J"]]],"^2Z",["^13",[["^36","~$&","^5J"]]],"^3:",["^13",[null]]],"^38",[["^13",["^36","^5J"]]],"^39",null,"^3H",1,"^3:",["^13",[null]],"^9",1,"^3;",true,"^3J",[["^ ","^3H",1,"^3;",true,"^32","^4;"]],"^8",361,"^3<","^3>","^:",361,"^3?",1,"^3@",true,"^2Z",["^13",[["^36","~$&","^5J"]]]],"~$lighten",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",320,"^9",7,"^:",320,"^;",14,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Increase the lightness value a given color by amount."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/lighten","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",14,"^38",["^13",[["^36","^3B"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",320,"^3<",["^L",["^3=","^3>"]],"^:",320,"^3?",2,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Increase the lightness value a given color by amount."],"~$crown-hex",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",617,"^9",8,"^:",617,"^;",17,"^3O",true,"^2Z",["^13",["^2[",["^13",[["^3R"]]]]]],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/crown-hex","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",17,"^38",["^13",[["^3R"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",617,"^3<",["^L",[null,"^U"]],"^:",617,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^3R"]]]]]],"~$transparentize",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",330,"^9",7,"^:",330,"^;",21,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Decreases the alpha value of a given color by amount."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/transparentize","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",21,"^38",["^13",[["^36","^3B"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",330,"^3<",["^L",["^3=","^3>"]],"^:",330,"^3?",2,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Decreases the alpha value of a given color by amount."],"~$hex?",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",119,"^9",7,"^:",119,"^;",11,"^2Z",["^13",["^2[",["^13",[["~$x"]]]]],"^6","Returns true if x is a hexadecimal color."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex?","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",11,"^38",["^13",[["~$x"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",119,"^3<","^3M","^:",119,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["~$x"]]]]],"^6","Returns true if x is a hexadecimal color."],"~$update-hsla-field",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",300,"^9",8,"^:",300,"^;",25,"^3O",true,"^2Z",["^13",["^2[",["^13",[["^36","~$field","~$f","~$v"]]]]]],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/update-hsla-field","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",25,"^38",["^13",[["^36","^5U","~$f","~$v"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",300,"^3<",["^L",["^3=","^3>"]],"^:",300,"^3?",4,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36","^5U","~$f","~$v"]]]]]],"~$scale-color-value",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",589,"^9",8,"^:",589,"^;",25,"^3O",true,"^2Z",["^13",["^2[",["^13",[["~$value","^3B"],["^5X","^3B","~$min-val","~$max-val"]]]]],"^3G",["^ ","^3;",false,"^3H",4,"^3?",4,"^38",["^13",[["^5X","^3B"],["^5X","^3B","^5Y","^5Z"]]],"^2Z",["^13",[["^5X","^3B"],["^5X","^3B","^5Y","^5Z"]]],"^3:",["^13",[null,null]]]],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-color-value","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",25,"^3G",["^ ","^3;",false,"^3H",4,"^3?",4,"^38",["^13",[["^5X","^3B"],["^5X","^3B","^5Y","^5Z"]]],"^2Z",["^13",[["^5X","^3B"],["^5X","^3B","^5Y","^5Z"]]],"^3:",["^13",[null,null]]],"^38",["^13",[["^5X","^3B"],["^5X","^3B","^5Y","^5Z"]]],"^39",null,"^3H",4,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^3J",[["^ ","^3H",2,"^3;",false,"^32","^3>"],["^ ","^3H",4,"^3;",false,"^32","^3>"]],"^8",589,"^:",589,"^3?",4,"^3@",true,"^2Z",["^13",[["^5X","^3B"],["^5X","^3B","^5Y","^5Z"]]]],"~$rgb-clip",["^ ","^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/rgb-clip","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",219,"^9",1,"^:",219,"^;",14,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",219,"^9",6,"^:",219,"^;",14],"^32","^33"],"~$triad",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",375,"^9",7,"^:",375,"^;",12,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Given a color return a triple of colors which are equidistance apart\n  on the color wheel."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/triad","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",12,"^38",["^13",[["^36"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",375,"^3<","^4;","^:",375,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Given a color return a triple of colors which are equidistance apart\n  on the color wheel."],"~$make-color-operation",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",264,"^9",8,"^:",264,"^;",28,"^3O",true,"^2Z",["^13",["^2[",["^13",[["~$op"]]]]]],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/make-color-operation","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",28,"^38",["^13",[["^65"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",264,"^3<","^33","^:",264,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^65"]]]]]],"~$as-hsl",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",241,"^9",7,"^:",241,"^;",13,"^2Z",["^13",["^2[",["^13",[["~$x"]]]]],"^6","Convert a color to a HSL."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/as-hsl","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^38",["^13",[["~$x"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",241,"^3<",["^L",[null,"^3>"]],"^:",241,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["~$x"]]]]],"^6","Convert a color to a HSL."],"~$scale-alpha",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",608,"^9",7,"^:",608,"^;",18,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Scales the alpha of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-alpha","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",18,"^38",["^13",[["^36","^3B"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",608,"^3<",["^L",["^3=","^3>"]],"^:",608,"^3?",2,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Scales the alpha of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards."],"~$split-complement",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",381,"^9",7,"^:",381,"^;",23,"^2Z",["^13",["^2[",["^13",[["^36"],["^36","~$distance-from-complement"]]]]],"^6","Given a color return a triple of the color and the two colors on\n  either side of it's complement.","^3G",["^ ","^3;",false,"^3H",2,"^3?",2,"^38",["^13",[["^36"],["^36","^6<"]]],"^2Z",["^13",[["^36"],["^36","^6<"]]],"^3:",["^13",[null,null]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/split-complement","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",23,"^3G",["^ ","^3;",false,"^3H",2,"^3?",2,"^38",["^13",[["^36"],["^36","^6<"]]],"^2Z",["^13",[["^36"],["^36","^6<"]]],"^3:",["^13",[null,null]]],"^38",["^13",[["^36"],["^36","^6<"]]],"^39",null,"^3H",2,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^3J",[["^ ","^3H",1,"^3;",false,"^32","^3>"],["^ ","^3H",2,"^3;",false,"^32","^4;"]],"^8",381,"^:",381,"^3?",2,"^3@",true,"^2Z",["^13",[["^36"],["^36","^6<"]]],"^6","Given a color return a triple of the color and the two colors on\n  either side of it's complement."],"~$weighted-mix",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",647,"^9",7,"^:",647,"^;",19,"^2Z",["^13",["^2[",["^13",[["^3E","^3F","~$weight"]]]]],"^6","~`weight` is number 0 to 100 (%).\n   At 0, it weighs color-1 at 100%.\n   At 100, it weighs color-2 at 100%.\n   Returns hex string."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/weighted-mix","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",19,"^38",["^13",[["^3E","^3F","^6?"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",647,"^3<",["^L",[null,"^U"]],"^:",647,"^3?",3,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^3E","^3F","^6?"]]]]],"^6","~`weight` is number 0 to 100 (%).\n   At 0, it weighs color-1 at 100%.\n   At 100, it weighs color-2 at 100%.\n   Returns hex string."],"~$percent-clip",["^ ","^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/percent-clip","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",211,"^9",1,"^:",211,"^;",18,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",211,"^9",6,"^:",211,"^;",18],"^32","^33"],"~$hsl->rgb",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",171,"^9",7,"^:",171,"^;",15,"^2Z",["^13",["^2[",["^13",[[["^ ","^52",["~$hue","~$saturation","~$lightness"],"^18","^36"]]]]]],"^6","Convert an HSL color map to an RGB color map."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsl->rgb","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^38",["^13",[["~$p__39098"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",171,"^3<",["^L",[null,"^3>"]],"^:",171,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[[["^ ","^52",["^6D","^6E","^6F"],"^18","^36"]]]]]],"^6","Convert an HSL color map to an RGB color map."],"~$shades",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",405,"^9",7,"^:",405,"^;",13,"^2Z",["^13",["^2[",["^13",[["^36"],["^36","~$step"]]]]],"^6","Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list.","^3G",["^ ","^3;",false,"^3H",2,"^3?",2,"^38",["^13",[["^36"],["^36","^6J"]]],"^2Z",["^13",[["^36"],["^36","^6J"]]],"^3:",["^13",[null,null]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/shades","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",13,"^3G",["^ ","^3;",false,"^3H",2,"^3?",2,"^38",["^13",[["^36"],["^36","^6J"]]],"^2Z",["^13",[["^36"],["^36","^6J"]]],"^3:",["^13",[null,null]]],"^38",["^13",[["^36"],["^36","^6J"]]],"^39",null,"^3H",2,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^3J",[["^ ","^3H",1,"^3;",false,"^32","^3>"],["^ ","^3H",2,"^3;",false,"^32","^4;"]],"^8",405,"^:",405,"^3?",2,"^3@",true,"^2Z",["^13",[["^36"],["^36","^6J"]]],"^6","Given a color return a list of shades from lightest to darkest by\n  a step. By default the step is 10. White and black are excluded from\n  the returned list."],"~$hex->rgb",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",124,"^9",7,"^:",124,"^;",15,"^2Z",["^13",["^2[",["^13",[["~$s"]]]]],"^6","Convert a hexadecimal color to an RGB color map."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hex->rgb","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^38",["^13",[["~$s"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",124,"^3<",["^L",["^3>","^4V"]],"^:",124,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["~$s"]]]]],"^6","Convert a hexadecimal color to an RGB color map."],"~$map->CSSColor",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"^9",12,"~:internal-ctor",true,"~:factory","~:map","^8",22,"^:",22,"^2Z",["^13",["^2[",["^13",[["~$G__38797"]]]]],"^6","Factory function for day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor, taking a map of keywords to field values."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/map->CSSColor","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"^38",["^13",[["^6R"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^6O",true,"^3;",false,"^6P","^6Q","^8",22,"^3<","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor","^:",22,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^6R"]]]]],"^6","Factory function for day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor, taking a map of keywords to field values."],"~$zero-to-one-clip",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",216,"^9",3,"^:",216,"^;",19,"^2Z",["^13",["^2[",["^13",[["~$n"]]]]],"^3O",true],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/zero-to-one-clip","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",19,"^9",1,"^8",214,"^:",216,"^32","^33","^2Z",["^13",["^2[",["^13",[["~$n"]]]]]],"~$scale-saturation",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",602,"^9",7,"^:",602,"^;",23,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Scales the saturation of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/scale-saturation","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",23,"^38",["^13",[["^36","^3B"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",602,"^3<",["^L",["^3=","^3>"]],"^:",602,"^3?",2,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Scales the saturation of a color by amount, which is treated as a percentage.\n  Supply positive values to scale upwards and negative values to scale downwards."],"~$desaturate",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",315,"^9",7,"^:",315,"^;",17,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Decrease the saturation value of a given color by amount."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/desaturate","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",17,"^38",["^13",[["^36","^3B"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",315,"^3<",["^L",["^3=","^3>"]],"^:",315,"^3?",2,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Decrease the saturation value of a given color by amount."],"~$hsla",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",79,"^9",7,"^:",79,"^;",11,"^2Z",["^13",["^2[",["^13",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]]]],"^6","Create an HSLA color.","^3G",["^ ","^3;",false,"^3H",4,"^3?",4,"^38",["^13",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^2Z",["^13",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^3:",["^13",[null,null]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/hsla","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",11,"^3G",["^ ","^3;",false,"^3H",4,"^3?",4,"^38",["^13",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^2Z",["^13",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^3:",["^13",[null,null]]],"^38",["^13",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^39",null,"^3H",4,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^3J",[["^ ","^3H",1,"^3;",false,"^32","^3>"],["^ ","^3H",4,"^3;",false,"^32","^3>"]],"^8",79,"^:",79,"^3?",4,"^3@",true,"^2Z",["^13",[[["~$h","~$s","~$l","~$a"]],["~$h","~$s","~$l","~$a"]]],"^6","Create an HSLA color."],"~$->CSSColor",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"^9",12,"^6O",true,"^6P","~:positional","^8",22,"^:",22,"^2Z",["^13",["^2[",["^13",[["^53","^54","^55","^6D","^6E","^6F","~$alpha"]]]]],"^6","Positional factory function for day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/->CSSColor","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"^38",["^13",[["^53","^54","^55","^6D","^6E","^6F","^73"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^6O",true,"^3;",false,"^6P","^72","^8",22,"^3<","^6T","^:",22,"^3?",7,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^53","^54","^55","^6D","^6E","^6F","^73"]]]]],"^6","Positional factory function for day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/CSSColor."],"~$CSSColor",["^ ","~:num-fields",7,"~:protocols",["^L",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/IFn","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","^4C","~$cljs.core/ILookup"]],"^O","^6T","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",20,"~:type",true,"^9",12,"^6O",true,"^8",22,"~:record",true,"^:",22,"^32","^33","~:skip-protocol-flag",["^L",["^78","^79","^7:","^7;","^7<","^7=","^7>","^7?","^7@","^7A","^7B","^7C","^7D","^7E","^4C","^7F"]]],"^M",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",356,"^9",7,"^:",356,"^;",17,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Return the complement of a color."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/complement","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",17,"^38",["^13",[["^36"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",356,"^3<",["^L",["^3=","^3>"]],"^:",356,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36"]]]]],"^6","Return the complement of a color."],"~$saturate",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",310,"^9",7,"^:",310,"^;",15,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Increase the saturation value of a given color by amount."],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/saturate","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^38",["^13",[["^36","^3B"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",310,"^3<",["^L",["^3=","^3>"]],"^:",310,"^3?",2,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^36","^3B"]]]]],"^6","Increase the saturation value of a given color by amount."],"~$color-div",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",298,"^9",3,"^:",298,"^;",12,"^6","Multiply the RGB components of two or more colors.","^2Z",["^13",["^2[",["^13",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^30"]]]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-div","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",12,"^9",1,"^8",295,"^:",298,"^32","^33","^2Z",["^13",["^2[",["^13",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^30"]]]]],"^6","Multiply the RGB components of two or more colors."],"~$color-",["^ ","^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",288,"^9",3,"^:",288,"^;",9,"^6","Subtract the RGB components of two or more colors.","^2Z",["^13",["^2[",["^13",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^30"]]]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/color-","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",9,"^9",1,"^8",285,"^:",288,"^32","^33","^2Z",["^13",["^2[",["^13",[["~$a"],["~$a","~$b"],["~$a","~$b","~$&","^30"]]]]],"^6","Subtract the RGB components of two or more colors."],"~$decrown-hex",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",614,"^9",8,"^:",614,"^;",19,"^3O",true,"^2Z",["^13",["^2[",["^13",[["^3R"]]]]]],"^3O",true,"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/decrown-hex","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",19,"^38",["^13",[["^3R"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",614,"^3<","^3>","^:",614,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["^3R"]]]]]],"~$trim-one",["^ ","^35",null,"^5",["^ ","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^8",143,"^9",7,"^:",143,"^;",15,"^2Z",["^13",["^2[",["^13",[["~$x"]]]]]],"^O","~$day8.re-frame-10x.inlined-deps.garden.v1v3v9.garden.color/trim-one","^7","day8/re_frame_10x/inlined_deps/garden/v1v3v9/garden/color.cljc","^;",15,"^38",["^13",[["~$x"]]],"^39",null,"^3:",["^13",[null,null]],"^9",1,"^3;",false,"^8",143,"^3<",["^L",[null,"^4O"]],"^:",143,"^3?",1,"^3@",true,"^2Z",["^13",["^2[",["^13",[["~$x"]]]]]]],"^10",["^ ","^J","^J","^X","^X"],"~:cljs.analyzer/constants",["^ ","^Z",["^L",["~:hue","~:aquamarine","~:lime","~:deepskyblue","~:darksalmon","~:antiquewhite","~:mediumturquoise","~:slategrey","~:slategray","~:sienna","~:orange","~:navajowhite","~:given","~:lavenderblush","~:firebrick","~:orangered","~:palevioletred","~:lawngreen","~:seashell","~:lightpink","~:darkolivegreen","~:aliceblue","~:gray","~:lightsteelblue","~:whitesmoke","~:darkgoldenrod","~:tan","~:bisque","~:white","~:else","~:lightgreen","~:saturation","~:darkseagreen","~:crimson","~:darkslategray","~:mistyrose","~:chocolate","^6D","~:yellow","~:cadetblue","~:navy","~:ghostwhite","~:dimgrey","~:seagreen","^42","~:mediumseagreen","~:indigo","~:olivedrab","~:cyan","~:peachpuff","~:limegreen","~:mediumslateblue","~:violet","~:sandybrown","~:yellowgreen","~:mediumspringgreen","~:steelblue","~:rosybrown","~:cornflowerblue","~:ivory","~:lightgoldenrodyellow","~:magnitude","~:salmon","~:darkcyan","^6E","~:peru","~:cornsilk","~:lightslategray","~:blueviolet","~:forestgreen","~:lightseagreen","^54","~:gold","~:gainsboro","~:darkorchid","~:burlywood","~:lightskyblue","~:chartreuse","~:snow","~:moccasin","~:honeydew","~:aqua","~:darkred","~:mediumorchid","~:lightsalmon","~:saddlebrown","~:wheat","~:springgreen","~:lightslategrey","~:darkblue","~:powderblue","~:turquoise","~:blanchedalmond","~:papayawhip","~:slateblue","~:lightblue","~:skyblue","^41","~:lightyellow","^43","~:palegreen","~:greenyellow","~:khaki","~:maroon","~:expected","~:darkgrey","~:midnightblue","~:floralwhite","~:deeppink","~:paleturquoise","~:darkkhaki","~:azure","~:indianred","~:lightness","~:darkviolet","~:mediumpurple","~:fuchsia","~:alpha","~:coral","~:mediumvioletred","~:lemonchiffon","~:mediumblue","~:darkmagenta","~:goldenrod","~:darkorange","~:orchid","~:plum","~:pink","~:teal","~:magenta","~:lightgrey","~:purple","~:dodgerblue","~:darkturquoise","^53","~:mintcream","^55","~:hotpink","~:thistle","~:royalblue","~:darkgreen","~:darkslateblue","~:silver","^6F","~:darkgray","~:oldlace","~:mediumaquamarine","~:brown","~:lightgray","~:olive","~:lightcoral","~:tomato","~:lightcyan","^73","~:linen","~:darkslategrey","~:lavender","~:dimgray","~:palegoldenrod","~:beige","~:black"]],"~:order~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1I",[["^;@","~:static-fns"],true,["^;@","~:elide-asserts"],false,["^;@","~:optimize-constants"],null,["^;@","^1@"],null,["^;@","~:external-config"],null,["^;@","~:tooling-config"],null,["^;@","~:emit-constants"],null,["^;@","~:load-tests"],null,["^;@","~:form-size-threshold"],null,["^;@","~:infer-externs"],true,["^;@","^1B"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^;@","~:fn-invoke-direct"],null,["^;@","~:source-map"],"/dev/null"]]]