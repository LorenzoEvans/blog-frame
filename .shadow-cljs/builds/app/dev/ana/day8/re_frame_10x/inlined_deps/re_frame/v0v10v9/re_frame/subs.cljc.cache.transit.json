["^ ","~:output",["^ ","~:js","goog.provide('day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs');\ngoog.require('cljs.core');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.db');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.utils');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.registrar');\ngoog.require('day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace');\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.kind = new cljs.core.Keyword(null,\"sub\",\"sub\",-2093760025);\nif(cljs.core.truth_((day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1 ? day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.kind) : day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.registrar.kinds.call(null,day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.kind)))){\n} else {\nthrow (new Error(\"Assert failed: (day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.registrar/kinds kind)\"));\n}\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.query__GT_reaction = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n/**\n * Causes all subscriptions to be removed from the cache.\n *   Does this by:\n *   1. running `on-dispose` on all cached subscriptions\n *   2. Each `on-dispose` will perform the removal of themselves.\n * \n *   This is for development time use. Useful when reloading Figwheel code\n *   after a React exception, because React components won't have been\n *   cleaned up properly. And this, in turn, means the subscriptions within those\n *   components won't have been cleaned up correctly. So this forces the issue.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.clear_subscription_cache_BANG_ = (function day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$clear_subscription_cache_BANG_(){\nvar seq__40825_40956 = cljs.core.seq(cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.query__GT_reaction));\nvar chunk__40826_40957 = null;\nvar count__40827_40958 = (0);\nvar i__40828_40959 = (0);\nwhile(true){\nif((i__40828_40959 < count__40827_40958)){\nvar vec__40838_40960 = chunk__40826_40957.cljs$core$IIndexed$_nth$arity$2(null,i__40828_40959);\nvar k_40961 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__40838_40960,(0),null);\nvar rxn_40962 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__40838_40960,(1),null);\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.dispose_BANG_(rxn_40962);\n\n\nvar G__40963 = seq__40825_40956;\nvar G__40964 = chunk__40826_40957;\nvar G__40965 = count__40827_40958;\nvar G__40966 = (i__40828_40959 + (1));\nseq__40825_40956 = G__40963;\nchunk__40826_40957 = G__40964;\ncount__40827_40958 = G__40965;\ni__40828_40959 = G__40966;\ncontinue;\n} else {\nvar temp__5735__auto___40967 = cljs.core.seq(seq__40825_40956);\nif(temp__5735__auto___40967){\nvar seq__40825_40968__$1 = temp__5735__auto___40967;\nif(cljs.core.chunked_seq_QMARK_(seq__40825_40968__$1)){\nvar c__4550__auto___40969 = cljs.core.chunk_first(seq__40825_40968__$1);\nvar G__40971 = cljs.core.chunk_rest(seq__40825_40968__$1);\nvar G__40972 = c__4550__auto___40969;\nvar G__40973 = cljs.core.count(c__4550__auto___40969);\nvar G__40974 = (0);\nseq__40825_40956 = G__40971;\nchunk__40826_40957 = G__40972;\ncount__40827_40958 = G__40973;\ni__40828_40959 = G__40974;\ncontinue;\n} else {\nvar vec__40841_40975 = cljs.core.first(seq__40825_40968__$1);\nvar k_40976 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__40841_40975,(0),null);\nvar rxn_40977 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__40841_40975,(1),null);\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.dispose_BANG_(rxn_40977);\n\n\nvar G__40978 = cljs.core.next(seq__40825_40968__$1);\nvar G__40979 = null;\nvar G__40980 = (0);\nvar G__40981 = (0);\nseq__40825_40956 = G__40978;\nchunk__40826_40957 = G__40979;\ncount__40827_40958 = G__40980;\ni__40828_40959 = G__40981;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(cljs.core.not_empty(cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.query__GT_reaction)))){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Subscription cache should be empty after clearing it.\"], 0));\n} else {\nreturn null;\n}\n});\n/**\n * Unregisters all existing subscription handlers\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.clear_all_handlers_BANG_ = (function day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$clear_all_handlers_BANG_(){\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.kind);\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.clear_subscription_cache_BANG_();\n});\n/**\n * cache the reaction r\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_and_return = (function day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$cache_and_return(query_v,dynv,r){\nvar cache_key = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dynv], null);\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.add_on_dispose_BANG_(r,((function (cache_key){\nreturn (function (){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__40846 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__40847 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.utils.first_in_vector(query_v),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"dispose\",\"sub/dispose\",365440536),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_v,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id(r)], null)], null));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__40847;\n\ntry{try{return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.query__GT_reaction,((function (_STAR_current_trace_STAR__orig_val__40846,_STAR_current_trace_STAR__temp_val__40847,cache_key){\nreturn (function (query_cache){\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\n} else {\nreturn query_cache;\n}\n});})(_STAR_current_trace_STAR__orig_val__40846,_STAR_current_trace_STAR__temp_val__40847,cache_key))\n);\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__40774__auto___40982 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.now();\nvar duration__40775__auto___40983 = (end__40774__auto___40982 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__40775__auto___40983,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.run_tracing_callbacks_BANG_(end__40774__auto___40982);\n} else {\n}\n}}finally {day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__40846;\n}} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.query__GT_reaction,((function (cache_key){\nreturn (function (query_cache){\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\n} else {\nreturn query_cache;\n}\n});})(cache_key))\n);\n}\n});})(cache_key))\n);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.query__GT_reaction,((function (cache_key){\nreturn (function (query_cache){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.debug_enabled_QMARK_){\nif(cljs.core.contains_QMARK_(query_cache,cache_key)){\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\",cache_key], 0));\n} else {\n}\n} else {\n}\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(query_cache,cache_key,r);\n});})(cache_key))\n);\n\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___40984 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id(r)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id(r)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___40984;\n\n} else {\n}\n\nreturn r;\n});\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_lookup = (function day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$cache_lookup(var_args){\nvar G__40863 = arguments.length;\nswitch (G__40863) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1 = (function (query_v){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query_v,cljs.core.PersistentVector.EMPTY);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2 = (function (query_v,dyn_v){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.query__GT_reaction),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dyn_v], null));\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_lookup.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a `query`, returns a Reagent `reaction` which, over\n *   time, reactively delivers a stream of values. So in FRP-ish terms,\n *   it returns a `Signal`.\n * \n *   To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n * \n *   `query` is a vector of at least one element. The first element is the\n *   `query-id`, typically a namespaced keyword. The rest of the vector's\n *   elements are optional, additional values which parameterise the query\n *   performed.\n * \n *   `dynv` is an optional 3rd argument, which is a vector of further input\n *   signals (atoms, reactions, etc), NOT values. This argument exists for\n *   historical reasons and is borderline deprecated these days.\n * \n *   Example Usage:\n *   --------------\n * \n *  (subscribe [:items])\n *  (subscribe [:items \"blue\" :small])\n *  (subscribe [:items {:colour \"blue\"  :size :small}])\n * \n *   Note: for any given call to `subscribe` there must have been a previous call\n *   to `reg-sub`, registering the query handler (function) for the `query-id` given.\n * \n *   Hint\n *   ----\n * \n *   When used in a view function BE SURE to `deref` the returned value.\n *   In fact, to avoid any mistakes, some prefer to define:\n * \n *   (def <sub  (comp deref day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.core/subscribe))\n * \n *   And then, within their views, they call  `(<sub [:items :small])` rather\n *   than using `subscribe` directly.\n * \n *   De-duplication\n *   --------------\n * \n *   XXX\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.subscribe = (function day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$subscribe(var_args){\nvar G__40890 = arguments.length;\nswitch (G__40890) {\ncase 1:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1 = (function (query){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__40891 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__40892 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query], null)], null));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__40892;\n\ntry{try{var temp__5733__auto__ = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___40987 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___40987;\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.utils.first_in_vector(query);\nvar handler_fn = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.kind,query_id);\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___40988 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___40988;\n\n} else {\n}\n\nif((handler_fn == null)){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___40989 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___40989;\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.db.app_db,query) : handler_fn.call(null,day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.db.app_db,query)));\n}\n}\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__40774__auto___40992 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.now();\nvar duration__40775__auto___40993 = (end__40774__auto___40992 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__40775__auto___40993,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.run_tracing_callbacks_BANG_(end__40774__auto___40992);\n} else {\n}\n}}finally {day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__40891;\n}} else {\nvar temp__5733__auto__ = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___40995 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___40995;\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.utils.first_in_vector(query);\nvar handler_fn = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.kind,query_id);\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___40996 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___40996;\n\n} else {\n}\n\nif((handler_fn == null)){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___40997 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___40997;\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.db.app_db,query) : handler_fn.call(null,day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.db.app_db,query)));\n}\n}\n}\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2 = (function (query,dynv){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__40895 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__40896 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dynv], null)], null));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__40896;\n\ntry{try{var temp__5733__auto__ = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___40998 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___40998;\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.utils.first_in_vector(query);\nvar handler_fn = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.kind,query_id);\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___40999 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___40999;\n\n} else {\n}\n\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.debug_enabled_QMARK_){\nvar temp__5735__auto___41000 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.ratom_QMARK_,dynv));\nif(cljs.core.truth_(temp__5735__auto___41000)){\nvar not_reactive_41001 = temp__5735__auto___41000;\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_41001], 0));\n} else {\n}\n} else {\n}\n\nif((handler_fn == null)){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___41002 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___41002;\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nvar dyn_vals = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.make_reaction(((function (query_id,handler_fn,temp__5733__auto__,_STAR_current_trace_STAR__orig_val__40895,_STAR_current_trace_STAR__temp_val__40896){\nreturn (function (){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\n});})(query_id,handler_fn,temp__5733__auto__,_STAR_current_trace_STAR__orig_val__40895,_STAR_current_trace_STAR__temp_val__40896))\n);\nvar sub = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.make_reaction(((function (dyn_vals,query_id,handler_fn,temp__5733__auto__,_STAR_current_trace_STAR__orig_val__40895,_STAR_current_trace_STAR__temp_val__40896){\nreturn (function (){\nvar G__40907 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.db.app_db;\nvar G__40908 = query;\nvar G__40909 = cljs.core.deref(dyn_vals);\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__40907,G__40908,G__40909) : handler_fn.call(null,G__40907,G__40908,G__40909));\n});})(dyn_vals,query_id,handler_fn,temp__5733__auto__,_STAR_current_trace_STAR__orig_val__40895,_STAR_current_trace_STAR__temp_val__40896))\n);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_and_return(query,dynv,day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.make_reaction(((function (dyn_vals,sub,query_id,handler_fn,temp__5733__auto__,_STAR_current_trace_STAR__orig_val__40895,_STAR_current_trace_STAR__temp_val__40896){\nreturn (function (){\nreturn cljs.core.deref(cljs.core.deref(sub));\n});})(dyn_vals,sub,query_id,handler_fn,temp__5733__auto__,_STAR_current_trace_STAR__orig_val__40895,_STAR_current_trace_STAR__temp_val__40896))\n));\n}\n}\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__40774__auto___41003 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.now();\nvar duration__40775__auto___41004 = (end__40774__auto___41003 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__40775__auto___41004,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.run_tracing_callbacks_BANG_(end__40774__auto___41003);\n} else {\n}\n}}finally {day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__40895;\n}} else {\nvar temp__5733__auto__ = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___41005 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___41005;\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.utils.first_in_vector(query);\nvar handler_fn = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.kind,query_id);\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___41006 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___41006;\n\n} else {\n}\n\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.debug_enabled_QMARK_){\nvar temp__5735__auto___41008 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.ratom_QMARK_,dynv));\nif(cljs.core.truth_(temp__5735__auto___41008)){\nvar not_reactive_41009 = temp__5735__auto___41008;\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_41009], 0));\n} else {\n}\n} else {\n}\n\nif((handler_fn == null)){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___41010 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___41010;\n\n} else {\n}\n\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nvar dyn_vals = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.make_reaction(((function (query_id,handler_fn,temp__5733__auto__){\nreturn (function (){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\n});})(query_id,handler_fn,temp__5733__auto__))\n);\nvar sub = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.make_reaction(((function (dyn_vals,query_id,handler_fn,temp__5733__auto__){\nreturn (function (){\nvar G__40915 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.db.app_db;\nvar G__40916 = query;\nvar G__40917 = cljs.core.deref(dyn_vals);\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__40915,G__40916,G__40917) : handler_fn.call(null,G__40915,G__40916,G__40917));\n});})(dyn_vals,query_id,handler_fn,temp__5733__auto__))\n);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_and_return(query,dynv,day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.make_reaction(((function (dyn_vals,sub,query_id,handler_fn,temp__5733__auto__){\nreturn (function (){\nreturn cljs.core.deref(cljs.core.deref(sub));\n});})(dyn_vals,sub,query_id,handler_fn,temp__5733__auto__))\n));\n}\n}\n}\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.subscribe.cljs$lang$maxFixedArity = 2;\n\n/**\n * Returns a new version of 'm' in which 'f' has been applied to each value.\n *   (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.map_vals = (function day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$map_vals(f,m){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.empty(m),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__40921){\nvar vec__40922 = p__40921;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__40922,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__40922,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(v) : f.call(null,v))], null);\n})),m);\n});\n/**\n * Runs f over signals. Signals may take several\n *   forms, this function handles all of them.\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.map_signals = (function day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$map_signals(f,signals){\nif(cljs.core.sequential_QMARK_(signals)){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(f,signals);\n} else {\nif(cljs.core.map_QMARK_(signals)){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.map_vals(f,signals);\n} else {\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.deref_QMARK_(signals)){\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(signals) : f.call(null,signals));\n} else {\nreturn cljs.core.List.EMPTY;\n\n}\n}\n}\n});\n/**\n * Coerces x to a seq if it isn't one already\n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.to_seq = (function day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$to_seq(x){\nif(cljs.core.sequential_QMARK_(x)){\nreturn x;\n} else {\nreturn (new cljs.core.List(null,x,null,(1),null));\n}\n});\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.deref_input_signals = (function day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$deref_input_signals(signals,query_id){\nvar dereffed_signals = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.map_signals(cljs.core.deref,signals);\nif(cljs.core.sequential_QMARK_(signals)){\ncljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,signals);\n} else {\nif(cljs.core.map_QMARK_(signals)){\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.map_vals(cljs.core.deref,signals);\n} else {\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.deref_QMARK_(signals)){\ncljs.core.deref(signals);\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: in the reg-sub for\",query_id,\", the input-signals function returns:\",signals], 0));\n\n}\n}\n}\n\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___41021 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.to_seq(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.map_signals(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id,signals)))], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.to_seq(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.map_signals(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id,signals)))], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___41021;\n\n} else {\n}\n\nreturn dereffed_signals;\n});\n/**\n * For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n *   \n *   During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n *   will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n *   needs to know how to create the node.   By calling `reg-sub`, you are registering \n *   'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n * \n *   Repeating: calling `reg-sub` does not create a node. It only creates the template\n *   from which nodes can be created later. \n *   \n *   `reg-sub` arguments are:  \n *  - a `query-id` (typically a namespaced keyword)\n *  - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n *  - a function which computes the value of this kind of node \n * \n *   The `computation function` is always the last argument supplied and it is expected to have the signature: \n *  `(input-values, query-vector) -> a-value`\n *   \n *   When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n *   the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n *   then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n * \n *   The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n *   but whatever is there defines the `input signals` part of the template, controlling what input \n *  values \"flow into\" the `computation function` gets when it is called. \n * \n *   `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n *   But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n *   two are really just sugary variations. \n * \n *   1. No input signals given:\n *    ```clj\n *   (reg-sub\n *     :query-id\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n * \n *   In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n *   and, as a result, the value within `app-db` (a map) is\n *   is given as the 1st argument when `a-computation-fn` is called.   \n *  \n * \n *   2. A signal function is explicitly supplied:\n *   ```clj\n *   (reg-sub\n *     :query-id\n *     signal-fn     ;; <-- here\n *     computation-fn)\n *   ```\n *   \n *   This is the most canonical and instructive of the three variations.\n *   \n *   When a node is created from the template, the `signal-fn` will be called and it\n *   is expected to return the input signal(s) as either a singleton, if there is only\n *   one, or a sequence if there are many, or a map with the signals as the values.\n * \n *   The values from returned nominated signals will be supplied as the 1st argument to  \n *   the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n *   this value will be either a singleton, sequence or map of them (paralleling\n *   the structure returned by the `signal-fn`).\n * \n *   This example `signal-fn` returns a vector of input signals.\n *     ```clj\n *     (fn [query-vec dynamic-vec]\n *       [(subscribe [:a-sub])\n *        (subscribe [:b-sub])])\n *     ```\n *   The associated computation function must be written\n *   to expect a vector of values for its first argument:\n *     ```clj\n *     (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n *       ....)\n *      ```\n * \n *   If, on the other hand, the signal function was simpler and returned a singleton, like this:\n *      ```clj\n *      (fn [query-vec dynamic-vec]\n *        (subscribe [:a-sub]))\n *      ```\n *   then the associated computation function must be written to expect a single value\n *   as the 1st argument:\n *      ```clj\n *      (fn [a query-vec]       ;; 1st argument is a single value\n *        ...)\n *      ```\n *  \n *   Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n *     ```clj\n *   (reg-sub\n *     :query-id\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n *   is the equivalent of using this\n *   2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n *   ```clj\n *   (reg-sub\n *     :query-id\n *     (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n *     a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n *  \n *   3. Syntax Sugar\n * \n *   ```clj\n *   (reg-sub\n *     :a-b-sub\n *     :<- [:a-sub]\n *     :<- [:b-sub]\n *     (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n *       {:a a :b b}))\n *   ```\n * \n *   This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n *   `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n * \n *   If you supply only one pair a singleton will be supplied to the computation function, \n *   as if you had supplied a `signal-fn` returning only a single value:\n * \n *   ```clj\n *   (reg-sub\n *     :a-sub\n *     :<- [:a-sub]\n *     (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n *       ...))\n *   ```\n * \n *   For further understanding, read `/docs`, and look at the detailed comments in\n *   /examples/todomvc/src/subs.cljs\n *   \n */\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.reg_sub = (function day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$reg_sub(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___41022 = arguments.length;\nvar i__4731__auto___41023 = (0);\nwhile(true){\nif((i__4731__auto___41023 < len__4730__auto___41022)){\nargs__4736__auto__.push((arguments[i__4731__auto___41023]));\n\nvar G__41024 = (i__4731__auto___41023 + (1));\ni__4731__auto___41023 = G__41024;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic = (function (query_id,args){\nvar computation_fn = cljs.core.last(args);\nvar input_args = cljs.core.butlast(args);\nvar err_header = [\"re-frame: reg-sub for \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\", \"].join('');\nvar inputs_fn = (function (){var G__40938 = cljs.core.count(input_args);\nswitch (G__40938) {\ncase (0):\nreturn ((function (G__40938,computation_fn,input_args,err_header){\nreturn (function() {\nvar G__41029 = null;\nvar G__41029__1 = (function (_){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.db.app_db;\n});\nvar G__41029__2 = (function (_,___$1){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.db.app_db;\n});\nG__41029 = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn G__41029__1.call(this,_);\ncase 2:\nreturn G__41029__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__41029.cljs$core$IFn$_invoke$arity$1 = G__41029__1;\nG__41029.cljs$core$IFn$_invoke$arity$2 = G__41029__2;\nreturn G__41029;\n})()\n;})(G__40938,computation_fn,input_args,err_header))\n\nbreak;\ncase (1):\nvar f = cljs.core.first(input_args);\nif(cljs.core.fn_QMARK_(f)){\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"2nd argument expected to be an inputs function, got:\",f], 0));\n}\n\nreturn f;\n\nbreak;\ncase (2):\nvar vec__40939 = input_args;\nvar marker = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__40939,(0),null);\nvar vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__40939,(1),null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),marker)){\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected :<-, got:\",marker], 0));\n}\n\nreturn ((function (vec__40939,marker,vec,G__40938,computation_fn,input_args,err_header){\nreturn (function() {\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn = null;\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn__1 = (function (_){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\n});\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn__2 = (function (_,___$1){\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\n});\nday8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn__1.call(this,_);\ncase 2:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nday8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn__1;\nday8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn__2;\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn;\n})()\n;})(vec__40939,marker,vec,G__40938,computation_fn,input_args,err_header))\n\nbreak;\ndefault:\nvar pairs = cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),input_args);\nvar markers = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,pairs);\nvar vecs = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.last,pairs);\nif(((cljs.core.every_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),null], null), null),markers)) && (cljs.core.every_QMARK_(cljs.core.vector_QMARK_,vecs)))){\n} else {\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected pairs of :<- and vectors, got:\",pairs], 0));\n}\n\nreturn ((function (pairs,markers,vecs,G__40938,computation_fn,input_args,err_header){\nreturn (function() {\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn = null;\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn__1 = (function (_){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.subscribe,vecs);\n});\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn__2 = (function (_,___$1){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.subscribe,vecs);\n});\nday8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn__1.call(this,_);\ncase 2:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nday8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn__1;\nday8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn__2;\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$inp_fn;\n})()\n;})(pairs,markers,vecs,G__40938,computation_fn,input_args,err_header))\n\n}\n})();\nreturn day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.registrar.register_handler(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.kind,query_id,((function (computation_fn,input_args,err_header,inputs_fn){\nreturn (function() {\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$subs_handler_fn = null;\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$subs_handler_fn__2 = (function (db,query_vec){\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$1 ? inputs_fn.cljs$core$IFn$_invoke$arity$1(query_vec) : inputs_fn.call(null,query_vec));\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nvar reaction = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.make_reaction(((function (subscriptions,reaction_id,computation_fn,input_args,err_header,inputs_fn){\nreturn (function (){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__40942 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__40943 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__40943;\n\ntry{try{var subscription = (function (){var G__40944 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__40945 = query_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__40944,G__40945) : computation_fn.call(null,G__40944,G__40945));\n})();\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___41040 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___41040;\n\n} else {\n}\n\nreturn subscription;\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__40774__auto___41045 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.now();\nvar duration__40775__auto___41046 = (end__40774__auto___41045 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__40775__auto___41046,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.run_tracing_callbacks_BANG_(end__40774__auto___41045);\n} else {\n}\n}}finally {day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__40942;\n}} else {\nvar subscription = (function (){var G__40946 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__40947 = query_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__40946,G__40947) : computation_fn.call(null,G__40946,G__40947));\n})();\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___41047 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___41047;\n\n} else {\n}\n\nreturn subscription;\n}\n});})(subscriptions,reaction_id,computation_fn,input_args,err_header,inputs_fn))\n);\ncljs.core.reset_BANG_(reaction_id,day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id(reaction));\n\nreturn reaction;\n});\nvar day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$subs_handler_fn__3 = (function (db,query_vec,dyn_vec){\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$2 ? inputs_fn.cljs$core$IFn$_invoke$arity$2(query_vec,dyn_vec) : inputs_fn.call(null,query_vec,dyn_vec));\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nvar reaction = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.make_reaction(((function (subscriptions,reaction_id,computation_fn,input_args,err_header,inputs_fn){\nreturn (function (){\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__40948 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__40949 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dyn_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__40949;\n\ntry{try{var subscription = (function (){var G__40950 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__40951 = query_vec;\nvar G__40952 = dyn_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__40950,G__40951,G__40952) : computation_fn.call(null,G__40950,G__40951,G__40952));\n})();\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___41050 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___41050;\n\n} else {\n}\n\nreturn subscription;\n}finally {if(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__40774__auto___41062 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.now();\nvar duration__40775__auto___41063 = (end__40774__auto___41062 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__40775__auto___41063,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.now()], 0)));\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.run_tracing_callbacks_BANG_(end__40774__auto___41062);\n} else {\n}\n}}finally {day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__40948;\n}} else {\nvar subscription = (function (){var G__40953 = day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__40954 = query_vec;\nvar G__40955 = dyn_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__40953,G__40954,G__40955) : computation_fn.call(null,G__40953,G__40954,G__40955));\n})();\nif(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__40776__auto___41071 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.trace._STAR_current_trace_STAR_ = new_trace__40776__auto___41071;\n\n} else {\n}\n\nreturn subscription;\n}\n});})(subscriptions,reaction_id,computation_fn,input_args,err_header,inputs_fn))\n);\ncljs.core.reset_BANG_(reaction_id,day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.interop.reagent_id(reaction));\n\nreturn reaction;\n});\nday8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$subs_handler_fn = function(db,query_vec,dyn_vec){\nswitch(arguments.length){\ncase 2:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$subs_handler_fn__2.call(this,db,query_vec);\ncase 3:\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$subs_handler_fn__3.call(this,db,query_vec,dyn_vec);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nday8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$2 = day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$subs_handler_fn__2;\nday8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$3 = day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$subs_handler_fn__3;\nreturn day8$re_frame_10x$inlined_deps$re_frame$v0v10v9$re_frame$subs$subs_handler_fn;\n})()\n;})(computation_fn,input_args,err_header,inputs_fn))\n);\n});\n\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.reg_sub.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nday8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.reg_sub.cljs$lang$applyTo = (function (seq40935){\nvar G__40936 = cljs.core.first(seq40935);\nvar seq40935__$1 = cljs.core.next(seq40935);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__40936,seq40935__$1);\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","~:line",1,"~:column",33,"~:end-line",1,"~:end-column",94,"~:mranderson/inlined",true],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^P","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.registrar","^Q","~$goog","^R","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.db","^S","~$trace","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.trace","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.loggers","^V","^U","^U","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.utils","^W","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.interop","^X"],"~:seen",["^I",["~:require"]],"~:uses",["^ ","~$reagent-id","^X","~$console","^V","~$app-db","^S","~$dispose!","^X","~$add-on-dispose!","^X","~$make-reaction","^X","~$get-handler","^Q","~$first-in-vector","^W","~$deref?","^X","~$ratom?","^X","~$debug-enabled?","^X","~$clear-handlers","^Q","~$register-handler","^Q"],"~:require-macros",["^ ","^U","^U","^T","^U","^P","^P"],"~:form",["~#list",["~$ns","^K",["^1?",["^Z",["^S","~:refer",["^12"]],["^X","^1A",["^14","^1:","^15","^19","^18","^13","^10"]],["^V","^1A",["^11"]],["^W","^1A",["^17"]],["^Q","^1A",["^16","^1;","^1<"]],["^U","~:as","^T","~:include-macros",true]]]]],"~:flags",["^ ","^Z",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^R","^P","^S","^X","^V","^W","^Q","^U"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc"],"~:compiled-at",1573425043702,"~:resource-name","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","~:warnings",[],"~:source","(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs\n (:require\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.db        :refer [app-db]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.interop   :refer [add-on-dispose! debug-enabled? make-reaction ratom? deref? dispose! reagent-id]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.loggers   :refer [console]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.utils     :refer [first-in-vector]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.registrar :refer [get-handler clear-handlers register-handler]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.trace     :as trace :include-macros true]))\n\n(def kind :sub)\n(assert (day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.registrar/kinds kind))\n\n;; -- cache -------------------------------------------------------------------\n;;\n;; De-duplicate subscriptions. If two or more equal subscriptions\n;; are concurrently active, we want only one handler running.\n;; Two subscriptions are \"equal\" if their query vectors test \"=\".\n(def query->reaction (atom {}))\n\n(defn clear-subscription-cache!\n  \"Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue.\"\n  []\n  (doseq [[k rxn] @query->reaction]\n    (dispose! rxn))\n  (if (not-empty @query->reaction)\n    (console :warn \"Subscription cache should be empty after clearing it.\")))\n\n(defn clear-all-handlers!\n  \"Unregisters all existing subscription handlers\"\n  []\n  (clear-handlers kind)\n  (clear-subscription-cache!))\n\n(defn cache-and-return\n  \"cache the reaction r\"\n  [query-v dynv r]\n  (let [cache-key [query-v dynv]]\n    ;; when this reaction is no longer being used, remove it from the cache\n    (add-on-dispose! r #(trace/with-trace {:operation (first-in-vector query-v)\n                                           :op-type   :sub/dispose\n                                           :tags      {:query-v  query-v\n                                                       :reaction (reagent-id r)}}\n                                          (swap! query->reaction\n                                                 (fn [query-cache]\n                                                   (if (and (contains? query-cache cache-key) (identical? r (get query-cache cache-key)))\n                                                     (dissoc query-cache cache-key)\n                                                     query-cache)))))\n    ;; cache this reaction, so it can be used to deduplicate other, later \"=\" subscriptions\n    (swap! query->reaction (fn [query-cache]\n                             (when debug-enabled?\n                               (when (contains? query-cache cache-key)\n                                 (console :warn \"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\" cache-key)))\n                             (assoc query-cache cache-key r)))\n    (trace/merge-trace! {:tags {:reaction (reagent-id r)}})\n    r)) ;; return the actual reaction\n\n(defn cache-lookup\n  ([query-v]\n   (cache-lookup query-v []))\n  ([query-v dyn-v]\n   (get @query->reaction [query-v dyn-v])))\n\n\n;; -- subscribe ---------------------------------------------------------------\n\n(defn subscribe\n  \"Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \\\"blue\\\" :small])\n    (subscribe [:items {:colour \\\"blue\\\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  \"\n\n  ([query]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query}}\n     (if-let [cached (cache-lookup query)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (cache-and-return query [] (handler-fn app-db query)))))))\n\n  ([query dynv]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query\n                                  :dyn-v   dynv}}\n     (if-let [cached (cache-lookup query dynv)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (when debug-enabled?\n           (when-let [not-reactive (not-empty (remove ratom? dynv))]\n             (console :warn \"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\" not-reactive)))\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (let [dyn-vals (make-reaction (fn [] (mapv deref dynv)))\n                 sub      (make-reaction (fn [] (handler-fn app-db query @dyn-vals)))]\n             ;; handler-fn returns a reaction which is then wrapped in the sub reaction\n             ;; need to double deref it to get to the actual value.\n             ;(console :log \"Subscription created: \" v dynv)\n             (cache-and-return query dynv (make-reaction (fn [] @@sub))))))))))\n\n;; -- reg-sub -----------------------------------------------------------------\n\n(defn- map-vals\n  \"Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\"\n  [f m]\n  (into (empty m)\n        (map (fn [[k v]] [k (f v)]))\n        m))\n\n(defn map-signals\n  \"Runs f over signals. Signals may take several\n  forms, this function handles all of them.\"\n  [f signals]\n  (cond\n    (sequential? signals) (map f signals)\n    (map? signals) (map-vals f signals)\n    (deref? signals) (f signals)\n    :else '()))\n\n(defn to-seq\n  \"Coerces x to a seq if it isn't one already\"\n  [x]\n  (if (sequential? x)\n    x\n    (list x)))\n\n(defn- deref-input-signals\n  [signals query-id]\n  (let [dereffed-signals (map-signals deref signals)]\n    (cond\n      (sequential? signals) (map deref signals)\n      (map? signals) (map-vals deref signals)\n      (deref? signals) (deref signals)\n      :else (console :error \"re-frame: in the reg-sub for\" query-id \", the input-signals function returns:\" signals))\n    (trace/merge-trace! {:tags {:input-signals (doall (to-seq (map-signals reagent-id signals)))}})\n    dereffed-signals))\n\n\n(defn reg-sub\n  \"For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \\\"blue\\\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \\\"blue\\\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \\\"blue\\\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \\\"flow into\\\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  \"\n  [query-id & args]\n  (let [computation-fn (last args)\n        input-args     (butlast args) ;; may be empty, or one signal fn, or pairs of  :<- / vector\n        err-header     (str \"re-frame: reg-sub for \" query-id \", \")\n        inputs-fn      (case (count input-args)\n                         ;; no `inputs` function provided - give the default\n                         0 (fn\n                             ([_] app-db)\n                             ([_ _] app-db))\n\n                         ;; a single `inputs` fn\n                         1 (let [f (first input-args)]\n                             (when-not (fn? f)\n                               (console :error err-header \"2nd argument expected to be an inputs function, got:\" f))\n                             f)\n\n                         ;; one sugar pair\n                         2 (let [[marker vec] input-args]\n                             (when-not (= :<- marker)\n                               (console :error err-header \"expected :<-, got:\" marker))\n                             (fn inp-fn\n                               ([_] (subscribe vec))\n                               ([_ _] (subscribe vec))))\n\n                         ;; multiple sugar pairs\n                         (let [pairs   (partition 2 input-args)\n                               markers (map first pairs)\n                               vecs    (map last pairs)]\n                           (when-not (and (every? #{:<-} markers) (every? vector? vecs))\n                             (console :error err-header \"expected pairs of :<- and vectors, got:\" pairs))\n                           (fn inp-fn\n                             ([_] (map subscribe vecs))\n                             ([_ _] (map subscribe vecs)))))]\n    (register-handler\n      kind\n      query-id\n      (fn subs-handler-fn\n        ([db query-vec]\n         (let [subscriptions (inputs-fn query-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v    query-vec\n                                                                :reaction   @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))\n        ([db query-vec dyn-vec]\n         (let [subscriptions (inputs-fn query-vec dyn-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v   query-vec\n                                                                :dyn-v     dyn-vec\n                                                                :reaction  @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec dyn-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))))))\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/kind","js/Error","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.registrar/kinds","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/query->reaction","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/clear-subscription-cache!","seq__40825","cljs.core/seq","cljs.core/deref","chunk__40826","count__40827","i__40828","vec__40838","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__40841","cljs.core/first","cljs.core/next","k","rxn","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.interop/dispose!","cljs.core/not-empty","day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/clear-all-handlers!","day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/cache-and-return","query-v","dynv","r","cache-key","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.interop/add-on-dispose!","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__40846","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.trace/*current-trace*","*current-trace*-temp-val__40847","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.trace/start-trace","end__40774__auto__","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.interop/now","duration__40775__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.trace/run-tracing-callbacks!","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.utils/first-in-vector","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.interop/reagent-id","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","query-cache","cljs.core/contains?","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.interop/debug-enabled?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","new-trace__40776__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","var_args","G__40863","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/cache-lookup","day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2","dyn-v","G__40890","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/subscribe","query","*current-trace*-orig-val__40891","*current-trace*-temp-val__40892","temp__5733__auto__","cached","day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1","query-id","handler-fn","day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.db/app-db","*current-trace*-orig-val__40895","*current-trace*-temp-val__40896","not-reactive","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.interop/ratom?","dyn-vals","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.interop/make-reaction","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","sub","G__40907","G__40908","G__40909","G__40915","G__40916","G__40917","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/map-vals","f","m","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core/empty","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__40921","vec__40922","v","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/map-signals","signals","cljs.core/sequential?","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/map?","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.interop/deref?","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/to-seq","x","cljs.core/List","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/deref-input-signals","dereffed-signals","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/reg-sub","seq40935","G__40936","self__4717__auto__","args","computation-fn","cljs.core/last","input-args","cljs.core/butlast","err-header","inputs-fn","G__40938","_","cljs.core/fn?","vec__40939","marker","vec","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","day8.re_frame_10x.inlined_deps.re_frame.v0v10v9.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1","pairs","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","markers","vecs","cljs.core/every?","cljs.core/vector?","day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.registrar/register-handler","db","query-vec","subscriptions","reaction-id","reaction","*current-trace*-orig-val__40942","*current-trace*-temp-val__40943","subscription","G__40944","G__40945","G__40946","G__40947","cljs.core/reset!","dyn-vec","*current-trace*-orig-val__40948","*current-trace*-temp-val__40949","G__40950","G__40951","G__40952","G__40953","G__40954","G__40955"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1570928878000,1570928878000,1570498426490,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1H","goog/dom/tagname.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","~$goog.dom.HtmlElement"]]],["^1H","goog/math/math.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","~$goog.array","~$goog.asserts"]]],["^1H","goog/labs/useragent/browser.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^22","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1H","goog/array/array.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^23"]]],["^1U","node_modules/prop-types/checkPropTypes.js"],[1570928878000,1570928878000,1570498426342,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1H","day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/impl/util.cljs"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","~$day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.debug","~$day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.interop","~$clojure.string"]]],["^1U","node_modules/fbjs/lib/emptyFunction.js"],[1570928878000,1570928878000,1570498425786,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z"]]],["^1H","goog/debug/error.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R"]]],["^1U","node_modules/fbjs/lib/emptyObject.js"],[1570928878000,1570928878000,1570498425786,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z"]]],["^1H","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/utils.cljc"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","^V"]]],["^1H","goog/dom/nodetype.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R"]]],["^1H","day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/impl/component.cljs"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","^B","^@","~$day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.util","~$day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.batching","~$day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.ratom","^29","^28"]]],["^1U","node_modules/scheduler/cjs/scheduler.development.js"],[1570928878000,1570928878000,1570498426321,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z"]]],["^1H","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/loggers.cljc"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","~$clojure.set"]]],["^1U","node_modules/scheduler/cjs/scheduler.production.min.js"],[1570928878000,1570928878000,1570498426321,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z"]]],["^1H","day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/core.cljs"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","^@","~$day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.template","~$day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.impl.component","^2;","^2<","^2=","^28","^29","~$day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.dom"]]],["^1H","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/interop.cljs"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","~$goog.async.nextTick","~$day8.re-frame-10x.inlined-deps.reagent.v0v8v1.reagent.core","^2="]]],["^1H","day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/impl/batching.cljs"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","^28","^29","^2;","^2:"]]],["^1U","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1570928878000,1570928878000,1570498426321,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z"]]],["^1U","node_modules/create-react-class/factory.js"],[1570928878000,1570928878000,1570498425731,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^1U","node_modules/react/index.js"],[1570928878000,1570928878000,1570498426305,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1H","shadow/js.js"],[1570928878267,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R"]]],["^1H","goog/object/object.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R"]]],["^1H","day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/impl/template.cljs"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","^@","^2:","~$clojure.walk","^2;","^2@","^2<","^2=","^29","^28"]]],["^1U","node_modules/react-dom/cjs/react-dom.production.min.js"],[1570928878000,1570928878000,1570498426490,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z","^@","^2D","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1570928878000,1556316222000],["^1U","node_modules/react/cjs/react.development.js"],[1570928878000,1570928878000,1570498426305,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z","^2D","~$module$node_modules$prop_types$checkPropTypes"]]],["^1H","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/db.cljc"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","^X"]]],["^1H","goog/math/long.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^23","~$goog.reflect"]]],["^1H","goog/string/internal.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R"]]],["^1U","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1570928878000,1570928878000,1570498426321,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z"]]],["^1H","day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/dom.cljs"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","^D","^2;","^2?","^2<","^2=","^28","^29"]]],["^1U","node_modules/fbjs/lib/warning.js"],[1570928878000,1570928878000,1570498425786,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^1H","goog/functions/functions.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R"]]],["^1H","day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/interop.cljs"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P"]]],["^1H","day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/debug.cljs"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P"]]],["^1H","clojure/walk.cljs"],[1556316222100,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P"]]],["^1H","goog/structs/map.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1U","node_modules/scheduler/index.js"],[1570928878000,1570928878000,1570498426321,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1H","goog/labs/useragent/engine.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^22","^24","~$goog.string"]]],["^1H","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/trace.cljc"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","^X","^V","~$goog.functions"]]],["^1H","goog/asserts/asserts.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1H","goog/uri/uri.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^22","^23","^2T","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1U","node_modules/object-assign/index.js"],[1570928878000,1570928878000,1570498425971,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z"]]],["^1H","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/registrar.cljc"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","^X","^V"]]],["^1H","goog/base.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",[]]],["^1H","goog/structs/structs.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^22","^25"]]],["^1H","clojure/string.cljs"],[1556316222100,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","^2T","~$goog.string.StringBuffer"]]],["^1U","node_modules/create-react-class/index.js"],[1570928878000,1570928878000,1570498425731,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z","^@","~$module$node_modules$create_react_class$factory"]]],["^1U","node_modules/react/cjs/react.production.min.js"],[1570928878000,1570928878000,1570498426305,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z","^2D"]]],["^1H","goog/debug/entrypointregistry.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^23"]]],["^1H","goog/string/string.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^26"]]],["^1H","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","^S","^X","^V","^W","^Q","^U"]]],["^1H","goog/reflect/reflect.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R"]]],["^1H","goog/labs/useragent/util.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^26"]]],["^1H","goog/string/stringbuffer.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R"]]],["^1H","goog/iter/iter.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^22","^23","^2U","~$goog.math"]]],["^1H","goog/async/nexttick.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^2U","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"]]],["^1U","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1570928878000,1570928878000,1570498426342,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z"]]],["^1H","goog/dom/htmlelement.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R"]]],["^1H","cljs/core.cljs"],[1556316222100,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["~$goog.math.Long","~$goog.math.Integer","^2T","^25","^22","~$goog.Uri","^31"]]],["^1H","goog/math/integer.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R"]]],["^1H","day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/ratom.cljs"],[1573417072187,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P","^2;","^28","^2<","^2>"]]],["^1U","node_modules/scheduler/tracing.js"],[1570928878000,1570928878000,1570498426321,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^1U","node_modules/react-dom/cjs/react-dom.development.js"],[1570928878000,1570928878000,1570498426490,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z","^@","^2D","^2M","^2K","~$module$node_modules$scheduler$tracing"]]],["^1H","clojure/set.cljs"],[1556316222100,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^P"]]],["^1H","goog/uri/utils.js"],[1559507890775,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^R","^22","^23","^2T"]]],["^1U","node_modules/fbjs/lib/invariant.js"],[1570928878000,1570928878000,1570498425786,"^1V",["^ ","^1W",null,"^1X",["^I",[]],"^1Y",["^1Z"]]]]],"~:clj-info",["^ ","jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1556141640000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/day8/re-frame/re-frame-10x/0.4.5/re-frame-10x-0.4.5.jar!/day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/trace.cljc",1573417072000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/day8/re-frame/re-frame-10x/0.4.5/re-frame-10x-0.4.5.jar!/day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/ratom.clj",1573417072000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/day8/re-frame/re-frame-10x/0.4.5/re-frame-10x-0.4.5.jar!/day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/interop.clj",1573417072000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/day8/re-frame/re-frame-10x/0.4.5/re-frame-10x-0.4.5.jar!/day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/core.clj",1573417072000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/day8/re-frame/re-frame-10x/0.4.5/re-frame-10x-0.4.5.jar!/day8/re_frame_10x/inlined_deps/reagent/v0v8v1/reagent/debug.clj",1573417072000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1556312825000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/day8/re-frame/re-frame-10x/0.4.5/re-frame-10x-0.4.5.jar!/day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/interop.clj",1573417072000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",1,"^8",33,"^9",1,"^:",94,"^;",true],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^N",null,"^O",["^ ","^P","^P","^Q","^Q","^R","^R","^S","^S","^T","^U","^V","^V","^U","^U","^W","^W","^X","^X"],"^Y",["^I",["^Z"]],"~:shadow/js-access-global",["^I",["Error"]],"^[",["^ ","^10","^X","^11","^V","^12","^S","^13","^X","^14","^X","^15","^X","^16","^Q","^17","^W","^18","^X","^19","^X","^1:","^X","^1;","^Q","^1<","^Q"],"~:defs",["^ ","~$to-seq",["^ ","~:protocol-inline",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",181,"^8",7,"^9",181,"^:",13,"~:arglists",["^1?",["~$quote",["^1?",[["~$x"]]]]],"~:doc","Coerces x to a seq if it isn't one already"],"^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/to-seq","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^:",13,"~:method-params",["^1?",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^1?",[null,null]],"^8",1,"~:variadic?",false,"^7",181,"~:ret-tag","~$clj","^9",181,"~:max-fixed-arity",1,"~:fn-var",true,"^47",["^1?",["^48",["^1?",[["~$x"]]]]],"^49","Coerces x to a seq if it isn't one already"],"~$cache-and-return",["^ ","^46",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",42,"^8",7,"^9",42,"^:",23,"^47",["^1?",["^48",["^1?",[["~$query-v","~$dynv","~$r"]]]]],"^49","cache the reaction r"],"^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/cache-and-return","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^:",23,"^4;",["^1?",[["^4D","^4E","~$r"]]],"^4<",null,"^4=",["^1?",[null,null]],"^8",1,"^4>",false,"^7",42,"^9",42,"^4A",3,"^4B",true,"^47",["^1?",["^48",["^1?",[["^4D","^4E","~$r"]]]]],"^49","cache the reaction r"],"~$deref-input-signals",["^ ","^46",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",188,"^8",8,"^9",188,"^:",27,"~:private",true,"^47",["^1?",["^48",["^1?",[["~$signals","~$query-id"]]]]]],"^4H",true,"^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/deref-input-signals","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^:",27,"^4;",["^1?",[["^4I","^4J"]]],"^4<",null,"^4=",["^1?",[null,null]],"^8",1,"^4>",false,"^7",188,"^4?",["^I",["^4@","~$cljs.core/IList","~$any","~$cljs.core/LazySeq"]],"^9",188,"^4A",2,"^4B",true,"^47",["^1?",["^48",["^1?",[["^4I","^4J"]]]]]],"~$subscribe",["^ ","^46",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",74,"^8",7,"^9",74,"^:",16,"^47",["^1?",["^48",["^1?",[["~$query"],["^4P","^4E"]]]]],"^49","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  ","~:top-fn",["^ ","^4>",false,"~:fixed-arity",2,"^4A",2,"^4;",["^1?",[["^4P"],["^4P","^4E"]]],"^47",["^1?",[["^4P"],["^4P","^4E"]]],"^4=",["^1?",[null,null]]]],"^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/subscribe","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^:",16,"^4Q",["^ ","^4>",false,"^4R",2,"^4A",2,"^4;",["^1?",[["^4P"],["^4P","^4E"]]],"^47",["^1?",[["^4P"],["^4P","^4E"]]],"^4=",["^1?",[null,null]]],"^4;",["^1?",[["^4P"],["^4P","^4E"]]],"^4<",null,"^4R",2,"^4=",["^1?",[null,null]],"^8",1,"^4>",false,"~:methods",[["^ ","^4R",1,"^4>",false,"~:tag",["^I",[null,"^4M"]]],["^ ","^4R",2,"^4>",false,"^4U",["^I",[null,"^4M"]]]],"^7",74,"^9",74,"^4A",2,"^4B",true,"^47",["^1?",[["^4P"],["^4P","^4E"]]],"^49","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  "],"~$reg-sub",["^ ","^46",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",200,"^8",7,"^9",200,"^:",14,"^47",["^1?",["^48",["^1?",[["^4J","~$&","~$args"]]]]],"^49","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \"flow into\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  ","^4Q",["^ ","^4>",true,"^4R",1,"^4A",1,"^4;",[["^1?",["^4J","^4W"]]],"^47",["^1?",[["^4J","~$&","^4W"]]],"^4=",["^1?",[null]]]],"^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/reg-sub","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^:",14,"^4Q",["^ ","^4>",true,"^4R",1,"^4A",1,"^4;",[["^1?",["^4J","^4W"]]],"^47",["^1?",[["^4J","~$&","^4W"]]],"^4=",["^1?",[null]]],"^4;",[["^1?",["^4J","^4W"]]],"^4<",null,"^4R",1,"^4=",["^1?",[null]],"^8",1,"^4>",true,"^4T",[["^ ","^4R",1,"^4>",true,"^4U","^4M"]],"^7",200,"^4?","^4M","^9",200,"^4A",1,"^4B",true,"^47",["^1?",[["^4J","~$&","^4W"]]],"^49","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \"flow into\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  "],"~$query->reaction",["^ ","^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/query->reaction","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",18,"^8",1,"^9",18,"^:",21,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",18,"^8",6,"^9",18,"^:",21],"^4U","~$cljs.core/Atom"],"~$clear-all-handlers!",["^ ","^46",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",36,"^8",7,"^9",36,"^:",26,"^47",["^1?",["^48",["^1?",[[]]]]],"^49","Unregisters all existing subscription handlers"],"^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/clear-all-handlers!","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^:",26,"^4;",["^1?",[[]]],"^4<",null,"^4=",["^1?",[null,null]],"^8",1,"^4>",false,"^7",36,"^4?",["^I",["^4M","~$clj-nil"]],"^9",36,"^4A",0,"^4B",true,"^47",["^1?",["^48",["^1?",[[]]]]],"^49","Unregisters all existing subscription handlers"],"~$cache-lookup",["^ ","^46",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",65,"^8",7,"^9",65,"^:",19,"^47",["^1?",["^48",["^1?",[["^4D"],["^4D","~$dyn-v"]]]]],"^4Q",["^ ","^4>",false,"^4R",2,"^4A",2,"^4;",["^1?",[["^4D"],["^4D","^54"]]],"^47",["^1?",[["^4D"],["^4D","^54"]]],"^4=",["^1?",[null,null]]]],"^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/cache-lookup","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^:",19,"^4Q",["^ ","^4>",false,"^4R",2,"^4A",2,"^4;",["^1?",[["^4D"],["^4D","^54"]]],"^47",["^1?",[["^4D"],["^4D","^54"]]],"^4=",["^1?",[null,null]]],"^4;",["^1?",[["^4D"],["^4D","^54"]]],"^4<",null,"^4R",2,"^4=",["^1?",[null,null]],"^8",1,"^4>",false,"^4T",[["^ ","^4R",1,"^4>",false,"^4U","^4M"],["^ ","^4R",2,"^4>",false,"^4U",["^I",["^4M","^52"]]]],"^7",65,"^9",65,"^4A",2,"^4B",true,"^47",["^1?",[["^4D"],["^4D","^54"]]]],"~$map-vals",["^ ","^46",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",163,"^8",8,"^9",163,"^:",16,"^4H",true,"^47",["^1?",["^48",["^1?",[["~$f","~$m"]]]]],"^49","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"^4H",true,"^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/map-vals","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^:",16,"^4;",["^1?",[["~$f","~$m"]]],"^4<",null,"^4=",["^1?",[null,null]],"^8",1,"^4>",false,"^7",163,"^4?",["^I",["^4@","^4M"]],"^9",163,"^4A",2,"^4B",true,"^47",["^1?",["^48",["^1?",[["~$f","~$m"]]]]],"^49","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"~$kind",["^ ","^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/kind","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",10,"^8",1,"^9",10,"^:",10,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",10,"^8",6,"^9",10,"^:",10],"^4U","~$cljs.core/Keyword"],"~$clear-subscription-cache!",["^ ","^46",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",20,"^8",7,"^9",20,"^:",32,"^47",["^1?",["^48",["^1?",[[]]]]],"^49","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/clear-subscription-cache!","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^:",32,"^4;",["^1?",[[]]],"^4<",null,"^4=",["^1?",[null,null]],"^8",1,"^4>",false,"^7",20,"^4?",["^I",["^4M","^52"]],"^9",20,"^4A",0,"^4B",true,"^47",["^1?",["^48",["^1?",[[]]]]],"^49","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"~$map-signals",["^ ","^46",null,"^5",["^ ","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^7",171,"^8",7,"^9",171,"^:",18,"^47",["^1?",["^48",["^1?",[["~$f","^4I"]]]]],"^49","Runs f over signals. Signals may take several\n  forms, this function handles all of them."],"^J","~$day8.re-frame-10x.inlined-deps.re-frame.v0v10v9.re-frame.subs/map-signals","^6","day8/re_frame_10x/inlined_deps/re_frame/v0v10v9/re_frame/subs.cljc","^:",18,"^4;",["^1?",[["~$f","^4I"]]],"^4<",null,"^4=",["^1?",[null,null]],"^8",1,"^4>",false,"^7",171,"^4?",["^I",["^4@","^4L","^4M","^4N"]],"^9",171,"^4A",2,"^4B",true,"^47",["^1?",["^48",["^1?",[["~$f","^4I"]]]]],"^49","Runs f over signals. Signals may take several\n  forms, this function handles all of them."]],"^1=",["^ ","^U","^U","^T","^U","^P","^P"],"~:cljs.analyzer/constants",["^ ","^Y",["^I",["~:dyn-v","~:tags","~:sub/run","~:else","~:<-","~:sub","~:sub/create","~:warn","~:value","~:operation","~:start","~:duration","~:query-v","~:cached?","~:sub/dispose","~:error","~:input-signals","~:end","~:reaction","~:op-type"]],"~:order",["^5E","^5G","^5I","^5S","^5A","^5N","^5L","^5R","^5J","^5K","^5Q","^5F","^5M","^5O","^5@","^5C","^5P","^5D","^5B","^5H"]],"^1D",["^ ","^Z",["^I",[]]],"^1E",["^ "],"^1F",["^R","^P","^S","^X","^V","^W","^Q","^U"]],"^M","^K","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1T",[["^5W","~:static-fns"],true,["^5W","~:elide-asserts"],false,["^5W","~:optimize-constants"],null,["^5W","^1K"],null,["^5W","~:external-config"],null,["^5W","~:tooling-config"],null,["^5W","~:emit-constants"],null,["^5W","~:load-tests"],null,["^5W","~:form-size-threshold"],null,["^5W","~:infer-externs"],true,["^5W","^1M"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5W","~:fn-invoke-direct"],null,["^5W","~:source-map"],"/dev/null"]]]