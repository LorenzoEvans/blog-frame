["^ ","~:output",["^ ","~:js","goog.provide('re_frame.subs');\ngoog.require('cljs.core');\ngoog.require('re_frame.db');\ngoog.require('re_frame.interop');\ngoog.require('re_frame.loggers');\ngoog.require('re_frame.utils');\ngoog.require('re_frame.registrar');\ngoog.require('re_frame.trace');\nre_frame.subs.kind = new cljs.core.Keyword(null,\"sub\",\"sub\",-2093760025);\nif(cljs.core.truth_((re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1 ? re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1(re_frame.subs.kind) : re_frame.registrar.kinds.call(null,re_frame.subs.kind)))){\n} else {\nthrow (new Error(\"Assert failed: (re-frame.registrar/kinds kind)\"));\n}\nre_frame.subs.query__GT_reaction = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n/**\n * Causes all subscriptions to be removed from the cache.\n *   Does this by:\n *   1. running `on-dispose` on all cached subscriptions\n *   2. Each `on-dispose` will perform the removal of themselves.\n * \n *   This is for development time use. Useful when reloading Figwheel code\n *   after a React exception, because React components won't have been\n *   cleaned up properly. And this, in turn, means the subscriptions within those\n *   components won't have been cleaned up correctly. So this forces the issue.\n */\nre_frame.subs.clear_subscription_cache_BANG_ = (function re_frame$subs$clear_subscription_cache_BANG_(){\nvar seq__43212_43337 = cljs.core.seq(cljs.core.deref(re_frame.subs.query__GT_reaction));\nvar chunk__43213_43338 = null;\nvar count__43214_43339 = (0);\nvar i__43215_43340 = (0);\nwhile(true){\nif((i__43215_43340 < count__43214_43339)){\nvar vec__43227_43341 = chunk__43213_43338.cljs$core$IIndexed$_nth$arity$2(null,i__43215_43340);\nvar k_43342 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43227_43341,(0),null);\nvar rxn_43343 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43227_43341,(1),null);\nre_frame.interop.dispose_BANG_(rxn_43343);\n\n\nvar G__43344 = seq__43212_43337;\nvar G__43345 = chunk__43213_43338;\nvar G__43346 = count__43214_43339;\nvar G__43347 = (i__43215_43340 + (1));\nseq__43212_43337 = G__43344;\nchunk__43213_43338 = G__43345;\ncount__43214_43339 = G__43346;\ni__43215_43340 = G__43347;\ncontinue;\n} else {\nvar temp__5735__auto___43348 = cljs.core.seq(seq__43212_43337);\nif(temp__5735__auto___43348){\nvar seq__43212_43349__$1 = temp__5735__auto___43348;\nif(cljs.core.chunked_seq_QMARK_(seq__43212_43349__$1)){\nvar c__4550__auto___43350 = cljs.core.chunk_first(seq__43212_43349__$1);\nvar G__43351 = cljs.core.chunk_rest(seq__43212_43349__$1);\nvar G__43352 = c__4550__auto___43350;\nvar G__43353 = cljs.core.count(c__4550__auto___43350);\nvar G__43354 = (0);\nseq__43212_43337 = G__43351;\nchunk__43213_43338 = G__43352;\ncount__43214_43339 = G__43353;\ni__43215_43340 = G__43354;\ncontinue;\n} else {\nvar vec__43230_43355 = cljs.core.first(seq__43212_43349__$1);\nvar k_43356 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43230_43355,(0),null);\nvar rxn_43357 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43230_43355,(1),null);\nre_frame.interop.dispose_BANG_(rxn_43357);\n\n\nvar G__43358 = cljs.core.next(seq__43212_43349__$1);\nvar G__43359 = null;\nvar G__43360 = (0);\nvar G__43361 = (0);\nseq__43212_43337 = G__43358;\nchunk__43213_43338 = G__43359;\ncount__43214_43339 = G__43360;\ni__43215_43340 = G__43361;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(cljs.core.not_empty(cljs.core.deref(re_frame.subs.query__GT_reaction)))){\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Subscription cache should be empty after clearing it.\"], 0));\n} else {\nreturn null;\n}\n});\n/**\n * Unregisters all existing subscription handlers\n */\nre_frame.subs.clear_all_handlers_BANG_ = (function re_frame$subs$clear_all_handlers_BANG_(){\nre_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(re_frame.subs.kind);\n\nreturn re_frame.subs.clear_subscription_cache_BANG_();\n});\n/**\n * cache the reaction r\n */\nre_frame.subs.cache_and_return = (function re_frame$subs$cache_and_return(query_v,dynv,r){\nvar cache_key = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dynv], null);\nre_frame.interop.add_on_dispose_BANG_(r,((function (cache_key){\nreturn (function (){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__43240 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__43241 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query_v),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"dispose\",\"sub/dispose\",365440536),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_v,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(r)], null)], null));\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__43241;\n\ntry{try{return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(re_frame.subs.query__GT_reaction,((function (_STAR_current_trace_STAR__orig_val__43240,_STAR_current_trace_STAR__temp_val__43241,cache_key){\nreturn (function (query_cache){\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\n} else {\nreturn query_cache;\n}\n});})(_STAR_current_trace_STAR__orig_val__43240,_STAR_current_trace_STAR__temp_val__43241,cache_key))\n);\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__43154__auto___43362 = re_frame.interop.now();\nvar duration__43155__auto___43363 = (end__43154__auto___43362 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__43155__auto___43363,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__43154__auto___43362);\n} else {\n}\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__43240;\n}} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(re_frame.subs.query__GT_reaction,((function (cache_key){\nreturn (function (query_cache){\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\n} else {\nreturn query_cache;\n}\n});})(cache_key))\n);\n}\n});})(cache_key))\n);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(re_frame.subs.query__GT_reaction,((function (cache_key){\nreturn (function (query_cache){\nif(re_frame.interop.debug_enabled_QMARK_){\nif(cljs.core.contains_QMARK_(query_cache,cache_key)){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\",cache_key], 0));\n} else {\n}\n} else {\n}\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(query_cache,cache_key,r);\n});})(cache_key))\n);\n\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43364 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(r)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(r)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43364;\n\n} else {\n}\n\nreturn r;\n});\nre_frame.subs.cache_lookup = (function re_frame$subs$cache_lookup(var_args){\nvar G__43258 = arguments.length;\nswitch (G__43258) {\ncase 1:\nreturn re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1 = (function (query_v){\nreturn re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query_v,cljs.core.PersistentVector.EMPTY);\n});\n\nre_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2 = (function (query_v,dyn_v){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(re_frame.subs.query__GT_reaction),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dyn_v], null));\n});\n\nre_frame.subs.cache_lookup.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a `query`, returns a Reagent `reaction` which, over\n *   time, reactively delivers a stream of values. So in FRP-ish terms,\n *   it returns a `Signal`.\n * \n *   To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n * \n *   `query` is a vector of at least one element. The first element is the\n *   `query-id`, typically a namespaced keyword. The rest of the vector's\n *   elements are optional, additional values which parameterise the query\n *   performed.\n * \n *   `dynv` is an optional 3rd argument, which is a vector of further input\n *   signals (atoms, reactions, etc), NOT values. This argument exists for\n *   historical reasons and is borderline deprecated these days.\n * \n *   Example Usage:\n *   --------------\n * \n *  (subscribe [:items])\n *  (subscribe [:items \"blue\" :small])\n *  (subscribe [:items {:colour \"blue\"  :size :small}])\n * \n *   Note: for any given call to `subscribe` there must have been a previous call\n *   to `reg-sub`, registering the query handler (function) for the `query-id` given.\n * \n *   Hint\n *   ----\n * \n *   When used in a view function BE SURE to `deref` the returned value.\n *   In fact, to avoid any mistakes, some prefer to define:\n * \n *   (def <sub  (comp deref re-frame.core/subscribe))\n * \n *   And then, within their views, they call  `(<sub [:items :small])` rather\n *   than using `subscribe` directly.\n * \n *   De-duplication\n *   --------------\n * \n *   XXX\n *   \n */\nre_frame.subs.subscribe = (function re_frame$subs$subscribe(var_args){\nvar G__43266 = arguments.length;\nswitch (G__43266) {\ncase 1:\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1 = (function (query){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__43267 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__43268 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query], null)], null));\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__43268;\n\ntry{try{var temp__5733__auto__ = re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43367 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43367;\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = re_frame.utils.first_in_vector(query);\nvar handler_fn = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(re_frame.subs.kind,query_id);\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43368 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43368;\n\n} else {\n}\n\nif((handler_fn == null)){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43369 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43369;\n\n} else {\n}\n\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nreturn re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(re_frame.db.app_db,query) : handler_fn.call(null,re_frame.db.app_db,query)));\n}\n}\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__43154__auto___43370 = re_frame.interop.now();\nvar duration__43155__auto___43371 = (end__43154__auto___43370 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__43155__auto___43371,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__43154__auto___43370);\n} else {\n}\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__43267;\n}} else {\nvar temp__5733__auto__ = re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43372 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43372;\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = re_frame.utils.first_in_vector(query);\nvar handler_fn = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(re_frame.subs.kind,query_id);\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43373 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43373;\n\n} else {\n}\n\nif((handler_fn == null)){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43374 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43374;\n\n} else {\n}\n\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nreturn re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(re_frame.db.app_db,query) : handler_fn.call(null,re_frame.db.app_db,query)));\n}\n}\n}\n});\n\nre_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2 = (function (query,dynv){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__43275 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__43276 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dynv], null)], null));\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__43276;\n\ntry{try{var temp__5733__auto__ = re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43375 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43375;\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = re_frame.utils.first_in_vector(query);\nvar handler_fn = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(re_frame.subs.kind,query_id);\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43376 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43376;\n\n} else {\n}\n\nif(re_frame.interop.debug_enabled_QMARK_){\nvar temp__5735__auto___43379 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(re_frame.interop.ratom_QMARK_,dynv));\nif(cljs.core.truth_(temp__5735__auto___43379)){\nvar not_reactive_43380 = temp__5735__auto___43379;\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_43380], 0));\n} else {\n}\n} else {\n}\n\nif((handler_fn == null)){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43381 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43381;\n\n} else {\n}\n\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nvar dyn_vals = re_frame.interop.make_reaction(((function (query_id,handler_fn,temp__5733__auto__,_STAR_current_trace_STAR__orig_val__43275,_STAR_current_trace_STAR__temp_val__43276){\nreturn (function (){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\n});})(query_id,handler_fn,temp__5733__auto__,_STAR_current_trace_STAR__orig_val__43275,_STAR_current_trace_STAR__temp_val__43276))\n);\nvar sub = re_frame.interop.make_reaction(((function (dyn_vals,query_id,handler_fn,temp__5733__auto__,_STAR_current_trace_STAR__orig_val__43275,_STAR_current_trace_STAR__temp_val__43276){\nreturn (function (){\nvar G__43280 = re_frame.db.app_db;\nvar G__43281 = query;\nvar G__43282 = cljs.core.deref(dyn_vals);\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__43280,G__43281,G__43282) : handler_fn.call(null,G__43280,G__43281,G__43282));\n});})(dyn_vals,query_id,handler_fn,temp__5733__auto__,_STAR_current_trace_STAR__orig_val__43275,_STAR_current_trace_STAR__temp_val__43276))\n);\nreturn re_frame.subs.cache_and_return(query,dynv,re_frame.interop.make_reaction(((function (dyn_vals,sub,query_id,handler_fn,temp__5733__auto__,_STAR_current_trace_STAR__orig_val__43275,_STAR_current_trace_STAR__temp_val__43276){\nreturn (function (){\nreturn cljs.core.deref(cljs.core.deref(sub));\n});})(dyn_vals,sub,query_id,handler_fn,temp__5733__auto__,_STAR_current_trace_STAR__orig_val__43275,_STAR_current_trace_STAR__temp_val__43276))\n));\n}\n}\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__43154__auto___43382 = re_frame.interop.now();\nvar duration__43155__auto___43383 = (end__43154__auto___43382 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__43155__auto___43383,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__43154__auto___43382);\n} else {\n}\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__43275;\n}} else {\nvar temp__5733__auto__ = re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar cached = temp__5733__auto__;\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43385 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43385;\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = re_frame.utils.first_in_vector(query);\nvar handler_fn = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(re_frame.subs.kind,query_id);\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43387 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43387;\n\n} else {\n}\n\nif(re_frame.interop.debug_enabled_QMARK_){\nvar temp__5735__auto___43394 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(re_frame.interop.ratom_QMARK_,dynv));\nif(cljs.core.truth_(temp__5735__auto___43394)){\nvar not_reactive_43395 = temp__5735__auto___43394;\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_43395], 0));\n} else {\n}\n} else {\n}\n\nif((handler_fn == null)){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43396 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43396;\n\n} else {\n}\n\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nvar dyn_vals = re_frame.interop.make_reaction(((function (query_id,handler_fn,temp__5733__auto__){\nreturn (function (){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\n});})(query_id,handler_fn,temp__5733__auto__))\n);\nvar sub = re_frame.interop.make_reaction(((function (dyn_vals,query_id,handler_fn,temp__5733__auto__){\nreturn (function (){\nvar G__43286 = re_frame.db.app_db;\nvar G__43287 = query;\nvar G__43288 = cljs.core.deref(dyn_vals);\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__43286,G__43287,G__43288) : handler_fn.call(null,G__43286,G__43287,G__43288));\n});})(dyn_vals,query_id,handler_fn,temp__5733__auto__))\n);\nreturn re_frame.subs.cache_and_return(query,dynv,re_frame.interop.make_reaction(((function (dyn_vals,sub,query_id,handler_fn,temp__5733__auto__){\nreturn (function (){\nreturn cljs.core.deref(cljs.core.deref(sub));\n});})(dyn_vals,sub,query_id,handler_fn,temp__5733__auto__))\n));\n}\n}\n}\n});\n\nre_frame.subs.subscribe.cljs$lang$maxFixedArity = 2;\n\n/**\n * Returns a new version of 'm' in which 'f' has been applied to each value.\n *   (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\n */\nre_frame.subs.map_vals = (function re_frame$subs$map_vals(f,m){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.empty(m),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__43297){\nvar vec__43298 = p__43297;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43298,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43298,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(v) : f.call(null,v))], null);\n})),m);\n});\n/**\n * Runs f over signals. Signals may take several\n *   forms, this function handles all of them.\n */\nre_frame.subs.map_signals = (function re_frame$subs$map_signals(f,signals){\nif(cljs.core.sequential_QMARK_(signals)){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(f,signals);\n} else {\nif(cljs.core.map_QMARK_(signals)){\nreturn re_frame.subs.map_vals(f,signals);\n} else {\nif(re_frame.interop.deref_QMARK_(signals)){\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(signals) : f.call(null,signals));\n} else {\nreturn cljs.core.List.EMPTY;\n\n}\n}\n}\n});\n/**\n * Coerces x to a seq if it isn't one already\n */\nre_frame.subs.to_seq = (function re_frame$subs$to_seq(x){\nif(cljs.core.sequential_QMARK_(x)){\nreturn x;\n} else {\nreturn (new cljs.core.List(null,x,null,(1),null));\n}\n});\nre_frame.subs.deref_input_signals = (function re_frame$subs$deref_input_signals(signals,query_id){\nvar dereffed_signals = re_frame.subs.map_signals(cljs.core.deref,signals);\nif(cljs.core.sequential_QMARK_(signals)){\ncljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,signals);\n} else {\nif(cljs.core.map_QMARK_(signals)){\nre_frame.subs.map_vals(cljs.core.deref,signals);\n} else {\nif(re_frame.interop.deref_QMARK_(signals)){\ncljs.core.deref(signals);\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: in the reg-sub for\",query_id,\", the input-signals function returns:\",signals], 0));\n\n}\n}\n}\n\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43397 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(re_frame.subs.to_seq(re_frame.subs.map_signals(re_frame.interop.reagent_id,signals)))], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(re_frame.subs.to_seq(re_frame.subs.map_signals(re_frame.interop.reagent_id,signals)))], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43397;\n\n} else {\n}\n\nreturn dereffed_signals;\n});\n/**\n * For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n *   \n *   During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n *   will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n *   needs to know how to create the node.   By calling `reg-sub`, you are registering \n *   'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n * \n *   Repeating: calling `reg-sub` does not create a node. It only creates the template\n *   from which nodes can be created later. \n *   \n *   `reg-sub` arguments are:  \n *  - a `query-id` (typically a namespaced keyword)\n *  - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n *  - a function which computes the value of this kind of node \n * \n *   The `computation function` is always the last argument supplied and it is expected to have the signature: \n *  `(input-values, query-vector) -> a-value`\n *   \n *   When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n *   the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n *   then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n * \n *   The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n *   but whatever is there defines the `input signals` part of the template, controlling what input \n *  values \"flow into\" the `computation function` gets when it is called. \n * \n *   `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n *   But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n *   two are really just sugary variations. \n * \n *   1. No input signals given:\n *    ```clj\n *   (reg-sub\n *     :query-id\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n * \n *   In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n *   and, as a result, the value within `app-db` (a map) is\n *   is given as the 1st argument when `a-computation-fn` is called.   \n *  \n * \n *   2. A signal function is explicitly supplied:\n *   ```clj\n *   (reg-sub\n *     :query-id\n *     signal-fn     ;; <-- here\n *     computation-fn)\n *   ```\n *   \n *   This is the most canonical and instructive of the three variations.\n *   \n *   When a node is created from the template, the `signal-fn` will be called and it\n *   is expected to return the input signal(s) as either a singleton, if there is only\n *   one, or a sequence if there are many, or a map with the signals as the values.\n * \n *   The values from returned nominated signals will be supplied as the 1st argument to  \n *   the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n *   this value will be either a singleton, sequence or map of them (paralleling\n *   the structure returned by the `signal-fn`).\n * \n *   This example `signal-fn` returns a vector of input signals.\n *     ```clj\n *     (fn [query-vec dynamic-vec]\n *       [(subscribe [:a-sub])\n *        (subscribe [:b-sub])])\n *     ```\n *   The associated computation function must be written\n *   to expect a vector of values for its first argument:\n *     ```clj\n *     (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n *       ....)\n *      ```\n * \n *   If, on the other hand, the signal function was simpler and returned a singleton, like this:\n *      ```clj\n *      (fn [query-vec dynamic-vec]\n *        (subscribe [:a-sub]))\n *      ```\n *   then the associated computation function must be written to expect a single value\n *   as the 1st argument:\n *      ```clj\n *      (fn [a query-vec]       ;; 1st argument is a single value\n *        ...)\n *      ```\n *  \n *   Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n *     ```clj\n *   (reg-sub\n *     :query-id\n *     a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n *   is the equivalent of using this\n *   2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n *   ```clj\n *   (reg-sub\n *     :query-id\n *     (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n *     a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n *   ```\n *  \n *   3. Syntax Sugar\n * \n *   ```clj\n *   (reg-sub\n *     :a-b-sub\n *     :<- [:a-sub]\n *     :<- [:b-sub]\n *     (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n *       {:a a :b b}))\n *   ```\n * \n *   This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n *   `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n * \n *   If you supply only one pair a singleton will be supplied to the computation function, \n *   as if you had supplied a `signal-fn` returning only a single value:\n * \n *   ```clj\n *   (reg-sub\n *     :a-sub\n *     :<- [:a-sub]\n *     (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n *       ...))\n *   ```\n * \n *   For further understanding, read `/docs`, and look at the detailed comments in\n *   /examples/todomvc/src/subs.cljs\n *   \n */\nre_frame.subs.reg_sub = (function re_frame$subs$reg_sub(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___43402 = arguments.length;\nvar i__4731__auto___43403 = (0);\nwhile(true){\nif((i__4731__auto___43403 < len__4730__auto___43402)){\nargs__4736__auto__.push((arguments[i__4731__auto___43403]));\n\nvar G__43404 = (i__4731__auto___43403 + (1));\ni__4731__auto___43403 = G__43404;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn re_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nre_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic = (function (query_id,args){\nvar computation_fn = cljs.core.last(args);\nvar input_args = cljs.core.butlast(args);\nvar err_header = [\"re-frame: reg-sub for \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\", \"].join('');\nvar inputs_fn = (function (){var G__43316 = cljs.core.count(input_args);\nswitch (G__43316) {\ncase (0):\nreturn ((function (G__43316,computation_fn,input_args,err_header){\nreturn (function() {\nvar G__43407 = null;\nvar G__43407__1 = (function (_){\nreturn re_frame.db.app_db;\n});\nvar G__43407__2 = (function (_,___$1){\nreturn re_frame.db.app_db;\n});\nG__43407 = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn G__43407__1.call(this,_);\ncase 2:\nreturn G__43407__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__43407.cljs$core$IFn$_invoke$arity$1 = G__43407__1;\nG__43407.cljs$core$IFn$_invoke$arity$2 = G__43407__2;\nreturn G__43407;\n})()\n;})(G__43316,computation_fn,input_args,err_header))\n\nbreak;\ncase (1):\nvar f = cljs.core.first(input_args);\nif(cljs.core.fn_QMARK_(f)){\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"2nd argument expected to be an inputs function, got:\",f], 0));\n}\n\nreturn f;\n\nbreak;\ncase (2):\nvar vec__43319 = input_args;\nvar marker = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43319,(0),null);\nvar vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43319,(1),null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),marker)){\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected :<-, got:\",marker], 0));\n}\n\nreturn ((function (vec__43319,marker,vec,G__43316,computation_fn,input_args,err_header){\nreturn (function() {\nvar re_frame$subs$inp_fn = null;\nvar re_frame$subs$inp_fn__1 = (function (_){\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\n});\nvar re_frame$subs$inp_fn__2 = (function (_,___$1){\nreturn re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\n});\nre_frame$subs$inp_fn = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn re_frame$subs$inp_fn__1.call(this,_);\ncase 2:\nreturn re_frame$subs$inp_fn__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nre_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = re_frame$subs$inp_fn__1;\nre_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = re_frame$subs$inp_fn__2;\nreturn re_frame$subs$inp_fn;\n})()\n;})(vec__43319,marker,vec,G__43316,computation_fn,input_args,err_header))\n\nbreak;\ndefault:\nvar pairs = cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),input_args);\nvar markers = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,pairs);\nvar vecs = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.last,pairs);\nif(((cljs.core.every_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),null], null), null),markers)) && (cljs.core.every_QMARK_(cljs.core.vector_QMARK_,vecs)))){\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected pairs of :<- and vectors, got:\",pairs], 0));\n}\n\nreturn ((function (pairs,markers,vecs,G__43316,computation_fn,input_args,err_header){\nreturn (function() {\nvar re_frame$subs$inp_fn = null;\nvar re_frame$subs$inp_fn__1 = (function (_){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(re_frame.subs.subscribe,vecs);\n});\nvar re_frame$subs$inp_fn__2 = (function (_,___$1){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(re_frame.subs.subscribe,vecs);\n});\nre_frame$subs$inp_fn = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn re_frame$subs$inp_fn__1.call(this,_);\ncase 2:\nreturn re_frame$subs$inp_fn__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nre_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = re_frame$subs$inp_fn__1;\nre_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = re_frame$subs$inp_fn__2;\nreturn re_frame$subs$inp_fn;\n})()\n;})(pairs,markers,vecs,G__43316,computation_fn,input_args,err_header))\n\n}\n})();\nreturn re_frame.registrar.register_handler(re_frame.subs.kind,query_id,((function (computation_fn,input_args,err_header,inputs_fn){\nreturn (function() {\nvar re_frame$subs$subs_handler_fn = null;\nvar re_frame$subs$subs_handler_fn__2 = (function (db,query_vec){\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$1 ? inputs_fn.cljs$core$IFn$_invoke$arity$1(query_vec) : inputs_fn.call(null,query_vec));\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nvar reaction = re_frame.interop.make_reaction(((function (subscriptions,reaction_id,computation_fn,input_args,err_header,inputs_fn){\nreturn (function (){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__43323 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__43324 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__43324;\n\ntry{try{var subscription = (function (){var G__43325 = re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__43326 = query_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__43325,G__43326) : computation_fn.call(null,G__43325,G__43326));\n})();\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43413 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43413;\n\n} else {\n}\n\nreturn subscription;\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__43154__auto___43414 = re_frame.interop.now();\nvar duration__43155__auto___43415 = (end__43154__auto___43414 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__43155__auto___43415,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__43154__auto___43414);\n} else {\n}\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__43323;\n}} else {\nvar subscription = (function (){var G__43327 = re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__43328 = query_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__43327,G__43328) : computation_fn.call(null,G__43327,G__43328));\n})();\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43416 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43416;\n\n} else {\n}\n\nreturn subscription;\n}\n});})(subscriptions,reaction_id,computation_fn,input_args,err_header,inputs_fn))\n);\ncljs.core.reset_BANG_(reaction_id,re_frame.interop.reagent_id(reaction));\n\nreturn reaction;\n});\nvar re_frame$subs$subs_handler_fn__3 = (function (db,query_vec,dyn_vec){\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$2 ? inputs_fn.cljs$core$IFn$_invoke$arity$2(query_vec,dyn_vec) : inputs_fn.call(null,query_vec,dyn_vec));\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nvar reaction = re_frame.interop.make_reaction(((function (subscriptions,reaction_id,computation_fn,input_args,err_header,inputs_fn){\nreturn (function (){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__43329 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__43330 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dyn_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\nre_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__43330;\n\ntry{try{var subscription = (function (){var G__43331 = re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__43332 = query_vec;\nvar G__43333 = dyn_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__43331,G__43332,G__43333) : computation_fn.call(null,G__43331,G__43332,G__43333));\n})();\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43419 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43419;\n\n} else {\n}\n\nreturn subscription;\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__43154__auto___43427 = re_frame.interop.now();\nvar duration__43155__auto___43428 = (end__43154__auto___43427 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__43155__auto___43428,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__43154__auto___43427);\n} else {\n}\n}}finally {re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__43329;\n}} else {\nvar subscription = (function (){var G__43334 = re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__43335 = query_vec;\nvar G__43336 = dyn_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__43334,G__43335,G__43336) : computation_fn.call(null,G__43334,G__43335,G__43336));\n})();\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__43156__auto___43429 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__43156__auto___43429;\n\n} else {\n}\n\nreturn subscription;\n}\n});})(subscriptions,reaction_id,computation_fn,input_args,err_header,inputs_fn))\n);\ncljs.core.reset_BANG_(reaction_id,re_frame.interop.reagent_id(reaction));\n\nreturn reaction;\n});\nre_frame$subs$subs_handler_fn = function(db,query_vec,dyn_vec){\nswitch(arguments.length){\ncase 2:\nreturn re_frame$subs$subs_handler_fn__2.call(this,db,query_vec);\ncase 3:\nreturn re_frame$subs$subs_handler_fn__3.call(this,db,query_vec,dyn_vec);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nre_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$2 = re_frame$subs$subs_handler_fn__2;\nre_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$3 = re_frame$subs$subs_handler_fn__3;\nreturn re_frame$subs$subs_handler_fn;\n})()\n;})(computation_fn,input_args,err_header,inputs_fn))\n);\n});\n\nre_frame.subs.reg_sub.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nre_frame.subs.reg_sub.cljs$lang$applyTo = (function (seq43313){\nvar G__43314 = cljs.core.first(seq43313);\nvar seq43313__$1 = cljs.core.next(seq43313);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__43314,seq43313__$1);\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/subs.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",18],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.subs","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^O","~$re-frame.trace","^P","~$re-frame.registrar","^Q","~$cljs.core","^R","~$goog","^S","~$trace","^P","~$re-frame.utils","^U","~$re-frame.loggers","^V","~$re-frame.db","^W"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$reagent-id","^O","~$console","^V","~$app-db","^W","~$dispose!","^O","~$add-on-dispose!","^O","~$make-reaction","^O","~$get-handler","^Q","~$first-in-vector","^U","~$deref?","^O","~$ratom?","^O","~$debug-enabled?","^O","~$clear-handlers","^Q","~$register-handler","^Q"],"~:require-macros",["^ ","^P","^P","^T","^P","^R","^R"],"~:form",["~#list",["~$ns","^J",["^1>",["^Y",["^W","~:refer",["^11"]],["^O","^1@",["^13","^19","^14","^18","^17","^12","^["]],["^V","^1@",["^10"]],["^U","^1@",["^16"]],["^Q","^1@",["^15","^1:","^1;"]],["^P","~:as","^T","~:include-macros",true]]]]],"~:flags",["^ ","^Y",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^W","^O","^V","^U","^Q","^P"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","re_frame/subs.cljc"],"~:compiled-at",1573257632221,"~:resource-name","re_frame/subs.cljc","~:warnings",[],"~:source","(ns re-frame.subs\n (:require\n   [re-frame.db        :refer [app-db]]\n   [re-frame.interop   :refer [add-on-dispose! debug-enabled? make-reaction ratom? deref? dispose! reagent-id]]\n   [re-frame.loggers   :refer [console]]\n   [re-frame.utils     :refer [first-in-vector]]\n   [re-frame.registrar :refer [get-handler clear-handlers register-handler]]\n   [re-frame.trace     :as trace :include-macros true]))\n\n(def kind :sub)\n(assert (re-frame.registrar/kinds kind))\n\n;; -- cache -------------------------------------------------------------------\n;;\n;; De-duplicate subscriptions. If two or more equal subscriptions\n;; are concurrently active, we want only one handler running.\n;; Two subscriptions are \"equal\" if their query vectors test \"=\".\n(def query->reaction (atom {}))\n\n(defn clear-subscription-cache!\n  \"Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue.\"\n  []\n  (doseq [[k rxn] @query->reaction]\n    (dispose! rxn))\n  (if (not-empty @query->reaction)\n    (console :warn \"Subscription cache should be empty after clearing it.\")))\n\n(defn clear-all-handlers!\n  \"Unregisters all existing subscription handlers\"\n  []\n  (clear-handlers kind)\n  (clear-subscription-cache!))\n\n(defn cache-and-return\n  \"cache the reaction r\"\n  [query-v dynv r]\n  (let [cache-key [query-v dynv]]\n    ;; when this reaction is no longer being used, remove it from the cache\n    (add-on-dispose! r #(trace/with-trace {:operation (first-in-vector query-v)\n                                           :op-type   :sub/dispose\n                                           :tags      {:query-v  query-v\n                                                       :reaction (reagent-id r)}}\n                                          (swap! query->reaction\n                                                 (fn [query-cache]\n                                                   (if (and (contains? query-cache cache-key) (identical? r (get query-cache cache-key)))\n                                                     (dissoc query-cache cache-key)\n                                                     query-cache)))))\n    ;; cache this reaction, so it can be used to deduplicate other, later \"=\" subscriptions\n    (swap! query->reaction (fn [query-cache]\n                             (when debug-enabled?\n                               (when (contains? query-cache cache-key)\n                                 (console :warn \"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\" cache-key)))\n                             (assoc query-cache cache-key r)))\n    (trace/merge-trace! {:tags {:reaction (reagent-id r)}})\n    r)) ;; return the actual reaction\n\n(defn cache-lookup\n  ([query-v]\n   (cache-lookup query-v []))\n  ([query-v dyn-v]\n   (get @query->reaction [query-v dyn-v])))\n\n\n;; -- subscribe ---------------------------------------------------------------\n\n(defn subscribe\n  \"Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \\\"blue\\\" :small])\n    (subscribe [:items {:colour \\\"blue\\\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  \"\n\n  ([query]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query}}\n     (if-let [cached (cache-lookup query)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (cache-and-return query [] (handler-fn app-db query)))))))\n\n  ([query dynv]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query\n                                  :dyn-v   dynv}}\n     (if-let [cached (cache-lookup query dynv)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (when debug-enabled?\n           (when-let [not-reactive (not-empty (remove ratom? dynv))]\n             (console :warn \"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\" not-reactive)))\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (let [dyn-vals (make-reaction (fn [] (mapv deref dynv)))\n                 sub      (make-reaction (fn [] (handler-fn app-db query @dyn-vals)))]\n             ;; handler-fn returns a reaction which is then wrapped in the sub reaction\n             ;; need to double deref it to get to the actual value.\n             ;(console :log \"Subscription created: \" v dynv)\n             (cache-and-return query dynv (make-reaction (fn [] @@sub))))))))))\n\n;; -- reg-sub -----------------------------------------------------------------\n\n(defn- map-vals\n  \"Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\"\n  [f m]\n  (into (empty m)\n        (map (fn [[k v]] [k (f v)]))\n        m))\n\n(defn map-signals\n  \"Runs f over signals. Signals may take several\n  forms, this function handles all of them.\"\n  [f signals]\n  (cond\n    (sequential? signals) (map f signals)\n    (map? signals) (map-vals f signals)\n    (deref? signals) (f signals)\n    :else '()))\n\n(defn to-seq\n  \"Coerces x to a seq if it isn't one already\"\n  [x]\n  (if (sequential? x)\n    x\n    (list x)))\n\n(defn- deref-input-signals\n  [signals query-id]\n  (let [dereffed-signals (map-signals deref signals)]\n    (cond\n      (sequential? signals) (map deref signals)\n      (map? signals) (map-vals deref signals)\n      (deref? signals) (deref signals)\n      :else (console :error \"re-frame: in the reg-sub for\" query-id \", the input-signals function returns:\" signals))\n    (trace/merge-trace! {:tags {:input-signals (doall (to-seq (map-signals reagent-id signals)))}})\n    dereffed-signals))\n\n\n(defn reg-sub\n  \"For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \\\"blue\\\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \\\"blue\\\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \\\"blue\\\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \\\"flow into\\\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  \"\n  [query-id & args]\n  (let [computation-fn (last args)\n        input-args     (butlast args) ;; may be empty, or one signal fn, or pairs of  :<- / vector\n        err-header     (str \"re-frame: reg-sub for \" query-id \", \")\n        inputs-fn      (case (count input-args)\n                         ;; no `inputs` function provided - give the default\n                         0 (fn\n                             ([_] app-db)\n                             ([_ _] app-db))\n\n                         ;; a single `inputs` fn\n                         1 (let [f (first input-args)]\n                             (when-not (fn? f)\n                               (console :error err-header \"2nd argument expected to be an inputs function, got:\" f))\n                             f)\n\n                         ;; one sugar pair\n                         2 (let [[marker vec] input-args]\n                             (when-not (= :<- marker)\n                               (console :error err-header \"expected :<-, got:\" marker))\n                             (fn inp-fn\n                               ([_] (subscribe vec))\n                               ([_ _] (subscribe vec))))\n\n                         ;; multiple sugar pairs\n                         (let [pairs   (partition 2 input-args)\n                               markers (map first pairs)\n                               vecs    (map last pairs)]\n                           (when-not (and (every? #{:<-} markers) (every? vector? vecs))\n                             (console :error err-header \"expected pairs of :<- and vectors, got:\" pairs))\n                           (fn inp-fn\n                             ([_] (map subscribe vecs))\n                             ([_ _] (map subscribe vecs)))))]\n    (register-handler\n      kind\n      query-id\n      (fn subs-handler-fn\n        ([db query-vec]\n         (let [subscriptions (inputs-fn query-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v    query-vec\n                                                                :reaction   @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))\n        ([db query-vec dyn-vec]\n         (let [subscriptions (inputs-fn query-vec dyn-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v   query-vec\n                                                                :dyn-v     dyn-vec\n                                                                :reaction  @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec dyn-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))))))\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.subs/kind","js/Error","re-frame.registrar/kinds","re-frame.subs/query->reaction","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","re-frame.subs/clear-subscription-cache!","seq__43212","cljs.core/seq","cljs.core/deref","chunk__43213","count__43214","i__43215","vec__43227","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__43230","cljs.core/first","cljs.core/next","k","rxn","re-frame.interop/dispose!","cljs.core/not-empty","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","re-frame.subs/clear-all-handlers!","re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1","re-frame.subs/cache-and-return","query-v","dynv","r","cache-key","re-frame.interop/add-on-dispose!","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__43240","re-frame.trace/*current-trace*","*current-trace*-temp-val__43241","re-frame.trace/start-trace","end__43154__auto__","re-frame.interop/now","duration__43155__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","re-frame.trace/run-tracing-callbacks!","re-frame.utils/first-in-vector","re-frame.interop/reagent-id","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","query-cache","cljs.core/contains?","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","re-frame.interop/debug-enabled?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","new-trace__43156__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","var_args","G__43258","re-frame.subs/cache-lookup","re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2","dyn-v","G__43266","re-frame.subs/subscribe","query","*current-trace*-orig-val__43267","*current-trace*-temp-val__43268","temp__5733__auto__","cached","re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1","query-id","handler-fn","re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2","re-frame.db/app-db","*current-trace*-orig-val__43275","*current-trace*-temp-val__43276","not-reactive","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","re-frame.interop/ratom?","dyn-vals","re-frame.interop/make-reaction","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","sub","G__43280","G__43281","G__43282","G__43286","G__43287","G__43288","re-frame.subs/map-vals","f","m","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core/empty","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__43297","vec__43298","v","re-frame.subs/map-signals","signals","cljs.core/sequential?","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/map?","re-frame.interop/deref?","re-frame.subs/to-seq","x","cljs.core/List","re-frame.subs/deref-input-signals","dereffed-signals","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","re-frame.subs/reg-sub","seq43313","G__43314","self__4717__auto__","args","computation-fn","cljs.core/last","input-args","cljs.core/butlast","err-header","inputs-fn","G__43316","_","cljs.core/fn?","vec__43319","marker","vec","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1","pairs","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","markers","vecs","cljs.core/every?","cljs.core/vector?","re-frame.registrar/register-handler","db","query-vec","subscriptions","reaction-id","reaction","*current-trace*-orig-val__43323","*current-trace*-temp-val__43324","subscription","G__43325","G__43326","G__43327","G__43328","cljs.core/reset!","dyn-vec","*current-trace*-orig-val__43329","*current-trace*-temp-val__43330","G__43331","G__43332","G__43333","G__43334","G__43335","G__43336"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1570928878000,1570928878000,1573257311999,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1G","reagent/impl/batching.cljs"],[1558312810021,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"]]],["^1G","goog/dom/tagname.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","~$goog.dom.HtmlElement"]]],["^1G","goog/math/math.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","~$goog.array","~$goog.asserts"]]],["^1G","goog/labs/useragent/browser.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^25","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^1G","re_frame/loggers.cljc"],[1568955171884,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","~$clojure.set"]]],["^1G","goog/array/array.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^26"]]],["^1T","node_modules/prop-types/checkPropTypes.js"],[1570928878000,1570928878000,1573257311836,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1G","reagent/impl/util.cljs"],[1558312810021,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","^20","^21","^23"]]],["^1T","node_modules/fbjs/lib/emptyFunction.js"],[1570928878000,1570928878000,1573257311430,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y"]]],["^1G","goog/debug/error.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S"]]],["^1G","re_frame/registrar.cljc"],[1568955171884,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","^O","^V"]]],["^1T","node_modules/fbjs/lib/emptyObject.js"],[1570928878000,1570928878000,1573257311431,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y"]]],["^1G","goog/dom/nodetype.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S"]]],["^1T","node_modules/scheduler/cjs/scheduler.development.js"],[1570928878000,1570928878000,1573257312132,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y"]]],["^1G","reagent/ratom.cljs"],[1558312810021,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","^22","^20","~$reagent.impl.batching","^2:"]]],["^1T","node_modules/scheduler/cjs/scheduler.production.min.js"],[1570928878000,1570928878000,1573257312132,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y"]]],["^1G","re_frame/interop.cljs"],[1568955171884,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","~$goog.async.nextTick","~$reagent.core","~$reagent.ratom"]]],["^1T","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1570928878000,1570928878000,1573257312131,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y"]]],["^1T","node_modules/create-react-class/factory.js"],[1570928878000,1570928878000,1573257311251,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"]]],["^1T","node_modules/react/index.js"],[1570928878000,1570928878000,1573257312075,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1G","shadow/js.js"],[1570928878267,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S"]]],["^1G","goog/object/object.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S"]]],["^1G","reagent/impl/template.cljs"],[1558312810021,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","^?","^23","~$clojure.walk","^22","~$reagent.impl.component","^2<","^2?","^21","^20"]]],["^1T","node_modules/react-dom/cjs/react-dom.production.min.js"],[1570928878000,1570928878000,1573257311995,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y","^?","^2@","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1570928878000,1556316222000],["^1T","node_modules/react/cjs/react.development.js"],[1570928878000,1570928878000,1573257312074,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y","^2@","~$module$node_modules$prop_types$checkPropTypes"]]],["^1G","goog/math/long.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^26","~$goog.reflect"]]],["^1G","goog/string/internal.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S"]]],["^1T","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1570928878000,1570928878000,1573257312130,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y"]]],["^1T","node_modules/fbjs/lib/warning.js"],[1570928878000,1570928878000,1573257311506,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y","~$module$node_modules$fbjs$lib$emptyFunction"]]],["^1G","goog/functions/functions.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S"]]],["^1G","reagent/impl/component.cljs"],[1558312810021,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","^A","^?","^22","^2<","^2?","^21","^20"]]],["^1G","clojure/walk.cljs"],[1556316222100,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R"]]],["^1G","goog/structs/map.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1T","node_modules/scheduler/index.js"],[1570928878000,1570928878000,1573257312133,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1G","goog/labs/useragent/engine.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^25","^27","~$goog.string"]]],["^1G","goog/asserts/asserts.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1G","goog/uri/uri.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^25","^26","^2Q","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1T","node_modules/object-assign/index.js"],[1570928878000,1570928878000,1573257311681,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y"]]],["^1G","re_frame/db.cljc"],[1568955171884,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","^O"]]],["^1G","goog/base.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",[]]],["^1G","goog/structs/structs.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^25","^28"]]],["^1G","clojure/string.cljs"],[1556316222100,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","^2Q","~$goog.string.StringBuffer"]]],["^1T","node_modules/create-react-class/index.js"],[1570928878000,1570928878000,1573257311252,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y","^?","~$module$node_modules$create_react_class$factory"]]],["^1T","node_modules/react/cjs/react.production.min.js"],[1570928878000,1570928878000,1573257312074,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y","^2@"]]],["^1G","goog/debug/entrypointregistry.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^26"]]],["^1G","goog/string/string.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^29"]]],["^1G","goog/reflect/reflect.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S"]]],["^1G","goog/labs/useragent/util.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^29"]]],["^1G","reagent/core.cljs"],[1558312810021,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","^?","~$reagent.impl.template","^2G","^22","^2<","^2?","^20","^21","~$reagent.dom"]]],["^1G","goog/string/stringbuffer.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S"]]],["^1G","goog/iter/iter.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^25","^26","~$goog.functions","~$goog.math"]]],["^1G","goog/async/nexttick.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^31","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"]]],["^1G","re_frame/utils.cljc"],[1568955171884,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","^V"]]],["^1G","reagent/dom.cljs"],[1558312810021,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","^C","^22","^2[","^2<","^2?","^20","^21"]]],["^1T","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1570928878000,1570928878000,1573257311844,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y"]]],["^1G","reagent/interop.cljs"],[1558312810021,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R"]]],["^1G","goog/dom/htmlelement.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S"]]],["^1G","cljs/core.cljs"],[1556316222100,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["~$goog.math.Long","~$goog.math.Integer","^2Q","^28","^25","~$goog.Uri","^2Y"]]],["^1G","reagent/debug.cljs"],[1558312810021,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R"]]],["^1G","goog/math/integer.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S"]]],["^1T","node_modules/scheduler/tracing.js"],[1570928878000,1570928878000,1573257312134,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^1T","node_modules/react-dom/cjs/react-dom.development.js"],[1570928878000,1570928878000,1573257311986,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y","^?","^2@","^2J","^2H","~$module$node_modules$scheduler$tracing"]]],["^1G","clojure/set.cljs"],[1556316222100,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R"]]],["^1G","goog/uri/utils.js"],[1559507890775,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^25","^26","^2Q"]]],["^1T","node_modules/fbjs/lib/invariant.js"],[1570928878000,1570928878000,1573257311474,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^1Y"]]],["^1G","re_frame/trace.cljc"],[1568955171884,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","^O","^V","^31"]]],["^1G","re_frame/subs.cljc"],[1568955171884,"^1U",["^ ","^1V",null,"^1W",["^H",[]],"^1X",["^S","^R","^W","^O","^V","^U","^Q","^P"]]]]],"~:clj-info",["^ ","jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1556141640000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/core.clj",1558312810000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/interop.clj",1558312810000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/ratom.clj",1558312810000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/re-frame/re-frame/0.10.9/re-frame-0.10.9.jar!/re_frame/trace.cljc",1568955171000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1556312825000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/re-frame/re-frame/0.10.9/re-frame-0.10.9.jar!/re_frame/interop.clj",1568955171000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/debug.clj",1558312810000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/subs.cljc","^7",1,"^8",5,"^9",1,"^:",18],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^P","^Q","^Q","^R","^R","^S","^S","^T","^P","^U","^U","^V","^V","^W","^W"],"^X",["^H",["^Y"]],"~:shadow/js-access-global",["^H",["Error"]],"^Z",["^ ","^[","^O","^10","^V","^11","^W","^12","^O","^13","^O","^14","^O","^15","^Q","^16","^U","^17","^O","^18","^O","^19","^O","^1:","^Q","^1;","^Q"],"~:defs",["^ ","~$to-seq",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",181,"^8",7,"^9",181,"^:",13,"~:arglists",["^1>",["~$quote",["^1>",[["~$x"]]]]],"~:doc","Coerces x to a seq if it isn't one already"],"^I","~$re-frame.subs/to-seq","^6","re_frame/subs.cljc","^:",13,"~:method-params",["^1>",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^1>",[null,null]],"^8",1,"~:variadic?",false,"^7",181,"~:ret-tag","~$clj","^9",181,"~:max-fixed-arity",1,"~:fn-var",true,"^46",["^1>",["^47",["^1>",[["~$x"]]]]],"^48","Coerces x to a seq if it isn't one already"],"~$cache-and-return",["^ ","^45",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",42,"^8",7,"^9",42,"^:",23,"^46",["^1>",["^47",["^1>",[["~$query-v","~$dynv","~$r"]]]]],"^48","cache the reaction r"],"^I","~$re-frame.subs/cache-and-return","^6","re_frame/subs.cljc","^:",23,"^4:",["^1>",[["^4C","^4D","~$r"]]],"^4;",null,"^4<",["^1>",[null,null]],"^8",1,"^4=",false,"^7",42,"^9",42,"^4@",3,"^4A",true,"^46",["^1>",["^47",["^1>",[["^4C","^4D","~$r"]]]]],"^48","cache the reaction r"],"~$deref-input-signals",["^ ","^45",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",188,"^8",8,"^9",188,"^:",27,"~:private",true,"^46",["^1>",["^47",["^1>",[["~$signals","~$query-id"]]]]]],"^4G",true,"^I","~$re-frame.subs/deref-input-signals","^6","re_frame/subs.cljc","^:",27,"^4:",["^1>",[["^4H","^4I"]]],"^4;",null,"^4<",["^1>",[null,null]],"^8",1,"^4=",false,"^7",188,"^4>",["^H",["^4?","~$cljs.core/IList","~$any","~$cljs.core/LazySeq"]],"^9",188,"^4@",2,"^4A",true,"^46",["^1>",["^47",["^1>",[["^4H","^4I"]]]]]],"~$subscribe",["^ ","^45",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",74,"^8",7,"^9",74,"^:",16,"^46",["^1>",["^47",["^1>",[["~$query"],["^4O","^4D"]]]]],"^48","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  ","~:top-fn",["^ ","^4=",false,"~:fixed-arity",2,"^4@",2,"^4:",["^1>",[["^4O"],["^4O","^4D"]]],"^46",["^1>",[["^4O"],["^4O","^4D"]]],"^4<",["^1>",[null,null]]]],"^I","~$re-frame.subs/subscribe","^6","re_frame/subs.cljc","^:",16,"^4P",["^ ","^4=",false,"^4Q",2,"^4@",2,"^4:",["^1>",[["^4O"],["^4O","^4D"]]],"^46",["^1>",[["^4O"],["^4O","^4D"]]],"^4<",["^1>",[null,null]]],"^4:",["^1>",[["^4O"],["^4O","^4D"]]],"^4;",null,"^4Q",2,"^4<",["^1>",[null,null]],"^8",1,"^4=",false,"~:methods",[["^ ","^4Q",1,"^4=",false,"~:tag",["^H",[null,"^4L"]]],["^ ","^4Q",2,"^4=",false,"^4T",["^H",[null,"^4L"]]]],"^7",74,"^9",74,"^4@",2,"^4A",true,"^46",["^1>",[["^4O"],["^4O","^4D"]]],"^48","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a `Signal`.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  "],"~$reg-sub",["^ ","^45",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",200,"^8",7,"^9",200,"^:",14,"^46",["^1>",["^47",["^1>",[["^4I","~$&","~$args"]]]]],"^48","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \"flow into\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  ","^4P",["^ ","^4=",true,"^4Q",1,"^4@",1,"^4:",[["^1>",["^4I","^4V"]]],"^46",["^1>",[["^4I","~$&","^4V"]]],"^4<",["^1>",[null]]]],"^I","~$re-frame.subs/reg-sub","^6","re_frame/subs.cljc","^:",14,"^4P",["^ ","^4=",true,"^4Q",1,"^4@",1,"^4:",[["^1>",["^4I","^4V"]]],"^46",["^1>",[["^4I","~$&","^4V"]]],"^4<",["^1>",[null]]],"^4:",[["^1>",["^4I","^4V"]]],"^4;",null,"^4Q",1,"^4<",["^1>",[null]],"^8",1,"^4=",true,"^4S",[["^ ","^4Q",1,"^4=",true,"^4T","^4L"]],"^7",200,"^4>","^4L","^9",200,"^4@",1,"^4A",true,"^46",["^1>",[["^4I","~$&","^4V"]]],"^48","For a given `query-id`, register two functions: a `computation` function and an `input signals` function.\n  \n  During program execution, a call to `subscribe`, such as `(subscribe [:sub-id 3 \"blue\"])`,\n  will create a new `:sub-id` node in the Signal Graph. And, at that time, re-frame\n  needs to know how to create the node.   By calling `reg-sub`, you are registering \n  'the template' or 'the mechanism' by which nodes in the Signal Graph can be created. \n\n  Repeating: calling `reg-sub` does not create a node. It only creates the template\n  from which nodes can be created later. \n  \n  `reg-sub` arguments are:  \n    - a `query-id` (typically a namespaced keyword)\n    - a function which returns the inputs required by this kind of node (can be supplied  in one of three ways) \n    - a function which computes the value of this kind of node \n\n  The `computation function` is always the last argument supplied and it is expected to have the signature: \n    `(input-values, query-vector) -> a-value`\n  \n  When `computation function` is called, the `query-vector` argument will be the vector supplied to the \n  the `subscribe` which caused the node to be created. So, if the call was `(subscribe [:sub-id 3 \"blue\"])`, \n  then the `query-vector` supplied to the computaton function will be `[:sub-id 3 \"blue\"]`.\n\n  The arguments supplied between the `query-id` and the `computation-function` can vary in 3 ways, \n  but whatever is there defines the `input signals` part of the template, controlling what input \n values \"flow into\" the `computation function` gets when it is called. \n\n  `reg-sub` can be called in one of three ways, because there are three ways to define the input signals part.\n  But note, the 2nd method, in which a `signal-fn` is explicitly supplied, is the most canonical and instructive. The other \n  two are really just sugary variations. \n\n  1. No input signals given:\n      ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n\n     In the absence of an explicit `input-fn`, the node's input signal defaults to `app-db`\n     and, as a result, the value within `app-db` (a map) is\n     is given as the 1st argument when `a-computation-fn` is called.   \n \n\n  2. A signal function is explicitly supplied:\n     ```clj\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n     ```\n     \n     This is the most canonical and instructive of the three variations.\n     \n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from returned nominated signals will be supplied as the 1st argument to  \n     the `a-computation-fn` when it is called - and subject to what this `signal-fn` returns, \n     this value will be either a singleton, sequence or map of them (paralleling\n     the structure returned by the `signal-fn`).\n\n     This example `signal-fn` returns a vector of input signals.\n       ```clj\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n       ```\n     The associated computation function must be written\n     to expect a vector of values for its first argument:\n       ```clj\n       (fn [[a b] query-vec]     ;; 1st argument is a seq of two values\n         ....)\n        ```\n\n     If, on the other hand, the signal function was simpler and returned a singleton, like this:\n        ```clj\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n        ```\n     then the associated computation function must be written to expect a single value\n     as the 1st argument:\n        ```clj\n        (fn [a query-vec]       ;; 1st argument is a single value\n          ...)\n        ```\n \n     Further Note: variation #1 above, in which an `input-fn` was not supplied, like this:\n       ```clj\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n     is the equivalent of using this\n     2nd variation and explicitly suppling a `signal-fn` which returns `app-db`:\n     ```clj\n     (reg-sub\n       :query-id\n       (fn [_ _]  re-frame/app-db)   ;; <--- explicit input-fn \n       a-computation-fn)             ;; has signature:  (fn [db query-vec]  ... ret-value)\n     ```\n \n  3. Syntax Sugar\n\n     ```clj\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] query-vec]    ;; 1st argument is a seq of two values\n         {:a a :b b}))\n     ```\n\n     This 3rd variation is just syntactic sugar for the 2nd.  Instead of providing an\n     `signals-fn` you provide one or more pairs of `:<-` and a subscription vector.\n\n     If you supply only one pair a singleton will be supplied to the computation function, \n     as if you had supplied a `signal-fn` returning only a single value:\n\n     ```clj\n     (reg-sub\n       :a-sub\n       :<- [:a-sub]\n       (fn [a query-vec]      ;; only one pair, so 1st argument is a single value\n         ...))\n     ```\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  "],"~$query->reaction",["^ ","^I","~$re-frame.subs/query->reaction","^6","re_frame/subs.cljc","^7",18,"^8",1,"^9",18,"^:",21,"^5",["^ ","^6","re_frame/subs.cljc","^7",18,"^8",6,"^9",18,"^:",21],"^4T","~$cljs.core/Atom"],"~$clear-all-handlers!",["^ ","^45",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",36,"^8",7,"^9",36,"^:",26,"^46",["^1>",["^47",["^1>",[[]]]]],"^48","Unregisters all existing subscription handlers"],"^I","~$re-frame.subs/clear-all-handlers!","^6","re_frame/subs.cljc","^:",26,"^4:",["^1>",[[]]],"^4;",null,"^4<",["^1>",[null,null]],"^8",1,"^4=",false,"^7",36,"^4>",["^H",["^4L","~$clj-nil"]],"^9",36,"^4@",0,"^4A",true,"^46",["^1>",["^47",["^1>",[[]]]]],"^48","Unregisters all existing subscription handlers"],"~$cache-lookup",["^ ","^45",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",65,"^8",7,"^9",65,"^:",19,"^46",["^1>",["^47",["^1>",[["^4C"],["^4C","~$dyn-v"]]]]],"^4P",["^ ","^4=",false,"^4Q",2,"^4@",2,"^4:",["^1>",[["^4C"],["^4C","^53"]]],"^46",["^1>",[["^4C"],["^4C","^53"]]],"^4<",["^1>",[null,null]]]],"^I","~$re-frame.subs/cache-lookup","^6","re_frame/subs.cljc","^:",19,"^4P",["^ ","^4=",false,"^4Q",2,"^4@",2,"^4:",["^1>",[["^4C"],["^4C","^53"]]],"^46",["^1>",[["^4C"],["^4C","^53"]]],"^4<",["^1>",[null,null]]],"^4:",["^1>",[["^4C"],["^4C","^53"]]],"^4;",null,"^4Q",2,"^4<",["^1>",[null,null]],"^8",1,"^4=",false,"^4S",[["^ ","^4Q",1,"^4=",false,"^4T","^4L"],["^ ","^4Q",2,"^4=",false,"^4T",["^H",["^4L","^51"]]]],"^7",65,"^9",65,"^4@",2,"^4A",true,"^46",["^1>",[["^4C"],["^4C","^53"]]]],"~$map-vals",["^ ","^45",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",163,"^8",8,"^9",163,"^:",16,"^4G",true,"^46",["^1>",["^47",["^1>",[["~$f","~$m"]]]]],"^48","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"^4G",true,"^I","~$re-frame.subs/map-vals","^6","re_frame/subs.cljc","^:",16,"^4:",["^1>",[["~$f","~$m"]]],"^4;",null,"^4<",["^1>",[null,null]],"^8",1,"^4=",false,"^7",163,"^4>",["^H",["^4?","^4L"]],"^9",163,"^4@",2,"^4A",true,"^46",["^1>",["^47",["^1>",[["~$f","~$m"]]]]],"^48","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"~$kind",["^ ","^I","~$re-frame.subs/kind","^6","re_frame/subs.cljc","^7",10,"^8",1,"^9",10,"^:",10,"^5",["^ ","^6","re_frame/subs.cljc","^7",10,"^8",6,"^9",10,"^:",10],"^4T","~$cljs.core/Keyword"],"~$clear-subscription-cache!",["^ ","^45",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",20,"^8",7,"^9",20,"^:",32,"^46",["^1>",["^47",["^1>",[[]]]]],"^48","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"^I","~$re-frame.subs/clear-subscription-cache!","^6","re_frame/subs.cljc","^:",32,"^4:",["^1>",[[]]],"^4;",null,"^4<",["^1>",[null,null]],"^8",1,"^4=",false,"^7",20,"^4>",["^H",["^4L","^51"]],"^9",20,"^4@",0,"^4A",true,"^46",["^1>",["^47",["^1>",[[]]]]],"^48","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running `on-dispose` on all cached subscriptions\n     2. Each `on-dispose` will perform the removal of themselves.\n\n  This is for development time use. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"~$map-signals",["^ ","^45",null,"^5",["^ ","^6","re_frame/subs.cljc","^7",171,"^8",7,"^9",171,"^:",18,"^46",["^1>",["^47",["^1>",[["~$f","^4H"]]]]],"^48","Runs f over signals. Signals may take several\n  forms, this function handles all of them."],"^I","~$re-frame.subs/map-signals","^6","re_frame/subs.cljc","^:",18,"^4:",["^1>",[["~$f","^4H"]]],"^4;",null,"^4<",["^1>",[null,null]],"^8",1,"^4=",false,"^7",171,"^4>",["^H",["^4?","^4K","^4L","^4M"]],"^9",171,"^4@",2,"^4A",true,"^46",["^1>",["^47",["^1>",[["~$f","^4H"]]]]],"^48","Runs f over signals. Signals may take several\n  forms, this function handles all of them."]],"^1<",["^ ","^P","^P","^T","^P","^R","^R"],"~:cljs.analyzer/constants",["^ ","^X",["^H",["~:dyn-v","~:tags","~:sub/run","~:else","~:<-","~:sub","~:sub/create","~:warn","~:value","~:operation","~:start","~:duration","~:query-v","~:cached?","~:sub/dispose","~:error","~:input-signals","~:end","~:reaction","~:op-type"]],"~:order",["^5D","^5F","^5H","^5R","^5@","^5M","^5K","^5Q","^5I","^5J","^5P","^5E","^5L","^5N","^5?","^5B","^5O","^5C","^5A","^5G"]],"^1C",["^ ","^Y",["^H",[]]],"^1D",["^ "],"^1E",["^S","^R","^W","^O","^V","^U","^Q","^P"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1S",[["^5V","~:static-fns"],true,["^5V","~:elide-asserts"],false,["^5V","~:optimize-constants"],null,["^5V","^1J"],null,["^5V","~:external-config"],null,["^5V","~:tooling-config"],null,["^5V","~:emit-constants"],null,["^5V","~:load-tests"],null,["^5V","~:form-size-threshold"],null,["^5V","~:infer-externs"],true,["^5V","^1L"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5V","~:fn-invoke-direct"],null,["^5V","~:source-map"],"/dev/null"]]]