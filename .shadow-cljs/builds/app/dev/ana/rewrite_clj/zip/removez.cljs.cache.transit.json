["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.zip.removez');\ngoog.require('cljs.core');\ngoog.require('rewrite_clj.zip.move');\ngoog.require('rewrite_clj.zip.utils');\ngoog.require('rewrite_clj.zip.whitespace');\ngoog.require('clojure.zip');\n/**\n * Remove all whitespace following a given node.\n */\nrewrite_clj.zip.removez.remove_trailing_space = (function rewrite_clj$zip$removez$remove_trailing_space(zloc,p_QMARK_){\nreturn rewrite_clj.zip.utils.remove_right_while(zloc,p_QMARK_);\n});\n/**\n * Remove all whitespace preceding a given node.\n */\nrewrite_clj.zip.removez.remove_preceding_space = (function rewrite_clj$zip$removez$remove_preceding_space(zloc,p_QMARK_){\nreturn rewrite_clj.zip.utils.remove_left_while(zloc,p_QMARK_);\n});\n/**\n * Remove value at the given zipper location. Returns the first non-whitespace\n * node that would have preceded it in a depth-first walk. Will remove whitespace\n * appropriately.\n * \n *   - `[1  2  3]   => [1  3]`\n *   - `[1 2]       => [1]`\n *   - `[1 2]       => [2]`\n *   - `[1]         => []`\n *   - `[  1  ]     => []`\n *   - `[1 [2 3] 4] => [1 [2 3]]`\n *   - `[1 [2 3] 4] => [[2 3] 4]`\n * \n * If a node is located rightmost, both preceding and trailing spaces are removed,\n * otherwise only trailing spaces are touched. This means that a following element\n * (no matter whether on the same line or not) will end up in the same position\n * (line/column) as the removed one, _unless_ a comment lies between the original\n * node and the neighbour.\n */\nrewrite_clj.zip.removez.remove = (function rewrite_clj$zip$removez$remove(zloc){\nif(cljs.core.truth_(zloc)){\n} else {\nthrow (new Error(\"Assert failed: zloc\"));\n}\n\nvar _PERCENT_ = rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2(clojure.zip.prev,clojure.zip.remove(rewrite_clj.zip.removez.remove_trailing_space(((((rewrite_clj.zip.move.rightmost_QMARK_(zloc)) || (rewrite_clj.zip.move.leftmost_QMARK_(zloc))))?rewrite_clj.zip.removez.remove_preceding_space(zloc,rewrite_clj.zip.whitespace.whitespace_QMARK_):zloc),rewrite_clj.zip.whitespace.whitespace_QMARK_)));\nif(cljs.core.truth_(_PERCENT_)){\n} else {\nthrow (new Error(\"Assert failed: %\"));\n}\n\nreturn _PERCENT_;\n});\n/**\n * Same as remove but preserves newlines\n */\nrewrite_clj.zip.removez.remove_preserve_newline = (function rewrite_clj$zip$removez$remove_preserve_newline(zloc){\nif(cljs.core.truth_(zloc)){\n} else {\nthrow (new Error(\"Assert failed: zloc\"));\n}\n\nvar _PERCENT_ = rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2(clojure.zip.prev,clojure.zip.remove(rewrite_clj.zip.removez.remove_trailing_space(((((rewrite_clj.zip.move.rightmost_QMARK_(zloc)) || (rewrite_clj.zip.move.leftmost_QMARK_(zloc))))?rewrite_clj.zip.removez.remove_preceding_space(zloc,(function (p1__42355_SHARP_){\nvar and__4120__auto__ = rewrite_clj.zip.whitespace.whitespace_QMARK_(p1__42355_SHARP_);\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not(rewrite_clj.zip.whitespace.linebreak_QMARK_(p1__42355_SHARP_));\n} else {\nreturn and__4120__auto__;\n}\n})):zloc),(function (p1__42356_SHARP_){\nvar and__4120__auto__ = rewrite_clj.zip.whitespace.whitespace_QMARK_(p1__42356_SHARP_);\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.not(rewrite_clj.zip.whitespace.linebreak_QMARK_(p1__42356_SHARP_));\n} else {\nreturn and__4120__auto__;\n}\n}))));\nif(cljs.core.truth_(_PERCENT_)){\n} else {\nthrow (new Error(\"Assert failed: %\"));\n}\n\nreturn _PERCENT_;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/zip/removez.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",28],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",["~$remove"]],"~:name","~$rewrite-clj.zip.removez","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.zip","^P","~$u","~$rewrite-clj.zip.utils","~$cljs.core","^R","~$ws","~$rewrite-clj.zip.whitespace","~$goog","^U","~$m","~$rewrite-clj.zip.move","^T","^T","^V","^V","~$z","^P","^Q","^Q"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^K",["^10",["~:refer-clojure","~:exclude",["^I"]]],["^10",["^X",["^V","~:as","~$m"],["^Q","^14","~$u"],["^T","^14","^S"],["^P","^14","~$z"]]]]],"~:flags",["^ ","^X",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^U","^R","^V","^Q","^T","^P"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/zip/removez.cljs"],"~:compiled-at",1573425049733,"~:resource-name","rewrite_clj/zip/removez.cljs","~:warnings",[],"~:source","(ns rewrite-clj.zip.removez\n  (:refer-clojure :exclude [remove])\n  (:require [rewrite-clj.zip.move :as m]\n            [rewrite-clj.zip.utils :as u]\n            [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n\n(defn- remove-trailing-space\n  \"Remove all whitespace following a given node.\"\n  [zloc p?]\n  (u/remove-right-while zloc p?))\n\n(defn- remove-preceding-space\n  \"Remove all whitespace preceding a given node.\"\n  [zloc p?]\n  (u/remove-left-while zloc p?))\n\n(defn remove\n  \"Remove value at the given zipper location. Returns the first non-whitespace\n   node that would have preceded it in a depth-first walk. Will remove whitespace\n   appropriately.\n\n  - `[1  2  3]   => [1  3]`\n  - `[1 2]       => [1]`\n  - `[1 2]       => [2]`\n  - `[1]         => []`\n  - `[  1  ]     => []`\n  - `[1 [2 3] 4] => [1 [2 3]]`\n  - `[1 [2 3] 4] => [[2 3] 4]`\n\n   If a node is located rightmost, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are touched. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour.\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (->> (-> (if (or (m/rightmost? zloc)\n                   (m/leftmost? zloc))\n             (remove-preceding-space zloc ws/whitespace?)\n             zloc)\n           (remove-trailing-space ws/whitespace?)\n           z/remove)\n       (ws/skip-whitespace z/prev)))\n\n(defn remove-preserve-newline\n  \"Same as remove but preserves newlines\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (->> (-> (if (or (m/rightmost? zloc)\n                   (m/leftmost? zloc))\n             (remove-preceding-space zloc #(and (ws/whitespace? %)\n                                                (not (ws/linebreak? %))))\n             zloc)\n           (remove-trailing-space #(and (ws/whitespace? %)\n                                                (not (ws/linebreak? %))))\n           z/remove)\n       (ws/skip-whitespace z/prev)))\n\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;;;;AAQA;;;AAAA,AAAOA,AAEJC,AAAKC;AAFR,AAGE,AAACC,AAAqBF,AAAKC;;AAE7B;;;AAAA,AAAOE,AAEJH,AAAKC;AAFR,AAGE,AAACG,AAAoBJ,AAAKC;;AAE5B;;;;;;;;;;;;;;;;;;;AAAA,AAAMM,AAkBHP;AAlBH,AAAA,AAmBSA;AAnBT;AAAA,AAAA,AAAA,AAAAK,AAAA;;;AAAA,AAAAC,AAqBO,AAAI,AAAI,AAAI,AAACE,AAAaR,AACd,AAACS,AAAYT,AACnB,AAACG,AAAuBH,AAAKU,AAC7BV,AACF,AAACD,AAAsBW,AACvBC,AACJ,AAACC,AAAmBC;AA3B3B,AAAA,AAoBUP;AApBV;AAAA,AAAA,AAAA,AAAAD,AAAA;;;AAAAC;;AA6BA;;;AAAA,AAAMQ,AAEHd;AAFH,AAAA,AAGSA;AAHT;AAAA,AAAA,AAAA,AAAAK,AAAA;;;AAAA,AAAAC,AAKO,AAAI,AAAI,AAAI,AAACE,AAAaR,AACd,AAACS,AAAYT,AACnB,AAAA,AAAAe,AAACZ,AAAuBH,AAG1B,AAACD,AAEDY,AACJ,AAACC,AAAmBC;AANd,AAA8B,AAAAG,AAAK,AAAAD,AAACL;AAAN,AAAA,AAAAM;AACK,AAACC,AAAI,AAAAF,AAACG;;AADXF;;AAE9BhB,AACF,AAAAmB;AAAA,AAAwB,AAAAH,AAAK,AAAAG,AAACT;AAAN,AAAA,AAAAM;AACa,AAACC,AAAI,AAAAE,AAACD;;AADnBF;;;AAVnC,AAAA,AAIUV;AAJV;AAAA,AAAA,AAAA,AAAAD,AAAA;;;AAAAC","names",["rewrite-clj.zip.removez/remove-trailing-space","zloc","p?","rewrite-clj.zip.utils/remove-right-while","rewrite-clj.zip.removez/remove-preceding-space","rewrite-clj.zip.utils/remove-left-while","js/Error","%","rewrite-clj.zip.removez/remove","rewrite-clj.zip.move/rightmost?","rewrite-clj.zip.move/leftmost?","rewrite-clj.zip.whitespace/whitespace?","clojure.zip/remove","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2","clojure.zip/prev","rewrite-clj.zip.removez/remove-preserve-newline","p1__42355#","and__4120__auto__","cljs.core/not","rewrite-clj.zip.whitespace/linebreak?","p1__42356#"]]],"~:cache-keys",["~#cmap",[["^19","rewrite_clj/node/token.cljs"],[1568862518445,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^U","^R","~$rewrite-clj.node.protocols"]]],["^19","cljs/tools/reader/impl/utils.cljs"],[1556316222245,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","~$clojure.string","~$goog.string"]]],["^19","goog/math/math.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","~$goog.array","~$goog.asserts"]]],["^19","goog/array/array.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^1N"]]],["^19","rewrite_clj/zip/move.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^T","^P"]]],["^19","goog/debug/error.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U"]]],["^19","goog/dom/nodetype.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U"]]],["^19","cljs/tools/reader/impl/inspect.cljs"],[1556316222245,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R"]]],["^19","cljs/tools/reader.cljs"],[1556316222245,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader.impl.errors","^1M","^1L","~$goog.string.StringBuffer"]]],["^19","rewrite_clj/node/forms.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1J"]]],["^19","rewrite_clj/zip/utils.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^P"]]],["^19","goog/object/object.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U"]]],"~:SHADOW-TIMESTAMP",[1570928878000,1556316222000],["^19","goog/math/long.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^1N","~$goog.reflect"]]],["^19","rewrite_clj/node/reader_macro.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1J","~$rewrite-clj.node.whitespace"]]],["^19","goog/string/internal.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U"]]],["^19","goog/functions/functions.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U"]]],["^19","clojure/walk.cljs"],[1556316222100,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R"]]],["^19","goog/structs/map.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^19","rewrite_clj/node/meta.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1J","^1V"]]],["^19","rewrite_clj/node/stringz.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1J","~$cljs.tools.reader","^1K"]]],["^19","rewrite_clj/node/comment.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1J"]]],["^19","rewrite_clj/node/keyword.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1J"]]],["^19","goog/asserts/asserts.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^19","goog/uri/uri.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^1M","^1N","^1L","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^19","rewrite_clj/node/protocols.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1K"]]],["^19","rewrite_clj/node/seq.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1J"]]],["^19","rewrite_clj/node/uneval.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1J"]]],["^19","goog/base.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",[]]],["^19","goog/structs/structs.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^1M","~$goog.object"]]],["^19","cljs/tools/reader/impl/errors.cljs"],[1556316222245,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1O","^1K","~$cljs.tools.reader.impl.inspect"]]],["^19","rewrite_clj/node/whitespace.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1J"]]],["^19","rewrite_clj/node/coercer.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","~$rewrite-clj.node.comment","~$rewrite-clj.node.forms","~$rewrite-clj.node.keyword","~$rewrite-clj.node.quote","~$rewrite-clj.node.stringz","~$rewrite-clj.node.uneval","~$rewrite-clj.node.meta","~$rewrite-clj.node.fn","^1J","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.seq","~$rewrite-clj.node.token","^1V"]]],["^19","clojure/string.cljs"],[1556316222100,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1L","^1S"]]],["^19","goog/string/string.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","~$goog.string.internal"]]],["^19","goog/reflect/reflect.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U"]]],["^19","rewrite_clj/node/fn.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1J","~$clojure.walk"]]],["^19","rewrite_clj/node.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","~$rewrite-clj.node.coercer","^1J","^29","^2@","^1V","^2A","^27","^28","^2=","^2;","^2?","^2:","^2<","^2>"]]],["^19","rewrite_clj/zip/removez.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^V","^Q","^T","^P"]]],["^19","clojure/zip.cljs"],[1556316222100,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R"]]],["^19","goog/string/stringbuffer.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U"]]],["^19","cljs/tools/reader/reader_types.cljs"],[1556316222245,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1P","^1L","^1S"]]],["^19","goog/iter/iter.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^1M","^1N","~$goog.functions","~$goog.math"]]],["^19","rewrite_clj/node/quote.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1J"]]],["^19","cljs/tools/reader/impl/commons.cljs"],[1556316222245,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","^1R","^1O","^1P"]]],["^19","cljs/core.cljs"],[1556316222100,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["~$goog.math.Long","~$goog.math.Integer","^1L","^25","^1M","~$goog.Uri","^1S"]]],["^19","goog/math/integer.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U"]]],["^19","goog/uri/utils.js"],[1559507890775,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^1M","^1N","^1L"]]],["^19","rewrite_clj/zip/whitespace.cljs"],[1568862518445,"^1F",["^ ","^1G",null,"^1H",["^H",[]],"^1I",["^U","^R","~$rewrite-clj.node","^P"]]]]],"~:clj-info",["^ ","jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1559876774000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/cljs/tools/reader/reader_types.clj",1556316222000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1556312825000,"jar:file:/Users/lambda_school_loaner_94/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1556316222000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",1,"^8",5,"^9",1,"^:",28],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",["^I"]],"^J","^K","^N",null,"^O",["^ ","^P","^P","~$u","^Q","^R","^R","^S","^T","^U","^U","~$m","^V","^T","^T","^V","^V","~$z","^P","^Q","^Q"],"^W",["^H",["^X"]],"~:shadow/js-access-global",["^H",["Error"]],"^Y",null,"~:defs",["^ ","~$remove-trailing-space",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",9,"^8",8,"^9",9,"^:",29,"~:private",true,"~:arglists",["^10",["~$quote",["^10",[["~$zloc","~$p?"]]]]],"~:doc","Remove all whitespace following a given node."],"^3>",true,"^J","~$rewrite-clj.zip.removez/remove-trailing-space","^6","rewrite_clj/zip/removez.cljs","^:",29,"~:method-params",["^10",[["^3A","^3B"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"~:variadic?",false,"^7",9,"~:ret-tag","~$any","^9",9,"~:max-fixed-arity",2,"~:fn-var",true,"^3?",["^10",["^3@",["^10",[["^3A","^3B"]]]]],"^3C","Remove all whitespace following a given node."],"~$remove-preceding-space",["^ ","^3=",null,"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",14,"^8",8,"^9",14,"^:",30,"^3>",true,"^3?",["^10",["^3@",["^10",[["^3A","^3B"]]]]],"^3C","Remove all whitespace preceding a given node."],"^3>",true,"^J","~$rewrite-clj.zip.removez/remove-preceding-space","^6","rewrite_clj/zip/removez.cljs","^:",30,"^3E",["^10",[["^3A","^3B"]]],"^3F",null,"^3G",["^10",[null,null]],"^8",1,"^3H",false,"^7",14,"^3I","^3J","^9",14,"^3K",2,"^3L",true,"^3?",["^10",["^3@",["^10",[["^3A","^3B"]]]]],"^3C","Remove all whitespace preceding a given node."],"^I",["^ ","^3=",null,"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",19,"^8",7,"^9",19,"^:",13,"^3?",["^10",["^3@",["^10",[["^3A"]]]]],"^3C","Remove value at the given zipper location. Returns the first non-whitespace\n   node that would have preceded it in a depth-first walk. Will remove whitespace\n   appropriately.\n\n  - `[1  2  3]   => [1  3]`\n  - `[1 2]       => [1]`\n  - `[1 2]       => [2]`\n  - `[1]         => []`\n  - `[  1  ]     => []`\n  - `[1 [2 3] 4] => [1 [2 3]]`\n  - `[1 [2 3] 4] => [[2 3] 4]`\n\n   If a node is located rightmost, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are touched. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour."],"^J","~$rewrite-clj.zip.removez/remove","^6","rewrite_clj/zip/removez.cljs","^:",13,"^3E",["^10",[["^3A"]]],"^3F",null,"^3G",["^10",[null,null]],"^8",1,"^3H",false,"^7",19,"^3I",["^H",["^3J","~$clj-nil"]],"^9",19,"^3K",1,"^3L",true,"^3?",["^10",["^3@",["^10",[["^3A"]]]]],"^3C","Remove value at the given zipper location. Returns the first non-whitespace\n   node that would have preceded it in a depth-first walk. Will remove whitespace\n   appropriately.\n\n  - `[1  2  3]   => [1  3]`\n  - `[1 2]       => [1]`\n  - `[1 2]       => [2]`\n  - `[1]         => []`\n  - `[  1  ]     => []`\n  - `[1 [2 3] 4] => [1 [2 3]]`\n  - `[1 [2 3] 4] => [[2 3] 4]`\n\n   If a node is located rightmost, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are touched. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour."],"~$remove-preserve-newline",["^ ","^3=",null,"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",48,"^8",7,"^9",48,"^:",30,"^3?",["^10",["^3@",["^10",[["^3A"]]]]],"^3C","Same as remove but preserves newlines"],"^J","~$rewrite-clj.zip.removez/remove-preserve-newline","^6","rewrite_clj/zip/removez.cljs","^:",30,"^3E",["^10",[["^3A"]]],"^3F",null,"^3G",["^10",[null,null]],"^8",1,"^3H",false,"^7",48,"^3I",["^H",["^3J","^3P"]],"^9",48,"^3K",1,"^3L",true,"^3?",["^10",["^3@",["^10",[["^3A"]]]]],"^3C","Same as remove but preserves newlines"]],"^Z",["^ ","^R","^R"],"^15",["^ ","^X",["^H",[]]],"^16",["^ "],"^17",["^U","^R","^V","^Q","^T","^P"]],"^M","^K","~:ns-specs",["^ "],"~:ns-spec-vars",[],"~:compiler-options",["^1E",[["^3U","~:static-fns"],true,["^3U","~:elide-asserts"],false,["^3U","~:optimize-constants"],null,["^3U","^1<"],null,["^3U","~:external-config"],null,["^3U","~:tooling-config"],null,["^3U","~:emit-constants"],null,["^3U","~:load-tests"],null,["^3U","~:form-size-threshold"],null,["^3U","~:infer-externs"],true,["^3U","^1>"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3U","~:fn-invoke-direct"],null,["^3U","~:source-map"],"/dev/null"]]]