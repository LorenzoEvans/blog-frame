{"version":3,"sources":["bidi/bidi.cljc"],"mappings":"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","names":["bidi.bidi/url-encode","string","G__42984","js/encodeURIComponent","bidi.bidi/url-decode","G__42987","js/decodeURIComponent","bidi.bidi/uuid","s","cljs.core/uuid","x__4433__auto__","m__4434__auto__","bidi.bidi/encode-parameter","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","bidi.bidi/ParameterEncoding","_","goog.object/set","G__43040","G__43041","G__43042","G__43043","G__43044","G__43045","cljs.core/PROTOCOL_SENTINEL","cljs.core/UUID","cljs.core/Keyword","k","cljs.core/namespace","cljs.core/name","bidi.bidi/segment-regex-group","bidi.bidi/param-key","bidi.bidi/transform-param","bidi.bidi/unmatch-segment","bidi.bidi/matches?","bidi.bidi/PatternSegment","params","G__43142","G__43143","G__43144","G__43153","G__43154","G__43155","G__43157","G__43158","G__43159","G__43166","G__43167","G__43168","G__43192","G__43193","G__43194","G__43225","G__43226","G__43227","G__43231","G__43232","G__43233","this","cljs.core/identity","js/RegExp","cljs.core/re-matches","cljs.core/PersistentVector","cljs.core/first","cljs.core/second","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","temp__5733__auto__","v","cljs.core.get.cljs$core$IFn$_invoke$arity$2","pred__43202","expr__43203","G__43207","G__43208","js/Error","cljs.core/=","cljs.core/keyword","cljs.core/long","pred__43228","expr__43229","p1__43136#","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","js/Number","pred__43236","expr__43237","cljs.core/not","js/isNaN","bidi.bidi/match-pattern","bidi.bidi/unmatch-pattern","bidi.bidi/Pattern","env","m","bidi.bidi/resolve-handler","bidi.bidi/unresolve-handler","bidi.bidi/Matched","bidi.bidi/just-path","path","uri-string","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","js/goog.Uri","p__43299","vec__43307","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","bidi.bidi/match-pair","pattern","matched","orig-env","cljs.core.update.cljs$core$IFn$_invoke$arity$3","temp__5735__auto__","match-result","bidi.bidi/match-beginning","regex-pattern","cljs.core/last","cljs.core/re-pattern","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","bidi.bidi/succeed","handler","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","G__43369","G__43370","G__43371","G__43375","G__43376","G__43377","G__43399","G__43400","G__43401","G__43403","G__43404","G__43405","p","clojure.string/replace","groups","%","cljs.core.map.cljs$core$IFn$_invoke$arity$2","x","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core/next","cljs.core/butlast","cljs.core/list","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/apply","cljs.core/vector","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/assoc-in","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","p1__43347#","cljs.core/PersistentArrayMap","cljs.core/every?","p__43390","vec__43391","cljs.core/fn?","cljs.core/set?","G__43396","cljs.core/seq","cljs.core/PersistentHashMap","p__43408","vec__43409","G__43412","cljs.core/PersistentHashSet","p1__43355#","cljs.core/some","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3","cljs.core/count","cljs.core/>","cljs.core/PersistentTreeSet","p1__43357#","bidi.bidi/unmatch-pair","r","G__43445","G__43446","G__43447","G__43450","G__43451","G__43452","G__43479","G__43480","G__43481","G__43494","G__43495","G__43496","G__43501","G__43502","G__43503","p1__43431#","p1__43432#","cljs.core/List","p1__43433#","p1__43434#","p1__43436#","p1__43438#","p1__43439#","p1__43440#","cljs.core/LazySeq","p1__43441#","p1__43442#","cljs.core/Symbol","cljs.core/Var","cljs.core/deref","bidi.bidi/match-route*","route","options","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","bidi.bidi/match-route","p__43558","map__43560","cljs.core/hash-map","seq43542","G__43543","G__43544","self__4717__auto__","bidi.bidi/path-for*","bidi.bidi/path-for","p__43589","map__43590","seq43578","G__43579","G__43580","bidi.bidi/matches","bidi.bidi/Matches","G__43609","G__43610","G__43611","this__4385__auto__","k__4386__auto__","this__4387__auto__","k43624","else__4388__auto__","G__43648","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__43659","vec__43660","k__4408__auto__","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","G__43623","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","this__4381__auto__","h__4243__auto__","fexpr__43687","coll__4382__auto__","cljs.core/hash-unordered-coll","this43625","other43626","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core/-with-meta","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__43696","cljs.core/keyword-identical?","expr__43697","G__43700","G__43701","G__43702","G__43703","this__4397__auto__","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","bidi.bidi/Route","this__4428__auto__","writer__4429__auto__","cljs.core/-write","G__43635","extmap__4424__auto__","G__43706","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","bidi.bidi/->Route","bidi.bidi/map->Route","bidi.bidi/gather","bidi.bidi/RouteSeq","context","G__43733","bidi.bidi/route-seq","p__43743","vec__43745","ctx","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","iter__4523__auto__","s__43782","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__43784","cljs.core/chunk-buffer","i__43783","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__43781","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","bidi.bidi.route_seq.cljs$core$IFn$_invoke$arity$2","G__43812","G__43813","G__43814","p1__43803#","p1__43804#","p1__43805#","p1__43808#","p1__43809#","bidi.bidi/routes","bidi.bidi/RouteProvider","k43817","G__43829","alts","p__43832","vec__43833","G__43816","fexpr__43848","this43818","other43819","pred__43864","expr__43865","G__43868","G__43869","bidi.bidi/Alternates","G__43822","G__43892","bidi.bidi/->Alternates","bidi.bidi/map->Alternates","p1__43815#","bidi.bidi/alts","seq43900","self__4718__auto__","k43924","G__43937","tag","p__43942","vec__43943","G__43923","fexpr__43977","this43925","other43926","pred__43998","expr__43999","G__44001","G__44002","G__44003","G__44004","bidi.bidi/TaggedMatch","G__43934","G__44047","bidi.bidi/->TaggedMatch","bidi.bidi/map->TaggedMatch","bidi.bidi/tag","k44050","G__44066","id","p__44071","vec__44072","G__44049","fexpr__44099","this44051","other44052","pred__44128","expr__44129","G__44131","G__44132","G__44137","G__44138","bidi.bidi/IdentifiableHandler","G__44053","G__44156","bidi.bidi/->IdentifiableHandler","bidi.bidi/map->IdentifiableHandler","G__44159","bidi.bidi/handler","k44169","G__44175","routes","p__44178","vec__44180","G__44168","fexpr__44224","this44170","other44171","pred__44231","expr__44232","G__44234","G__44235","G__44236","G__44237","bidi.bidi/RoutesContext","G__44173","G__44251","bidi.bidi/->RoutesContext","bidi.bidi/map->RoutesContext","bidi.bidi/routes-context","bidi.bidi/compile-route","cljs.core/chunk-first"],"sourcesContent":[";; Copyright \u00a9 2014, JUXT LTD.\n\n(ns bidi.bidi\n  (:refer-clojure :exclude [uuid])\n  (:require clojure.string)\n  #?(:cljs (:import goog.Uri)))\n\n(defn url-encode\n  [string]\n  (some-> string\n          str\n          #?(:clj (java.net.URLEncoder/encode \"UTF-8\")\n             :cljs (js/encodeURIComponent))\n          (.replace \"+\" \"%20\")))\n\n(defn url-decode\n  ([string] #?(:clj (url-decode string \"UTF-8\")\n               :cljs (some-> string str (js/decodeURIComponent))))\n  #?(:clj ([string encoding]\n           (some-> string str (java.net.URLDecoder/decode encoding)))))\n\n(defn uuid\n  \"Function for creating a UUID of the appropriate type for the platform.\nNote that this function should _only_ be used in route patterns as, at least\nin the case of ClojureScript, it does not validate that the input string is\nactually a valid UUID (this is handled by the route matching logic).\"\n  [s]\n  #?(:clj (java.util.UUID/fromString s)\n     :cljs (cljs.core/uuid s)))\n\n;; When forming paths, parameters are encoded into the URI according to\n;; the parameter value type.\n\n(defprotocol ParameterEncoding\n  (encode-parameter [_]))\n\n(extend-protocol ParameterEncoding\n  ;; We don't URL encode strings, we leave the choice of whether to do so\n  ;; to the caller.\n  #?(:clj String\n     :cljs string)\n  (encode-parameter [s] s)\n\n  #?(:clj CharSequence)\n  #?(:clj (encode-parameter [s] s))\n\n  #?(:clj Number\n     :cljs number)\n  (encode-parameter [s] s)\n\n  #?(:clj java.util.UUID\n     :cljs cljs.core.UUID)\n  (encode-parameter [s] (str s))\n\n  ;; We do URL encode keywords, however. Namespaced\n  ;; keywords use a separated of %2F (a URL encoded forward slash).\n\n  #?(:clj clojure.lang.Keyword\n     :cljs cljs.core.Keyword)\n  (encode-parameter [k]\n    (url-encode\n     (str (namespace k)\n          (when (namespace k) \"/\")\n          (name k)))))\n\n;; A PatternSegment is part of a segmented pattern, where the pattern is\n;; given as a vector. Each segment can be of a different type, and each\n;; segment can optionally be associated with a key, thereby contributing\n;; a route parameter.\n\n(defprotocol PatternSegment\n  ;; segment-regex-group must return the regex pattern that will consume the\n  ;; segment, when matching routes.\n  (segment-regex-group [_])\n  ;; param-key, if non nil, specifies the key in the parameter map which\n  ;; holds the segment's value, returned from matching a route\n  (param-key [_])\n  ;; transform specifies a function that will be applied the value\n  ;; extracted from the URI when matching routes.\n  (transform-param [_])\n  ;; unmatch-segment generates the part of the URI (a string) represented by\n  ;; the segment, when forming URIs.\n  (unmatch-segment [_ params])\n  ;; matches? is used to check if the type or value of the parameter\n  ;; satisfies the segment qualifier when forming a URI.\n  (matches? [_ s]))\n\n(extend-protocol PatternSegment\n  #?(:clj String\n     :cljs string)\n  (segment-regex-group [this]\n    #?(:clj (str \"\\\\Q\" this \"\\\\E\")\n       :cljs this))\n  (param-key [_] nil)\n  (transform-param [_] identity)\n  (unmatch-segment [this _] this)\n\n  #?(:clj java.util.regex.Pattern\n     :cljs js/RegExp)\n  (segment-regex-group [this]\n    #?(:clj (.pattern this)\n       :cljs (aget this \"source\")))\n  (param-key [_] nil)\n  (transform-param [_] identity)\n  (matches? [this s] (re-matches this (str s)))\n\n  #?(:clj clojure.lang.APersistentVector\n     :cljs cljs.core.PersistentVector)\n  ;; A vector allows a keyword to be associated with a segment. The\n  ;; qualifier for the segment comes first, then the keyword.\n  ;; The qualifier is usually a regex\n  (segment-regex-group [this] (segment-regex-group (first this)))\n  (param-key [this]\n    (let [k (second this)]\n      (if (keyword? k)\n        k\n        (throw (ex-info (str \"If a PatternSegment is represented by a vector, the second\n                               element must be the keyword associated with the pattern: \"\n                             this)\n                        {})))))\n  (transform-param [this] (transform-param (first this)))\n  (unmatch-segment [this params]\n    (let [k (second this)]\n      (if-not (keyword? k)\n        (throw (ex-info (str \"If a PatternSegment is represented by a vector, the second element\n                               must be the key associated with the pattern: \"\n                             this)\n                        {})))\n      (if-let [v (get params k)]\n        (if (matches? (first this) v)\n          (encode-parameter v)\n          (throw (ex-info (str \"Parameter value of \" v \" (key \" k \") \"\n                               \"is not compatible with the route pattern \" this)\n                          {})))\n        (throw (ex-info (str \"No parameter found in params for key \" k)\n                        {})))))\n\n  #?(:clj clojure.lang.Keyword\n     :cljs cljs.core.Keyword)\n  ;; This is a very common form, so we're conservative as a defence against injection attacks.\n  (segment-regex-group [_] \"[A-Za-z0-9\\\\-\\\\_\\\\.]+\")\n  (param-key [this] this)\n  (transform-param [_] identity)\n  (unmatch-segment [this params]\n    (if-let [v (this params)]\n      (encode-parameter v)\n      (throw (ex-info (str \"Cannot form URI without a value given for \"\n                           this \" parameter\")\n                      {}))))\n\n  #?(:clj clojure.lang.Fn\n     :cljs function)\n  (segment-regex-group [this]\n    (condp = this\n     keyword \"[A-Za-z]+[A-Za-z0-9\\\\*\\\\+\\\\!\\\\-\\\\_\\\\?\\\\.]*(?:%2F[A-Za-z]+[A-Za-z0-9\\\\*\\\\+\\\\!\\\\-\\\\_\\\\?\\\\.]*)?\"\n     long \"-?\\\\d{1,19}\"\n     uuid \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\"\n     :otherwise (throw (ex-info (str \"Unidentified function qualifier to pattern segment: \" this) {}))))\n  (transform-param [this]\n    (condp = this\n      ;; keyword is close, but must be applied to a decoded string, to work with namespaced keywords\n      keyword (comp keyword url-decode)\n      long #?(:clj #(Long/parseLong %) :cljs #(js/Number %))\n      uuid uuid\n      (throw (ex-info (str \"Unrecognized function \" this) {}))))\n  (matches? [this s]\n    (condp = this\n      keyword (keyword? s)\n      long #?(:clj (some #(instance? % s) [Byte Short Integer Long])\n              :cljs (not (js/isNaN s)))\n      uuid (instance? #?(:clj java.util.UUID :cljs cljs.core.UUID) s))))\n\n;; A Route is a pair. The pair has two halves: a pattern on the left,\n;; while the right contains the result if the pattern matches.\n\n(defprotocol Pattern\n  (match-pattern [_ env]\n    \"Return a new state if this pattern matches the given state, or\n    falsy otherwise. If a new state is returned it will usually have the\n    rest of the path to match in the :remainder entry.\")\n  (unmatch-pattern [_ m]))\n\n(defprotocol Matched\n  (resolve-handler [_ m])\n  (unresolve-handler [_ m]))\n\n(defn just-path\n  [path]\n  (let [uri-string (str \"http://bidi.bidi/\" path)]\n    (subs #?(:clj (.getPath (java.net.URL. uri-string))\n             :cljs (.getPath (goog.Uri. uri-string)))\n          1)))\n\n(defn match-pair\n  \"A pair contains a pattern to match (either fully or partially) and an\n  expression yielding a handler. The second parameter is a map\n  containing state, including the remaining path.\"\n  [[pattern matched] orig-env]\n  (let [env (update orig-env :remainder just-path)]\n    (when-let [match-result (match-pattern pattern env)]\n      (resolve-handler matched match-result))))\n\n(defn match-beginning\n  \"Match the beginning of the :remainder value in m. If matched, update\n  the :remainder value in m with the path that remains after matching.\"\n  [regex-pattern env]\n  (when-let [path (last (re-matches (re-pattern (str regex-pattern \"(.*)\"))\n                                    (:remainder env)))]\n    (assoc env :remainder path)))\n\n(defn succeed [handler m]\n  (when (= (:remainder m) \"\")\n    (merge (dissoc m :remainder) {:handler handler})))\n\n(extend-protocol Pattern\n  #?(:clj String\n     :cljs string)\n  #?(:clj (match-pattern [this env]\n                         (if (= (.length this) 0)\n                           env\n                           (when (.startsWith ^String (:remainder env) this)\n                             (assoc env :remainder (.substring ^String (:remainder env) (.length this))))))\n     ;; TODO: Optimize cljs version as above\n     :cljs (match-pattern [this env]\n                          (match-beginning (str \"(\" (segment-regex-group this) \")\") env)))\n  (unmatch-pattern [this _] this)\n\n  #?(:clj java.util.regex.Pattern\n     :cljs js/RegExp)\n  (match-pattern [this env]\n    (match-beginning (str \"(\" (segment-regex-group this) \")\") env))\n  ;; We can't unmatch-pattern as you can't go from a regex to a\n  ;; string (it's a many-to-one mapping)\n\n  #?(:cljs\n     (unmatch-pattern [this m]\n                      (let [p (.pattern this)]\n                        (unmatch-pattern (clojure.string/replace p #\"\\\\\\\\\" \"\") m))))\n\n  #?(:clj Boolean\n     :cljs boolean)\n  (match-pattern [this env]\n    (when this (assoc env :remainder \"\")))\n  (unmatch-pattern [this _] (when this \"\"))\n\n  #?(:clj clojure.lang.APersistentVector\n     :cljs cljs.core.PersistentVector)\n  (match-pattern [this env]\n    (when-let [groups (as-> this %\n                        ;; Make regexes of each segment in the vector\n                        (map segment-regex-group %)\n                        ;; Form a regexes group from each\n                        (map (fn [x] (str \"(\" x \")\")) %)\n                        (reduce str %)\n                        ;; Add the 'remainder' group\n                        (str % \"(.*)\")\n                        (re-pattern %)\n                        (re-matches % (:remainder env))\n                        (next %))]\n      (let [params (->> groups\n                        butlast         ; except the 'remainder' group\n                        ;; Transform parameter values if necessary\n                        (map list) (map apply (map transform-param this))\n                        ;; Pair up with the parameter keys\n                        (map vector (map param-key this))\n                        ;; Only where such keys are specified\n                        (filter first)\n                        ;; Merge all key/values into a map\n                        (into {}))]\n        (-> env\n            (assoc-in [:remainder] (last groups))\n            (update-in [:route-params] merge params)))))\n\n  (unmatch-pattern [this m]\n    (apply str (map #(unmatch-segment % (:params m)) this)))\n\n  #?(:clj clojure.lang.Keyword\n     :cljs cljs.core.Keyword)\n  (match-pattern [this env] (when (= this (:request-method env)) env))\n  (unmatch-pattern [_ _] \"\")\n\n  #?(:clj clojure.lang.APersistentMap\n     :cljs cljs.core.PersistentArrayMap)\n  (match-pattern [this env]\n    (when (every? (fn [[k v]]\n                    (cond\n                      (or (fn? v) (set? v)) (v (get env k))\n                      :otherwise (= v (get env k))))\n                  (seq this))\n      env))\n  (unmatch-pattern [_ _] \"\")\n\n  #?(:cljs cljs.core.PersistentHashMap)\n  #?(:cljs\n     (match-pattern [this env]\n                    (when (every? (fn [[k v]]\n                                    (cond\n                                      (or (fn? v) (set? v)) (v (get env k))\n                                      :otherwise (= v (get env k))))\n                                  (seq this))\n                      env)))\n  #?(:cljs\n     (unmatch-pattern [_ _] \"\"))\n\n  #?(:clj clojure.lang.APersistentSet\n     :cljs cljs.core.PersistentHashSet)\n  (match-pattern [this s]\n    (some #(match-pattern % s)\n          ;; We try to match on the longest string first, so that the\n          ;; empty string will be matched last, after all other cases\n          (sort-by count > this)))\n  (unmatch-pattern [this s] (unmatch-pattern (first this) s))\n\n  #?(:cljs cljs.core.PersistentTreeSet)\n  #?(:cljs\n     (match-pattern [this s]\n                    (some #(match-pattern % s)\n                          ;; We try to match on the longest string first, so that the\n                          ;; empty string will be matched last, after all other cases\n                          (sort-by count > this))))\n  #?(:cljs\n     (unmatch-pattern [this s] (unmatch-pattern (first this) s))))\n\n(defn unmatch-pair [v m]\n  (when-let [r (unresolve-handler (second v) m)]\n    (str (unmatch-pattern (first v) m) r)))\n\n(extend-protocol Matched\n  #?(:clj String\n     :cljs string)\n  (unresolve-handler [_ _] nil)\n\n  #?(:clj clojure.lang.APersistentVector\n     :cljs cljs.core.PersistentVector)\n  (resolve-handler [this m] (some #(match-pair % m) this))\n  (unresolve-handler [this m] (some #(unmatch-pair % m) this))\n\n  #?(:clj clojure.lang.PersistentList\n     :cljs cljs.core.List)\n  (resolve-handler [this m] (some #(match-pair % m) this))\n  (unresolve-handler [this m] (some #(unmatch-pair % m) this))\n\n  #?(:clj clojure.lang.APersistentMap\n     :cljs cljs.core.PersistentArrayMap)\n  (resolve-handler [this m] (some #(match-pair % m) this))\n  (unresolve-handler [this m] (some #(unmatch-pair % m) this))\n  #?(:cljs cljs.core.PersistentHashMap)\n  #?(:cljs (resolve-handler [this m] (some #(match-pair % m) this)))\n  #?(:cljs (unresolve-handler [this m] (some #(unmatch-pair % m) this)))\n\n  #?(:clj clojure.lang.LazySeq\n     :cljs cljs.core.LazySeq)\n  (resolve-handler [this m] (some #(match-pair % m) this))\n  (unresolve-handler [this m] (some #(unmatch-pair % m) this))\n\n  #?(:clj clojure.lang.Symbol\n     :cljs cljs.core.Symbol)\n  (resolve-handler [this m] (succeed this m))\n  (unresolve-handler [this m] (when (= this (:handler m)) \"\"))\n\n  #?(:clj clojure.lang.Var\n     :cljs cljs.core.Var)\n  (resolve-handler [this m] (succeed this m))\n  (unresolve-handler [this m] (unresolve-handler @this m))\n\n  #?(:clj clojure.lang.Keyword\n     :cljs cljs.core.Keyword)\n  (resolve-handler [this m] (succeed this m))\n  (unresolve-handler [this m] (when (= this (:handler m)) \"\"))\n\n  #?(:clj clojure.lang.Fn\n     :cljs function)\n  (resolve-handler [this m] (succeed this m))\n  (unresolve-handler [this m] (when (= this (:handler m)) \"\"))\n\n  nil\n  (resolve-handler [this m] nil)\n  (unresolve-handler [this m] nil))\n\n(defn match-route*\n  [route path options]\n  (-> (match-pair route (assoc options :remainder path :route route))\n      (dissoc :route)))\n\n(defn match-route\n  \"Given a route definition data structure and a path, return the\n  handler, if any, that matches the path.\"\n  [route path & {:as options}]\n  (match-route* route path options))\n\n(defn path-for*\n  \"Given a route definition data structure, a handler and an option map, return a\n  path that would route to the handler. The map must contain the values to any\n  parameters required to create the path, and extra values are silently ignored.\"\n  [route handler params]\n  (when (nil? handler)\n    (throw (ex-info \"Cannot form URI from a nil handler\" {})))\n  (unmatch-pair route {:handler handler :params params}))\n\n(defn path-for\n  \"Given a route definition data structure, a handler and an unrolled option map,\n  return a path that would route to the handler. The map must contain the values\n  to any parameters required to create the path, and extra values are silently\n  ignored.\"\n  [route handler & {:as params}]\n  (path-for* route handler params))\n\n;; --------------------------------------------------------------------------------\n;; Route seqs\n;; --------------------------------------------------------------------------------\n\n(defprotocol Matches\n  (matches [_] \"A protocol used in the expansion of possible matches that the pattern can match. This is used to gather all possible routes using route-seq below.\"))\n\n(extend-protocol Matches\n  #?(:clj Object\n     :cljs default)\n  (matches [this] [this])\n\n  #?(:clj clojure.lang.APersistentSet\n     :cljs cljs.core.PersistentHashSet)\n  (matches [this] this)\n\n  #?(:cljs cljs.core.PersistentTreeSet)\n  #?(:cljs (matches [this] this)))\n\n(defrecord Route [handler path])\n\n(defprotocol RouteSeq\n  (gather [_ context] \"Return a sequence of leaves\"))\n\n(defn route-seq\n  ([[pattern matched] ctx]\n   (mapcat\n    identity\n    (for [p (matches pattern)]\n      (gather matched (update-in ctx [:path] (fnil conj []) p)))))\n  ([route]\n   (route-seq route {})))\n\n(extend-protocol RouteSeq\n  #?(:clj clojure.lang.APersistentVector\n     :cljs cljs.core.PersistentVector)\n  (gather [this context] (mapcat #(route-seq % context) this))\n\n  #?(:clj clojure.lang.PersistentList\n     :cljs cljs.core.List)\n  (gather [this context] (mapcat #(route-seq % context) this))\n\n  #?(:clj clojure.lang.APersistentMap\n     :cljs cljs.core.PersistentArrayMap)\n  (gather [this context] (mapcat #(route-seq % context) this))\n\n  #?(:cljs cljs.core.PersistentHashMap)\n  #?(:cljs (gather [this context] (mapcat #(route-seq % context) this)))\n\n  #?(:clj clojure.lang.LazySeq\n     :cljs cljs.core.LazySeq)\n  (gather [this context] (mapcat #(route-seq % context) this))\n\n  #?(:clj Object\n     :cljs default)\n  (gather [this context] [(map->Route (assoc context :handler this))]))\n\n\n;; --------------------------------------------------------------------------------\n;; Protocols\n;; --------------------------------------------------------------------------------\n\n;; RouteProvider - this protocol can be satisfied by records that provide\n;; or generate bidi routes. The reason for providing this protocol in\n;; bidi is to encourage compatibility between record implementations.\n(defprotocol RouteProvider\n  (routes [_] \"Provide a bidi route structure. Returns a vector pair,\n  the first element is the pattern, the second element is the matched\n  route or routes.\"))\n\n;; --------------------------------------------------------------------------------\n;; Utility records\n;; --------------------------------------------------------------------------------\n\n;; Alternates can be used as a pattern. It is constructed with a vector\n;; of possible matching candidates. If one of the candidates matches,\n;; the route is matched. The first pattern in the vector is considered\n;; the canonical pattern for the purposes of URI formation with\n;; (path-for).\n\n;; This is deprecated. You should really use the literal set syntax.\n(defrecord Alternates [alts]\n  Pattern\n  (match-pattern [this m]\n    (some #(match-pattern % m)\n          ;; We try to match on the longest string first, so that the\n          ;; empty string will be matched last, after all other cases\n          (sort-by count > alts)))\n  (unmatch-pattern [this m] (unmatch-pattern (first alts) m))\n  Matches\n  (matches [_] alts))\n\n(defn alts [& alts]\n  (->Alternates alts))\n\n;; If you have multiple routes which match the same handler, but need to\n;; label them so that you can form the correct URI, wrap the handler in\n;; a TaggedMatch.\n(defrecord TaggedMatch [matched tag]\n  Matched\n  (resolve-handler [this m]\n    (resolve-handler matched (assoc m :tag tag)))\n  (unresolve-handler [this m]\n    (if (and (keyword? (:handler m)) (= tag (:handler m)))\n      \"\"\n      (unresolve-handler matched m)))\n  RouteSeq\n  (gather [this context] [(map->Route (assoc context :handler matched :tag tag))]))\n\n(defn tag [matched tag]\n  (->TaggedMatch matched tag))\n\n(defrecord IdentifiableHandler [id handler]\n  Matched\n  (resolve-handler [this m]\n    (resolve-handler handler (assoc m :id id)))\n  (unresolve-handler [this m]\n    (when id\n      (if (= id (:handler m)) \"\"\n          (unresolve-handler handler m)))))\n\n(defn ^:deprecated handler\n  ([k handler]\n   (->IdentifiableHandler k handler))\n  ([handler]\n   (->IdentifiableHandler nil handler)))\n\n;; --------------------------------------------------------------------------------\n;; Context\n;; --------------------------------------------------------------------------------\n\n;; bidi's match-context can be leveraged by Matched wrappers\n\n(defrecord RoutesContext [routes context]\n  Matched\n  (resolve-handler [_ m]\n    (when-let [m (resolve-handler routes m)]\n      (merge context m)))\n\n  (unresolve-handler [_ m]\n    (unresolve-handler routes m))\n\n  RouteSeq\n  (gather [_ context]\n    (gather routes context)))\n\n(defn routes-context\n  \"Wrap a Matched such that a successful match will merge the given\n  context with the match-context. The merge is such that where there\n  is a conflict, the inner sub-tree overrides the outer container.\"\n  [routes context]\n  (->RoutesContext routes context))\n\n;; --------------------------------------------------------------------------------\n;; Deprecated functions\n;; --------------------------------------------------------------------------------\n\n;; Route compilation was only marginally effective and hard to\n;; debug. When bidi matching takes in the order of 30 micro-seconds,\n;; this is good enough in relation to the time taken to process the\n;; overall request.\n\n(defn ^:deprecated compile-route [route]\n  route)\n"]}