{"version":3,"sources":["defblog/routes.cljs"],"mappings":";;;;;;;;;AAoBA,AAAA,AAAMA;AAAN,AACE,AAAKC,AAAQ,AAACC,AAAWC,AAAoB,AAAKC;AAAL,AAAQ,AAAM,AAACC,AAAuBD;AAA9B,AAAiCA;;AAAjC;;;;AACrD,AAAaH;;AAEf,AAAA,AAAMK;AAAN,AACE,AAAA,AAAA,AAACC;;AAGD,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AACE,AAAAO,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACE,AAAAA,AAAAA;;AADH,AAAA,AAAAL,AAAAN;AAAA,AAAAO,AAAAP;AAAA,AACE,AAAAU,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AADH;;;;AAAA,AAAA,AAAAH,AAAA,AAAAT;;AAAA;AAGA,AAAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAY,AAAAZ;AAAAY,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAT,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAAC,AAAAO,AAAAA;AAAA,AACE,AAAAE,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACH,AAAAA,AAAAA;;AADH,AAAA,AAAAL,AAAAN;AAAA,AAAAa,AAAAb;AAAA,AACE,AAAAe,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACJ,AAAAA,AAAAA;;AADH;;;;AAAA,AAAA,AAAAH,AAAA,AAAAT;;AAAA;AAQA,AAACR","names":["defblog.routes/hook-routes!","defblog.routes/history","pushy.core/pushy","secretary.core/dispatch!","x","secretary.core/locate-route","defblog.routes/app-routes","secretary.core/set-config!","action__42976__auto__","params__42977__auto__","cljs.core/map?","map__45209","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core/vector?","vec__45213","secretary.core/add-route!","G__45212","G__45216","re-frame.core/dispatch","map__45218","vec__45221","G__45220","G__45224"],"sourcesContent":["(ns defblog.routes\n  (:require-macros [secretary.core :refer [defroute]])\n  (:import goog.History)\n  (:require\n   [secretary.core :as secretary]\n   [goog.events :as gevents]\n   [goog.history.EventType :as EventType]\n   [re-frame.core :as re-frame]\n   [defblog.events :as events]\n   [pushy.core :as push]))\n\n; (defn hook-browser-navigation! []\n;   (doto (History.)\n;     (gevents/listen\n;      EventType/NAVIGATE\n;      (fn [event]\n;        (secretary/dispatch! (.-token event))))\n;     (.setEnabled true)))\n\n\n(defn hook-routes! []\n  (def history (push/pushy secretary/dispatch! (fn [x] (when (secretary/locate-route x) x))))\n  (push/start! history))\n\n(defn app-routes []\n  (secretary/set-config! :prefix \"/\")\n  ;; --------------------\n  ;; define routes here\n  (defroute \"/\" []\n    (re-frame/dispatch [::events/set-active-panel :home-panel]))\n\n  (defroute \"/about\" []\n    (re-frame/dispatch [::events/set-active-panel :about-panel]))\n\n  ; (defroute \"/lambda-labs-graphql-1\" []\n  ;   (re-frame/dispatch [::events/set-active-panel :lambda-labs-graphql-1]))\n  ;; --------------------\n\n\n  (hook-routes!))\n"]}