{"version":3,"sources":["defblog/routes.cljs"],"mappings":";;;;;;;AASA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAIL,AAAKC,AACH,AAAA,AAAAC,AAAME;AAAN,AAAgB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AACkB,AAAA,AAAAH,AAAmB,AAAAA,AAAA,AAAA,AAAA,AAACK;AADtC,AAAA,AAAAF,AAAAA,AAACC,AAAAA,AAAAA;;AAAjB,AAEME;AAFNL;AAAA,AAEa,AAAAA,AAACM,AAAiBT;;;AAF/B,AAGE,AAACU,AAAWN,AAASI;;AAEzB,AAAA,AAAOG,AAAWC;AAAlB,AACE,AAACH,AAAiBT,AAAOY;;AAG3B,AAAA,AAAMC;AAAN,AACE,AAAaZ;;AAEf,AAAKa,AAAQ,AAACC,AAAQC,AAAchB;AAEpC,AAAA,AAAMiB,AAAQC;AAAd,AACE,AAAiBjB,AAAQiB","names":["defblog.routes/routes","defblog.routes/history","p1__44325#","p1__44326#","dispatch","G__44327","re-frame.core/dispatch","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","match","bidi.bidi/match-route","pushy.core/pushy","defblog.routes/parse-url","url","defblog.routes/start!","defblog.routes/url-for","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","bidi.bidi/path-for","defblog.routes/token!","token"],"sourcesContent":["(ns defblog.routes\n  (:require\n   [secretary.core :as secretary]\n   [re-frame.core :as re-frame :refer [dispatch]]\n   [defblog.events :as events]\n   [bidi.bidi :as bidi]\n   [pushy.core :as push]))\n\n; a route is just a vector with a pattern and result\n(def routes [\"/\" {\"\" :home\n                  \"about\" :about\n                  \"article/\" {[:slug] :article}}])\n; implements bi-directional routing, for forward and backward nav in browser.\n(def history\n  (let [dispatch #(dispatch [:set-active-page\n                             {:page (:handler %) :slug (get-in % [:route-params :slug])}])\n        match #(bidi/match-route routes %)]\n    (push/pushy dispatch match)))\n\n(defn- parse-url [url]\n  (bidi/match-route routes url))\n; bidi/match-route converts urls into data structures to search for in routes.\n\n(defn start! []\n  (push/start! history))\n\n(def url-for (partial bidi/path-for routes))\n\n(defn token! [token]\n  (push/set-token! history token))\n\n; (defn- dispatch-route [matched-route]\n;   (let [panel-name (keyword (str (name (:handler matched-route)) \"-panel\"))]\n;     (re-frame/dispatch [::events/set-active-panel panel-name])))\n\n\n\n\n; (defn hook-browser-navigation! []\n;   (doto (History.)\n;     (gevents/listen\n;      EventType/NAVIGATE\n;      (fn [event]\n;        (secretary/dispatch! (.-token event))))\n;     (.setEnabled true)))\n\n\n; (defn hook-routes! []\n;   (def history (push/pushy secretary/dispatch! (fn [x] (when (secretary/locate-route x) x))))\n;   (push/start! history))\n\n; (defn app-routes []\n;   (secretary/set-config! :prefix \"/\")\n;   ;; --------------------\n;   ;; define routes here\n;   (defroute \"/\" []\n;     (re-frame/dispatch [::events/set-active-panel :home-panel]))\n\n;   (defroute \"/about\" []\n;     (re-frame/dispatch [::events/set-active-panel :about-panel]))\n\n;   (defroute \"/lambda-labs-gql-1\" []\n;     (re-frame/dispatch [::events/set-active-panel :lambda-labs-gql-1]))\n;   ; --------------------\n\n\n;   (hook-routes!))\n"]}