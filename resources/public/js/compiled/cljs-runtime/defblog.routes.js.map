{"version":3,"sources":["defblog/routes.cljs"],"mappings":";;;;;;;;;;AAYA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAGL,AAAA,AAAOC,AAAWC;AAAlB,AACE,AAACC,AAAiBH,AAAOE;;AAE3B,AAAA,AAAOE,AAAgBC;AAAvB,AACE,AAAMC,AAAW,AAACC,AAAQ,AAAA,AAAK,AAACC,AAAK,AAAA,AAAUH;AAA/C,AACE,AAAAI,AAAA,AAAA,AAA8CH;AAA9C,AAAA,AAAAG,AAAAA,AAACC,AAAAA,AAAAA;;AAEL,AAAA,AAAMC;AAAN,AACE,AAAAC,AAAc,AAACE,AAAYV,AAAeH;AAA1C,AAAA,AAAAW,AAACC;;AAEH,AAAKE,AAAQ,AAACC,AAAQC,AAAcjB","names":["defblog.routes/routes","defblog.routes/parse-url","url","bidi.bidi/match-route","defblog.routes/dispatch-route","matched-route","panel-name","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/name","G__44269","re-frame.core/dispatch","defblog.routes/app-routes","G__44270","pushy/start!","pushy/pushy","defblog.routes/url-for","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","bidi.bidi/path-for"],"sourcesContent":["(ns defblog.routes\n  (:require-macros [secretary.core :refer [defroute]])\n  (:import [goog History]\n           [goog.history EventType])\n  (:require\n   [secretary.core :as secretary]\n   [goog.events :as gevents]\n   [re-frame.core :as re-frame]\n   [defblog.events :as events]\n   [bidi.bidi :as bidi]\n   [pushy.core :as push]))\n\n(def routes [\"/\" {\"\" :home\n                  \"about\" :about}])\n\n(defn- parse-url [url]\n  (bidi/match-route routes url))\n\n(defn- dispatch-route [matched-route]\n  (let [panel-name (keyword (str (name (:handler matched-route)) \"-panel\"))]\n    (re-frame/dispatch [::events/set-active-panel panel-name])))\n\n(defn app-routes []\n  (pushy/start! (pushy/pushy dispatch-route parse-url)))\n\n(def url-for (partial bidi/path-for routes))\n\n\n; (defn hook-browser-navigation! []\n;   (doto (History.)\n;     (gevents/listen\n;      EventType/NAVIGATE\n;      (fn [event]\n;        (secretary/dispatch! (.-token event))))\n;     (.setEnabled true)))\n\n; (defn hook-routes! []\n;   (def history (push/pushy secretary/dispatch! (fn [x] (when (secretary/locate-route x) x))))\n;   (push/start! history))\n\n; (defn app-routes []\n;   (secretary/set-config! :prefix \"/\")\n;   ;; --------------------\n;   ;; define routes here\n;   (defroute \"/\" []\n;     (re-frame/dispatch [::events/set-active-panel :home-panel]))\n\n;   (defroute \"/about\" []\n;     (re-frame/dispatch [::events/set-active-panel :about-panel]))\n\n;   (defroute \"/lambda-labs-gql-1\" []\n;     (re-frame/dispatch [::events/set-active-panel :lambda-labs-gql-1]))\n;   ; --------------------\n\n\n;   (hook-routes!))\n"]}