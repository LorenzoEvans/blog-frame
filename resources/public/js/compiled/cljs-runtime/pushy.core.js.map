{"version":3,"sources":["pushy/core.cljs"],"mappings":"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","names":["pushy.core/on-click","funk","goog.events/listen","js/document","pushy.core/update-history!","h","G__39858","pushy.core/set-retrieve-token!","t","path-prefix","location","pushy.core/set-create-url!","token","var_args","G__39860","pushy.core/new-history","js/Error","pushy.core.new_history.cljs$core$IFn$_invoke$arity$1","js/goog.history.Html5History.TokenTransformer","transformer","js/goog.history.Html5History","js/window","G__39862","pushy.core/set-token!","x__4433__auto__","m__4434__auto__","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","G__39864","pushy.core/replace-token!","pushy.core/get-token","pushy.core/start!","pushy.core/stop!","pushy.core/IHistory","this","title","pushy.core/processable-url?","uri","clojure.string/blank?","cljs.core/not","cljs.core/re-matches","cljs.core/re-pattern","js/location","pushy.core/get-token-from-uri","path","query","cljs.core/empty?","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","pushy.core/pushy","p__39868","map__39869","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","seq39865","G__39866","cljs.core/first","cljs.core/next","G__39867","self__4717__auto__","dispatch-fn","match-fn","processable-url?","identity-fn","prevent-default-when-no-match?","cljs.core/identity","cljs.core/constantly","history","pushy.core.new_history.cljs$core$IFn$_invoke$arity$0","event-keys","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/pushy","js/pushy.core","js/pushy.core.t_pushy$core39871","pushy.core/t_pushy$core39871","_39873","meta39872","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","pushy.core/->t_pushy$core39871","_","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","G__39874","G__39875","G__39876","goog.history.EventType/NAVIGATE","e","temp__5735__auto__","match","G__39877","G__39878","G__39879","G__39880","el","G__39881","js/goog.Uri","and__4120__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","next-token","G__39882","temp__5733__auto__","seq__39883","cljs.core/seq","cljs.core/deref","chunk__39884","count__39885","i__39886","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","key","goog.events/unlistenByKey","cljs.core/reset!","G__39888","pushy.core/supported?","pushy.core.supported_QMARK_.cljs$core$IFn$_invoke$arity$1","window","G__39890","pushy.core/push-state!","pushy.core.push_state_BANG_.cljs$core$IFn$_invoke$arity$3","pushy.core.pushy.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns pushy.core\n  (:require [goog.events :as events]\n            [clojure.string])\n  (:import goog.History\n           goog.history.Html5History\n           goog.history.Html5History.TokenTransformer\n           goog.history.EventType\n           goog.Uri))\n\n(defn- on-click [funk]\n  (events/listen js/document \"click\" funk))\n\n(defn- update-history! [h]\n  (doto h\n    (.setUseFragment false)\n    (.setPathPrefix \"\")\n    (.setEnabled true)))\n\n(defn- set-retrieve-token! [t]\n  (set! (.. t -retrieveToken)\n        (fn [path-prefix location]\n          (str (.-pathname location) (.-search location))))\n  t)\n\n(defn- set-create-url! [t]\n  (set! (.. t -createUrl)\n        (fn [token path-prefix location]\n          (str path-prefix token)))\n  t)\n\n(defn new-history\n  ([]\n   (new-history (-> (TokenTransformer.) set-retrieve-token! set-create-url!)))\n  ([transformer]\n   (-> (Html5History. js/window transformer) update-history!)))\n\n(defprotocol IHistory\n  (set-token! [this token] [this token title])\n  (replace-token! [this token] [this token title])\n  (get-token [this])\n  (start! [this])\n  (stop! [this]))\n\n(defn- processable-url? [uri]\n  (and (not (clojure.string/blank? uri))                    ;; Blank URLs are not processable.\n       (or (and (not (.hasScheme uri)) (not (.hasDomain uri))) ;; By default only process relative URLs + URLs matching window's origin\n           (some? (re-matches (re-pattern (str \"^\" (.-origin js/location) \".*$\"))\n                              (str uri))))))\n\n(defn- get-token-from-uri [uri]\n  (let [path (.getPath uri)\n        query (.getQuery uri)]\n    ;; Include query string in token\n    (if (empty? query) path (str path \"?\" query))))\n\n(defn pushy\n  \"Takes in three functions:\n    * dispatch-fn: the function that dispatches when a match is found\n    * match-fn: the function used to check if a particular route exists\n    * identity-fn: (optional) extract the route from value returned by match-fn\"\n  [dispatch-fn match-fn &\n   {:keys [processable-url? identity-fn prevent-default-when-no-match?]\n    :or   {processable-url?               processable-url?\n           identity-fn                    identity\n           prevent-default-when-no-match? (constantly false)}}]\n\n  (let [history (new-history)\n        event-keys (atom nil)]\n    (reify\n      IHistory\n      (set-token! [_ token]\n        (. history (setToken token)))\n      (set-token! [_ token title]\n        (. history (setToken token title)))\n\n      (replace-token! [_ token]\n        (. history (replaceToken token)))\n      (replace-token! [_ token title]\n        (. history (replaceToken token title)))\n\n      (get-token [_]\n        (.getToken history))\n\n      (start! [this]\n        (stop! this)\n        ;; We want to call `dispatch-fn` on any change to the location\n        (swap! event-keys conj\n               (events/listen history EventType.NAVIGATE\n                              (fn [e]\n                                (when-let [match (-> (.-token e) match-fn identity-fn)]\n                                  (dispatch-fn match)))))\n\n        ;; Dispatch on initialization\n        (when-let [match (-> (get-token this) match-fn identity-fn)]\n          (dispatch-fn match))\n\n        (swap! event-keys conj\n               (on-click\n                (fn [e]\n                  (when-let [el (some-> e .-target (.closest \"a\"))]\n                    (let [uri (.parse Uri (.-href el))]\n                      ;; Proceed if `identity-fn` returns a value and\n                      ;; the user did not trigger the event via one of the\n                      ;; keys we should bypass\n                      (when (and (processable-url? uri)\n                                 ;; Bypass dispatch if any of these keys\n                                 (not (.-altKey e))\n                                 (not (.-ctrlKey e))\n                                 (not (.-metaKey e))\n                                 (not (.-shiftKey e))\n                                 ;; Bypass if target = _blank\n                                 (not (get #{\"_blank\" \"_self\"} (.getAttribute el \"target\")))\n                                 ;; Bypass if explicitly instructed to ignore this element\n                                 (or (not (.hasAttribute el \"data-pushy-ignore\"))\n                                     (= (.getAttribute el \"data-pushy-ignore\") \"false\"))\n                                 ;; Only dispatch on left button click\n                                 (= 0 (.-button e)))\n                        (let [next-token (get-token-from-uri uri)]\n                          (if (identity-fn (match-fn next-token))\n                            ;; Dispatch!\n                            (do\n                              (if-let [title (-> el .-title)]\n                                (set-token! this next-token title)\n                                (set-token! this next-token))\n                              (.preventDefault e))\n\n                            (when (prevent-default-when-no-match? next-token)\n                              (.preventDefault e))))))))))\n        nil)\n\n      (stop! [this]\n        (doseq [key @event-keys]\n          (events/unlistenByKey key))\n        (reset! event-keys nil)))))\n\n(defn supported?\n  \"Returns whether Html5History is supported\"\n  ([] (supported? js/window))\n  ([window] (.isSupported Html5History window)))\n\n;; Backwards compatibility with pushy <= 0.2.2\n(defn push-state!\n  ([dispatch-fn match-fn]\n   (push-state! dispatch-fn match-fn identity))\n  ([dispatch-fn match-fn identity-fn]\n   (let [h (pushy dispatch-fn match-fn :identity-fn identity-fn)]\n     (start! h)\n     h)))\n"]}