{"version":3,"sources":["sibiro/core.cljc"],"mappings":"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","names":["sibiro.core/url-encode","string","G__44193","js/encodeURIComponent","sibiro.core/url-decode","G__44194","js/decodeURIComponent","sibiro.core/keyword-regex","start","re-start","re-stop","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/re-pattern","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","sibiro.core/path-parts","path","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p","clojure.string.split.cljs$core$IFn$_invoke$arity$2","sibiro.core/routes-tree","routes","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__44196","vec__44197","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","result","method","handler","route","parts","arguments","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/vector?","keywords","cljs.core/first","regexes","cljs.core/second","in","p1__44195#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","and__4120__auto__","cljs.core.update_in.cljs$core$IFn$_invoke$arity$5","cljs.core/assoc","sibiro.core/check-regexes","params","temp__5733__auto__","param","regex","cljs.core/re-matches","cljs.core/rest","sibiro.core/match-uri*","tree","part","cljs.core/LazySeq","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","temp__5735__auto__","subtree","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__44200","G__44201","G__44202","G__44203","G__44204","G__44205","G__44206","G__44207","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__44208","G__44209","G__44210","G__44211","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/zipmap","sibiro.core/query-string","data","iter__4523__auto__","s__44213","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__44215","cljs.core/chunk-buffer","i__44214","vec__44216","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44212","cljs.core/chunk-rest","vec__44219","cljs.core/cons","k","v","cljs.core/name","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","sibiro.core/throw-unmatched","key","value","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","sibiro.core/uri-for-fn","keyset","cljs.core/set","diff","cljs.core/disj","cljs.core/keys","s__44226","b__44228","i__44227","iter__44225","val","re","keys","cljs.core/select-keys","sibiro.core/routes-tags","opts","p__44229","vec__44230","_","tag","uff","ufhandler?","cljs.core/not","G__44233","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4385__auto__","k__4386__auto__","this__4387__auto__","k44235","else__4388__auto__","G__44239","cljs.core/Keyword","tags","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","ret__4407__auto__","p__44240","vec__44241","k__4408__auto__","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core/PersistentVector","G__44234","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","this__4381__auto__","h__4243__auto__","fexpr__44244","coll__4382__auto__","cljs.core/hash-unordered-coll","this44236","other44237","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__44245","cljs.core/keyword-identical?","expr__44246","G__44248","G__44249","G__44250","G__44251","this__4397__auto__","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/-conj","sibiro.core/CompiledRoutes","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__44238","extmap__4424__auto__","G__44252","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","sibiro.core/->CompiledRoutes","sibiro.core/map->CompiledRoutes","sibiro.core/compiled?","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","sibiro.core/compile-routes","p__44255","map__44256","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","seq44253","G__44254","cljs.core/next","self__4717__auto__","sibiro.core/match-uri","compiled","uri","request-method","G__44259","sibiro.core/uri-for","js/Error","obj","sibiro.core.uri_for.cljs$core$IFn$_invoke$arity$3","f","G__44261","sibiro.core/path-for","sibiro.core.path_for.cljs$core$IFn$_invoke$arity$3","map__44262","query-string","cljs.core/chunk-first"],"sourcesContent":["(ns sibiro.core\n  \"Simple data-driven request routing for Clojure and ClojureScript.\"\n  (:require [clojure.string :as str]))\n\n;;; Shared helpers.\n\n(defn- url-encode [string]\n  (some-> string str\n          #?(:clj (java.net.URLEncoder/encode \"UTF-8\")\n             :cljs (js/encodeURIComponent))\n          (.replace \"+\" \"%20\")))\n\n(defn- url-decode [string]\n  (some-> string str\n          #?(:clj (java.net.URLDecoder/decode \"UTF-8\")\n             :cljs (js/decodeURIComponent))))\n\n(defn- keyword-regex [string start]\n  (let [re-start (.indexOf string \"{\")\n        re-stop (.indexOf string \"}\")]\n    (if (<= 0 re-start)\n      [(keyword (subs string start re-start)) (re-pattern (subs string (inc re-start) re-stop))]\n      [(keyword (subs string start)) nil])))\n\n(defn- path-parts [path]\n  (map (fn [p] (cond (.startsWith p \":\") (keyword-regex p 1)\n                     (.startsWith p \"*\") (keyword-regex p 0)\n                     :otherwise          p))\n       (str/split path #\"/\")))\n\n\n;;; Internals for matching.\n\n(defn- routes-tree [routes]\n  (reduce (fn [result [method path handler :as route]]\n            (let [parts     (path-parts path)\n                  arguments (filter vector? parts)\n                  keywords  (map first arguments)\n                  regexes   (map second arguments)\n                  in        (map #(cond (= (and (vector? %) (first %)) :*) :*\n                                        (vector? %)                        :arg\n                                        :otherwise                         %) parts)]\n              (update-in result in assoc method {:route-handler handler :route-params keywords\n                                                 :regexes       regexes})))\n          {} routes))\n\n(defn- check-regexes [params regexes]\n  (loop [params params\n         regexes regexes]\n    (if-let [param (first params)]\n      (if-let [regex (first regexes)]\n        (if (re-matches regex param)\n          (recur (rest params) (rest regexes))\n          false)\n        (recur (rest params) (rest regexes)))\n      true)))\n\n(defn- match-uri* [tree parts params method]\n  (if-let [part (first parts)]\n    (lazy-seq\n     (concat (when-let [subtree (get tree part)]\n               (match-uri* subtree (rest parts) params method))\n             (when-let [subtree (get tree :arg)]\n               (match-uri* subtree (rest parts) (conj params part) method))\n             (when-let [subtree (get tree :*)]\n               (match-uri* subtree nil (conj params (apply str (interpose \"/\" parts))) method))))\n    (lazy-seq\n     (concat\n      (when-let [result (get tree method)]\n        (when (check-regexes params (:regexes result))\n          [(update-in (dissoc result :regexes) [:route-params] zipmap (map url-decode params))]))\n      (when-let [result (get tree :any)]\n        (when (check-regexes params (:regexes result))\n          [(update-in (dissoc result :regexes) [:route-params] zipmap (map url-decode params))]))))))\n\n\n;;; Internals for uri creation.\n\n(defn- query-string [data]\n  (->> (for [[k v] data]\n         (str (url-encode (name k)) \"=\" (url-encode (str v))))\n       (interpose \"&\")\n       (apply str \"?\")))\n\n(defn- throw-unmatched [regex key value]\n  (throw (ex-info (str \"Parameter \" key \" with value '\" value \"' does not match \" regex)\n                  {:regex regex :key key :value value})))\n\n#?(:clj\n   ;; For Clojure, generate a function inlining as much knowlegde as possible.\n   (defn- uri-for-fn-form [path]\n     (let [parts  (path-parts path)\n           keyset (set (map first (filter vector? parts)))\n           data   (gensym)]\n       `(fn [~data]\n          (when-let [diff# (seq (reduce disj ~keyset (keys ~data)))]\n            (throw (ex-info \"Missing data for path.\" {:missing-keys diff#})))\n          {:uri          (str ~@(->> (for [part parts\n                                           :let [key (first part)]]\n                                       (if (vector? part)\n                                         (if-let [re (second part)]\n                                           `(let [val# (get ~data ~key)]\n                                              (if (re-matches ~re val#)\n                                                (#'sibiro.core/url-encode val#)\n                                                (#'sibiro.core/throw-unmatched ~re ~key val#)))\n                                           `(#'sibiro.core/url-encode (get ~data ~key)))\n                                         part))\n                                     (interpose \"/\")))\n           :query-string (when-let [keys# (seq (reduce disj (set (keys ~data)) ~keyset))]\n                           (#'sibiro.core/query-string (select-keys ~data keys#)))}))))\n\n#?(:clj\n   (defn- uri-for-fn [path]\n     (eval (uri-for-fn-form path))))\n\n#?(:cljs\n   ;; For ClojureScript, an ordinary function because evaluation is\n   ;; still somewhat hard (for me at least as an unexperienced\n   ;; ClojureScript developer).\n   (defn- uri-for-fn [path]\n     (let [parts  (path-parts path)\n           keyset (set (map first (filter vector? parts)))]\n       (fn [data]\n         (when-let [diff (seq (reduce disj keyset (keys data)))]\n           (throw (ex-info \"Missing data for path.\" {:missing-keys diff})))\n         {:uri          (apply str (->> (for [part parts]\n                                          (if (vector? part)\n                                            (let [key (first part)\n                                                  val (get data key)]\n                                              (if-let [re (second part)]\n                                                (if (re-matches re val)\n                                                  (url-encode val)\n                                                  (throw-unmatched re key val))\n                                                (url-encode val)))\n                                            part))\n                                        (interpose \"/\")))\n          :query-string (when-let [keys (seq (reduce disj (set (keys data)) keyset))]\n                          (query-string (select-keys data keys)))}))))\n\n(defn- routes-tags [routes opts]\n  (reduce (fn [result [_ path handler tag]]\n            (let [uff        (uri-for-fn path)\n                  ufhandler? (not (:uri-for-tagged-only? opts))]\n              (cond-> result\n                tag        (assoc tag uff)\n                ufhandler? (assoc handler uff))))\n          {} routes))\n\n\n;;; Routes record\n\n(defrecord CompiledRoutes [tree tags])\n\n#?(:clj\n   (defmethod print-method CompiledRoutes [v ^java.io.Writer w]\n     (.write w (str v))))\n\n#?(:clj\n   (do (alter-meta! #'map->CompiledRoutes assoc :no-doc true)\n       (alter-meta! #'->CompiledRoutes assoc :no-doc true)))\n\n\n;;; Public API\n\n(defn ^:no-doc compiled? [routes]\n  (instance? CompiledRoutes routes))\n\n(defn compile-routes\n  \"Compiles a routes datastructure for use in `match-uri` and\n  `uri-for`. Routes is a sequence of sequences (e.g. a vector of\n  vectors) containing 3 or 4 elements: a method keyword (or :any), a\n  clout-like path, a result object (can be a handler), and optionally\n  a tag. For example:\n\n  [[:get  \\\"/admin/user/\\\" user-list]\n   [:get  \\\"/admin/user/:id\\\" user-get :user-page]\n   [:post \\\"/admin/user/:id\\\" user-update]\n   [:any  \\\"/:*\\\" handle-404]]\n\n  The order in which the routes are specified does not matter. Longer\n  routes always take precedence, exact uri parts take precedence over\n  route parameters, catch-all (:*) is tried last, and specific request\n  methods take precedence over :any.\n\n  Compiling takes some optional keyword arguments:\n\n   :uri-for-tagged-only? - When set to true, only tagged routes are\n     compiled for use with `uri-for` and can only be found by their\n     tag. Defaults to false.\n\n  The routes are compiled into a tree structure, for fast matching.\n  Functions for creating URIs (`uri-for`) are also precompiled for\n  every route.\"\n  [routes & {:as opts}]\n  (map->CompiledRoutes {:tree (routes-tree routes)\n                        :tags (routes-tags routes opts)}))\n\n(defn match-uri\n  \"Given compiled routes, an URI and a request-method, returns\n  {:route-handler handler, :route-params {...}, :alternatives (...)}\n  for a match, or nil. For example:\n\n  (match-uri (compile-routes [[:post \\\"/admin/user/:id\\\" :update-user]\n                              [:post \\\"/admin/*\\\"        :admin-catch]])\n             \\\"/admin/user/42\\\" :post)\n  ;=> {:route-handler :update-user, :route-params {:id \\\"42\\\"}\n       :alternatives ({:route-handler :admin-catch, :route-params {:* \\\"user/42\\\"}})}\n\n  The values in :route-params are URL decoded for you.\n  The :alternatives value is lazy, so it won't search for alternatives\n  if you don't ask for it.\"\n  [compiled uri request-method]\n  (let [result (match-uri* (:tree compiled) (str/split uri #\"/\") [] request-method)]\n    (when (seq result)\n      (assoc (first result) :alternatives (rest result)))))\n\n(defn uri-for\n  \"Given compiled routes and a handler (or tag), and optionally\n  parameters, returns {:uri \\\"...\\\", :query-string \\\"?...\\\"}. For\n  example:\n\n  (uri-for (compile-routes [[:post \\\"/admin/user/:id\\\" :update-user]])\n           :update-user {:id 42 :name \\\"alice\\\"})\n  ;=> {:uri \\\"/admin/user/42\\\", :query-string \\\"?name=alice\\\"}\n\n  An exception is thrown if parameters for the URI are missing in the\n  data map. The values in the data map are URL encoded for you.\"\n  {:arglists '([compiled handler] [compiled handler params]\n               [compiled tag] [compiled tag params])}\n  ([compiled obj]\n   (uri-for compiled obj nil))\n  ([compiled obj data]\n   (when-let [f (get (:tags compiled) obj)]\n     (f data))))\n\n(defn path-for\n  \"Convenience method concatenating :uri and :query-string from\n  `uri-for`.\"\n  {:arglists '([compiled handler] [compiled handler params]\n               [compiled tag] [compiled tag params])}\n  ([compiled obj]\n   (path-for compiled obj nil))\n  ([compiled obj data]\n   (when-let [{:keys [uri query-string]} (uri-for compiled obj data)]\n     (str uri query-string))))\n"]}